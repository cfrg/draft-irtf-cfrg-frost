{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2023-12-26T00:38:56.757068+00:00",
  "repo": "cfrg/draft-irtf-cfrg-frost",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "editorial",
      "description": "Editorial",
      "color": "59FAD3"
    },
    {
      "name": "interop",
      "description": "Interop-related issue",
      "color": "006b75"
    },
    {
      "name": "design",
      "description": "Design-related issue",
      "color": "d93f0b"
    },
    {
      "name": "blocked",
      "description": "",
      "color": "D0590D"
    },
    {
      "name": "discuss",
      "description": "",
      "color": "46C465"
    },
    {
      "name": "dependencies",
      "description": "Pull requests that update a dependency file",
      "color": "0366d6"
    },
    {
      "name": "next-version",
      "description": "Next draft version",
      "color": "ECD752"
    }
  ],
  "issues": [
    {
      "number": 5,
      "id": "MDU6SXNzdWU5NjM5NjI3NTI=",
      "title": "Ed25519 compatibility",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/5",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Beyond ristretto255, we should describe how to instantiate FROST with the [edwards25519 curve from RFC 8032](https://datatracker.ietf.org/doc/html/rfc8032#section-5.1). We might include the EdDSA verification procedure, too, listed below (bugs are my own):\r\n\r\n~~~\r\nEdDSA_verify(msg, sig, PK)\r\n\r\nInputs:\r\n- msg, message signed, an octet string\r\n- sig, message signature, a tuple of scalars (z, c)\r\n- PK, EdDSA public key\r\n\r\nOutputs: 1 if the signature is valid, and 0 otherwise\r\n\r\ndef EdDSA_verify(msg, sig, PK):\r\n  (z, c) = SIG\r\n  R' = (z * P) + (PK * c^-1)\r\n  c' = Hash(m, R')\r\n  if c == c':\r\n    return 1\r\n  return 0\r\n~~~",
      "createdAt": "2021-08-09T12:50:59Z",
      "updatedAt": "2021-12-13T23:49:23Z",
      "closedAt": "2021-12-13T23:49:23Z",
      "comments": []
    },
    {
      "number": 11,
      "id": "I_kwDOEpUZs84-1lXn",
      "title": "Add P-256 ciphersuite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/11",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "interop"
      ],
      "body": "",
      "createdAt": "2021-11-15T23:14:32Z",
      "updatedAt": "2021-12-14T14:56:00Z",
      "closedAt": "2021-12-14T14:56:00Z",
      "comments": []
    },
    {
      "number": 12,
      "id": "I_kwDOEpUZs84-1li8",
      "title": "Always compute with a cofactor h, even if h = 1 for the ciphersuite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/12",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-11-15T23:15:09Z",
      "updatedAt": "2022-02-28T19:07:44Z",
      "closedAt": "2022-02-28T19:07:43Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly are we OK to close this out?",
          "createdAt": "2022-02-23T23:27:24Z",
          "updatedAt": "2022-02-23T23:27:24Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> Specify signature encoding based on group Element and Scalar serialization #85\r\n\r\nI think the place we need to use the cofactor check is in `verify`, and to do that we need to enumerate the cofactor `h` for each ciphersuite\r\n\r\nExamples from `frost-redjubjub` which multiplies by the cofactor in `is_small_order()`:\r\nhttps://github.com/ZcashFoundation/frost/blob/8ce992541afa2e49fbe7606dd81ee8c2a8648446/frost-redjubjub/src/verification_key.rs#L196\r\nhttps://github.com/ZcashFoundation/frost/blob/f10a159c7039641fae63b53387e66e55a8604acf/frost-redjubjub/src/batch.rs#L258\r\n\r\n(Batch is not described in the spec but the Schnorr verification procedure leads directly to the batch verification procedure)\r\n\r\n<img width=\"510\" alt=\"image\" src=\"https://user-images.githubusercontent.com/552961/155616257-b1fbc1c6-c30d-4b5c-9bfc-8abad6d73cc7.png\">\r\n",
          "createdAt": "2022-02-24T22:12:20Z",
          "updatedAt": "2022-02-24T22:12:52Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly isn't that being tracked separately by #68?",
          "createdAt": "2022-02-24T22:57:32Z",
          "updatedAt": "2022-02-24T22:57:32Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "You are correct! I think we can close this",
          "createdAt": "2022-02-28T19:07:43Z",
          "updatedAt": "2022-02-28T19:07:43Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOEpUZs84-1lxO",
      "title": "Detail domain separation ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/13",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-15T23:15:57Z",
      "updatedAt": "2021-12-13T23:30:56Z",
      "closedAt": "2021-12-13T23:30:56Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "This should be `PARAM_NAME_VARIABLE NAME`. So, for example, `RISTRETTO_RHO`",
          "createdAt": "2021-12-13T23:30:29Z",
          "updatedAt": "2021-12-13T23:30:29Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Dupe of #15 -- closing.",
          "createdAt": "2021-12-13T23:30:56Z",
          "updatedAt": "2021-12-13T23:30:56Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOEpUZs84-1pLo",
      "title": "Define a domain separation bytestring for each parameter set",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/15",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "To update[ this change](https://github.com/chelseakomlo/frost-spec/pull/14) to point to $PARAMETER_SET.DOMAIN_SEPARATOR or something like that.",
      "createdAt": "2021-11-15T23:28:46Z",
      "updatedAt": "2022-02-03T21:09:33Z",
      "closedAt": "2022-02-03T21:09:33Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "For example: `H1(m) = H(\"FROST-RISTRETTO-SHA512\" || \"rho\" || len(m) || m)`",
          "createdAt": "2021-12-13T23:37:11Z",
          "updatedAt": "2021-12-13T23:37:11Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This is done.",
          "createdAt": "2022-02-03T21:09:33Z",
          "updatedAt": "2022-02-03T21:09:33Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOEpUZs84-1pvt",
      "title": "Create list of known implementations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/16",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "And put it in the README.",
      "createdAt": "2021-11-15T23:31:05Z",
      "updatedAt": "2021-12-13T22:48:11Z",
      "closedAt": "2021-12-13T22:48:11Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Started in #30",
          "createdAt": "2021-12-13T22:48:11Z",
          "updatedAt": "2021-12-13T22:48:11Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOEpUZs84-1p4H",
      "title": "Specify order of commitments hashed into rho",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/17",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [
        "design"
      ],
      "body": "Currently it's an unordered set. We can probably just order by participant ID. We should also hash the participant ID into the value as well. We should encode these IDs as a 32-bit unsigned integer.\r\n\r\n````\r\nfor item in signing_package.signing_commitments.iter() {\r\n        hasher.update(item.index.to_be_bytes());\r\n        let hiding_bytes = item.hiding.0.compress().to_bytes();\r\n        hasher.update(hiding_bytes);\r\n        let binding_bytes = item.binding.0.compress().to_bytes();\r\n        hasher.update(binding_bytes);\r\n    }\r\n```",
      "createdAt": "2021-11-15T23:31:35Z",
      "updatedAt": "2022-01-29T00:58:07Z",
      "closedAt": "2022-01-29T00:58:06Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "On group consensus, we'll move to the order being `(identifier, commitment_i)`",
          "createdAt": "2022-01-13T23:57:56Z",
          "updatedAt": "2022-01-13T23:57:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think #52 addresses this. It's still not clear how to encode the indices in the hash function input, for example. Are they 32-bit unsigned integers? Something else? I'll put up a PR that addresses this further.",
          "createdAt": "2022-01-27T17:25:00Z",
          "updatedAt": "2022-01-27T17:25:00Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #53.",
          "createdAt": "2022-01-29T00:58:06Z",
          "updatedAt": "2022-01-29T00:58:06Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOEpUZs84-1p_c",
      "title": "Ensure that participant identifiers can never be zero",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/18",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "... as zero (0) is a special-case identifier.",
      "createdAt": "2021-11-15T23:32:02Z",
      "updatedAt": "2021-12-13T17:26:42Z",
      "closedAt": "2021-12-13T17:26:42Z",
      "comments": []
    },
    {
      "number": 19,
      "id": "I_kwDOEpUZs84-1qOq",
      "title": "Specify known implementations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/19",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We should list all known FROST implementations and their status in terms of interoperability. \r\n\r\nSee https://github.com/cfrg/draft-irtf-cfrg-hpke for an example",
      "createdAt": "2021-11-15T23:32:50Z",
      "updatedAt": "2021-11-15T23:33:03Z",
      "closedAt": "2021-11-15T23:33:03Z",
      "comments": []
    },
    {
      "number": 20,
      "id": "I_kwDOEpUZs84-1qpW",
      "title": "Create test vectors for a NIST curve",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/20",
      "state": "CLOSED",
      "author": "isislovecruft",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "interop"
      ],
      "body": "We should specify valid test vectors for something like P256 for users who require following those standards.",
      "createdAt": "2021-11-15T23:34:34Z",
      "updatedAt": "2021-12-13T23:34:50Z",
      "closedAt": "2021-12-13T23:34:50Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "We need to specify this param set in the ciphersuites section: https://github.com/chelseakomlo/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#ciphersuites-ciphersuites",
          "createdAt": "2021-12-13T23:33:13Z",
          "updatedAt": "2021-12-13T23:33:13Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Duplicate of  #11",
          "createdAt": "2021-12-13T23:34:49Z",
          "updatedAt": "2021-12-13T23:34:49Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOEpUZs84-1seN",
      "title": "Change construction for more efficient variant",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/21",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A more efficient variant of FROST was specified in https://eprint.iacr.org/2021/1375; the draft should reflect this.",
      "createdAt": "2021-11-15T23:43:25Z",
      "updatedAt": "2021-12-06T23:26:55Z",
      "closedAt": "2021-12-06T23:26:55Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #28",
          "createdAt": "2021-12-06T23:26:55Z",
          "updatedAt": "2021-12-06T23:26:55Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOEpUZs84-1stj",
      "title": "Interop testing over Ristretto-Sha512",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/22",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "interop"
      ],
      "body": "",
      "createdAt": "2021-11-15T23:45:43Z",
      "updatedAt": "2022-02-02T01:49:47Z",
      "closedAt": "2022-02-02T01:49:40Z",
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "I have another FROST on Ristretto impl ready, I will commence interop testing with `frost-dalek`",
          "createdAt": "2021-12-14T00:10:19Z",
          "updatedAt": "2021-12-14T00:10:19Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Blocked by conformance with #42 first",
          "createdAt": "2022-01-14T00:20:50Z",
          "updatedAt": "2022-01-14T00:20:50Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly can we close this out and track interop in the implementation repos? I don't think this is an issue for the spec to resolve.",
          "createdAt": "2022-02-01T23:50:22Z",
          "updatedAt": "2022-02-01T23:50:22Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> @dconnolly can we close this out and track interop in the implementation repos? I don't think this is an issue for the spec to resolve.\r\n\r\n\ud83d\udcaf \r\n\r\nhttps://github.com/ZcashFoundation/frost/issues/8",
          "createdAt": "2022-02-02T01:49:40Z",
          "updatedAt": "2022-02-02T01:49:40Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "I_kwDOEpUZs84-1tTP",
      "title": "Explicitly define a Schnorr signature inline",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/23",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [
        "editorial"
      ],
      "body": "We define the Schnorr signature operations in 7.1, but need a little more detail?",
      "createdAt": "2021-11-15T23:50:59Z",
      "updatedAt": "2022-01-29T00:58:48Z",
      "closedAt": "2022-01-29T00:58:47Z",
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Does this section resolve this issue?\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#schnorr-signature-operations-dep-schnorr\r\n\r\n![image](https://user-images.githubusercontent.com/552961/149429534-fb81cce6-6352-434c-9556-9bf9ab64bf94.png)\r\n",
          "createdAt": "2022-01-14T00:18:55Z",
          "updatedAt": "2022-01-14T00:18:55Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yep, I think we can close this. ",
          "createdAt": "2022-01-29T00:58:47Z",
          "updatedAt": "2022-01-29T00:58:47Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOEpUZs84-1ti5",
      "title": "Specify verification",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/24",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "Specify with `(R, z)` and also how parameters are used within the verification algorithm",
      "createdAt": "2021-11-15T23:53:02Z",
      "updatedAt": "2021-12-14T21:11:44Z",
      "closedAt": "2021-12-14T21:11:44Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Two TODOs: \r\n1. Add the verification algorithm with `(R, z)` as the output\r\n2. Include information in each ciphersuite about deriving `c`",
          "createdAt": "2021-12-13T23:54:56Z",
          "updatedAt": "2021-12-13T23:55:41Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This may require changing the signing procedures such that the output signatures are of the form `(R, z)` (commitment based, where the challenge is rederived).",
          "createdAt": "2021-12-13T23:56:53Z",
          "updatedAt": "2021-12-13T23:56:53Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo can we close this now that #34 is merged?",
          "createdAt": "2021-12-14T20:56:04Z",
          "updatedAt": "2021-12-14T20:56:20Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, thanks for flagging. Closed by #34\r\n",
          "createdAt": "2021-12-14T21:11:44Z",
          "updatedAt": "2021-12-14T21:11:44Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOEpUZs84-1t9h",
      "title": "Explictly describe assumptions when making each signing participant an aggregator",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/25",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [
        "design"
      ],
      "body": "Vs having a single explicit aggregator:\r\n\r\n![image](https://user-images.githubusercontent.com/552961/141872069-a9d80b4d-094d-4159-8006-0de1843bc0ed.png)\r\n\r\nTo me this assumes some other trust level amongst the signing participants if they are allowed to self-verify its own signature before outputting it.",
      "createdAt": "2021-11-15T23:56:46Z",
      "updatedAt": "2022-01-18T20:00:55Z",
      "closedAt": "2022-01-18T20:00:55Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Use case: https://blog.coinbase.com/threshold-digital-signatures-1d467054acd4",
          "createdAt": "2021-11-16T00:02:26Z",
          "updatedAt": "2021-11-16T00:02:26Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in #39",
          "createdAt": "2022-01-18T20:00:55Z",
          "updatedAt": "2022-01-18T20:00:55Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOEpUZs84_C6mv",
      "title": "Drop SUM/PROD notation in favor of subroutines",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/26",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "editorial"
      ],
      "body": "We use SUM/PROD for convenience, but I find it to be somewhat unreadable in text form. For example, this:\r\n\r\n~~~\r\nf_zero = SUM(points[0], points[t]){point}: point[1] * derive_lagrange_coefficient(point[0], L)\r\n~~~\r\n\r\nCould be written as:\r\n\r\n~~~\r\nf_zero = F(0)\r\nfor point in points:\r\n   f_zero = f_zero + (point[1] * derive_lagrange_coefficient(point[0], L))\r\n~~~\r\n\r\nThis is certainly subjective, but I find the latter easier to read in text form. (It would be lovely if we could throw \\sum and \\prod in specs!)",
      "createdAt": "2021-11-18T19:38:01Z",
      "updatedAt": "2022-01-29T00:57:55Z",
      "closedAt": "2022-01-29T00:57:55Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #53.",
          "createdAt": "2022-01-29T00:57:55Z",
          "updatedAt": "2022-01-29T00:57:55Z"
        }
      ]
    },
    {
      "number": 37,
      "id": "I_kwDOEpUZs85Bn_hW",
      "title": "Review length of messages",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/37",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There is currently a limit on the length of messages at `2^16-1`. Let's review this restriction to determine if this length is sufficient, and what to recommend in the setting if longer messages are needed. ",
      "createdAt": "2022-01-13T01:21:08Z",
      "updatedAt": "2022-01-29T01:12:35Z",
      "closedAt": "2022-01-29T01:12:35Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Tracking in #55.",
          "createdAt": "2022-01-29T01:12:35Z",
          "updatedAt": "2022-01-29T01:12:35Z"
        }
      ]
    },
    {
      "number": 38,
      "id": "I_kwDOEpUZs85BoADG",
      "title": "Review naming of nonces",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/38",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "Right now we refer to the nonce pair as `(D, E)` as is done in the FROST paper. Let's review this notation and decide if we should adopt more descriptive naming such as \"hiding\" and \"binding.\"",
      "createdAt": "2022-01-13T01:23:16Z",
      "updatedAt": "2022-02-04T01:21:32Z",
      "closedAt": "2022-02-04T01:21:32Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, please! `(D, E)` are quite vague. @dconnolly would you be able to take this? I think `hiding_nonce` and `blinding_nonce` are perfectly fine terms for `d` and `e`, respectively. I suppose we might call the commitments to these nonces `hiding_nonce_commitment` and `blinding_nonce_commitment`, resp?",
          "createdAt": "2022-01-29T01:12:16Z",
          "updatedAt": "2022-01-29T01:12:16Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in #62.",
          "createdAt": "2022-02-03T21:07:53Z",
          "updatedAt": "2022-02-03T21:07:53Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "I_kwDOEpUZs85BoFcw",
      "title": "Review inputs to frost_sign",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/40",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Should we rewrite inputs as a function of the SigningPackage, or have SigningPackage deserialization done externally to these functions?",
      "createdAt": "2022-01-13T01:44:47Z",
      "updatedAt": "2022-02-23T23:27:12Z",
      "closedAt": "2022-02-23T23:27:12Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think these should be expressed in terms of the \"raw\" values. SigningPackage is an external detail. (An application could use a different encoding if it wanted without changing the breaking interoperability \ud83e\udd37 )",
          "createdAt": "2022-01-29T01:11:04Z",
          "updatedAt": "2022-01-29T01:11:04Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "I_kwDOEpUZs85BrqEB",
      "title": "Add test vectors for FROST(P-256, SHA-256)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/41",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See #49 for description of test vectors. ",
      "createdAt": "2022-01-13T15:50:20Z",
      "updatedAt": "2022-02-01T20:42:53Z",
      "closedAt": "2022-02-01T20:42:53Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd prefer we close this and use a single issue to track all test vectors.",
          "createdAt": "2022-02-01T20:42:53Z",
          "updatedAt": "2022-02-01T20:42:53Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "I_kwDOEpUZs85BrrYt",
      "title": "Add test vectors for FROST(ristretto255, SHA-512) ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/42",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "See #49 for description of test vectors. ",
      "createdAt": "2022-01-13T15:55:07Z",
      "updatedAt": "2022-01-29T00:59:18Z",
      "closedAt": "2022-01-29T00:59:18Z",
      "comments": []
    },
    {
      "number": 43,
      "id": "I_kwDOEpUZs85Brz0z",
      "title": "Messages should be fixed size when hashing ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/43",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This comes from an audit of FROST implementations, an easy fix for this is to hash the message before it is hashed to derive `rho` or the challenge. \r\n\r\nSee recommendation 2.2 https://github.com/ZcashFoundation/redjubjub/blob/main/zcash-frost-audit-report-20210323.pdf",
      "createdAt": "2022-01-13T16:24:43Z",
      "updatedAt": "2022-02-01T20:44:14Z",
      "closedAt": "2022-02-01T17:45:05Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in #55 ",
          "createdAt": "2022-02-01T17:45:05Z",
          "updatedAt": "2022-02-01T17:45:05Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Wait, is it? #55 is about lifting message size limits. This issue is about pre-hashing the message before signing it. They're separable issues, I think. Can we please reopen this and track them separately?",
          "createdAt": "2022-02-01T20:44:14Z",
          "updatedAt": "2022-02-01T20:44:14Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "I_kwDOEpUZs85Bsdf0",
      "title": "Denote when and which information needs to be deleted",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/44",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [
        "next-version"
      ],
      "body": "At various times throughout the protocol, secret information should be securely deleted. We should denote in the draft when these occur and over which information. ",
      "createdAt": "2022-01-13T18:54:20Z",
      "updatedAt": "2022-02-28T19:41:36Z",
      "closedAt": "2022-02-28T19:41:36Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo can you please take this? It should go into the security considerations.",
          "createdAt": "2022-01-29T01:09:32Z",
          "updatedAt": "2022-01-29T01:09:32Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "I_kwDOEpUZs85Bsel0",
      "title": "Add failure case when signers receive insufficient information for a valid signing operation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/45",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For example, if signers receive fewer than `t` commitments, they should abort signing. \r\n\r\nWe should discuss also if signers were to receive commitments where either value is null. ",
      "createdAt": "2022-01-13T18:57:17Z",
      "updatedAt": "2022-02-01T00:27:37Z",
      "closedAt": "2022-02-01T00:27:29Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo can we fold this into #48 and close this?",
          "createdAt": "2022-01-31T16:14:56Z",
          "updatedAt": "2022-01-31T16:14:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "(Done and copied the issue text over)",
          "createdAt": "2022-02-01T00:27:37Z",
          "updatedAt": "2022-02-01T00:27:37Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "I_kwDOEpUZs85BtdCy",
      "title": "Signing participants should verify message before signing",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/47",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "The draft assumes that all participants verify the message that they are signing before they sign it. We should make this assumption explicit in the draft. ",
      "createdAt": "2022-01-13T21:49:30Z",
      "updatedAt": "2022-02-23T16:08:33Z",
      "closedAt": "2022-02-23T16:08:33Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The draft assumes that all participants verify the message that they are signing before they sign it. We should make this assumption explicit in the draft.\r\n\r\n@chelseakomlo What does it mean to verify the message? This seems like an application-specific consideration that might be useful to note in the security considerations, but I don't see a protocol change required here.",
          "createdAt": "2022-01-29T01:00:17Z",
          "updatedAt": "2022-01-29T01:00:17Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "It is application-specific, but I think we should call this out specifically because it is easy to overlook or forget about. I'll note it as a security consideration but also say that how this is performed is application-specific.",
          "createdAt": "2022-02-01T17:43:16Z",
          "updatedAt": "2022-02-01T17:43:16Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I guess I don't understand what sort of verification you have in mind. Do you have an example?",
          "createdAt": "2022-02-01T17:44:04Z",
          "updatedAt": "2022-02-01T17:44:04Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOEpUZs85Bt8XV",
      "title": "Specify places in the spec where the protocol should error or abort",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/48",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [
        "next-version"
      ],
      "body": "We should add everywhere in the spec where the protocol should error and/or abort, such as: \r\n\r\n[X] When a signature share is invalid\r\n[X] When `t` is set to `1`- `THRESHOLD_LIMIT` MUST be greater than one\r\n[X] When `t` is greater than `n`\r\n[X] When any received commitment is null\r\n[X] When a participant index is `0`\r\n[X] When the message that is requested to be signed is invalid\r\n[X] When a signing request is made with respect to commitments that were used for a previous signature (i.e, request for a nonce reuse)\r\n[X] Verification of a signature share fails on aggregation\r\n\r\n",
      "createdAt": "2022-01-13T23:22:00Z",
      "updatedAt": "2022-03-28T19:25:04Z",
      "closedAt": "2022-03-28T19:25:04Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Updated status of checks, and removed unnecessary checks. ",
          "createdAt": "2022-03-28T19:25:04Z",
          "updatedAt": "2022-03-28T19:25:04Z"
        }
      ]
    },
    {
      "number": 49,
      "id": "I_kwDOEpUZs85Bt_C3",
      "title": "Test Vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/49",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "Here are the test vectors that we would like for each ciphersuite:\r\n\r\n- Success case\r\n1. (2,3), where the threshold is 2 and number of participants are 3\r\n2. Inputs should be deterministic, outputs should be the defined serialized structs. \r\n3. Tests should validate for the (2,3) signers and (3,3) signers\r\n\r\n- Failure cases: \r\n1. Participant index of 0\r\n2. When t is one",
      "createdAt": "2022-01-13T23:30:26Z",
      "updatedAt": "2022-02-12T01:38:54Z",
      "closedAt": "2022-02-12T01:38:54Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Related: https://github.com/ZcashFoundation/frost/blob/main/frost-ristretto255/tests/frost.rs",
          "createdAt": "2022-01-28T22:09:23Z",
          "updatedAt": "2022-01-28T22:09:23Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Linking #42 and #41, and close those two.",
          "createdAt": "2022-01-29T00:59:14Z",
          "updatedAt": "2022-01-29T00:59:14Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #60 for Ristretto, opening #41 to track FROST(P-256, SHA-256)",
          "createdAt": "2022-02-01T20:05:47Z",
          "updatedAt": "2022-02-01T20:05:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We haven't resolved this yet! Test vectors still aren't in the draft, and not all cases above have been covered.",
          "createdAt": "2022-02-01T20:24:14Z",
          "updatedAt": "2022-02-01T20:24:14Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "I_kwDOEpUZs85BuDm5",
      "title": "Clarify HashToScalar/H2 reduction to scalars",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/50",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "\"c\" and \"rho\" are both the result of hash-to-scalar (H2), but we don't really make clear how the scalar conversion is done.\r\n\r\n",
      "createdAt": "2022-01-13T23:45:35Z",
      "updatedAt": "2022-02-04T01:20:49Z",
      "closedAt": "2022-02-04T01:20:49Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Same goes for the output of H1, too, which is assumed to map to a non-zero scalar.",
          "createdAt": "2022-01-26T23:12:19Z",
          "updatedAt": "2022-01-26T23:12:33Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in #62.",
          "createdAt": "2022-02-03T21:08:04Z",
          "updatedAt": "2022-02-03T21:08:04Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "I_kwDOEpUZs85BuDql",
      "title": "Drop HashToScalar, clarify H2 reduction to scalars",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/51",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\"c\" and \"rho\" are both the result of hash-to-scalar (H2), but we don't really make clear how the scalar conversion is done.",
      "createdAt": "2022-01-13T23:45:49Z",
      "updatedAt": "2022-01-13T23:46:46Z",
      "closedAt": "2022-01-13T23:46:46Z",
      "comments": []
    },
    {
      "number": 54,
      "id": "I_kwDOEpUZs85CoRGF",
      "title": "Verification of signature shares should be mandatory",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/54",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "This also means that whoever is performing aggregate needs to be given the correct public keys after keygen is performed. I.e, those keys should be valid, but it is up to the implementation to ensure that they are.",
      "createdAt": "2022-01-28T21:13:29Z",
      "updatedAt": "2022-01-31T14:58:11Z",
      "closedAt": "2022-01-31T14:58:11Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll take this.",
          "createdAt": "2022-01-29T01:00:32Z",
          "updatedAt": "2022-01-29T01:00:32Z"
        }
      ]
    },
    {
      "number": 55,
      "id": "I_kwDOEpUZs85CoTG3",
      "title": "Length of message to be signed should be larger",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/55",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "Currently messages are limited to the `2^16` length in a `SigningPackage`, but instead this should be limited by the underlying hash function minus minus overhead such as public key, commitment set, etc. \r\n\r\n\r\n",
      "createdAt": "2022-01-28T21:24:43Z",
      "updatedAt": "2022-02-14T18:28:01Z",
      "closedAt": "2022-02-14T18:28:01Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Upon revisiting this, I think we ought to remove the practical limit entirely and let applications define it. We should define the theoretical limit based on the underlying cryptographic hash function, but how applications choose to wrap up messages between coordinator and signers should be left to those applications, I think.\r\n\r\nBasically, I think I'm now advocating for removing `SigningPackage` and the like as _requirements_. A shared wire format isn't necessary for interoperability here. ",
          "createdAt": "2022-01-31T16:43:03Z",
          "updatedAt": "2022-01-31T16:43:03Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that the message length should be unbounded but I'm uncertain about removing the `SigningPackage` wire format altogether. Do you mind saying why this is a preferable option than just allowing the message length to be variable-sized in this data structure?",
          "createdAt": "2022-01-31T23:48:25Z",
          "updatedAt": "2022-01-31T23:48:25Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do you mind saying why this is a preferable option than just allowing the message length to be variable-sized in this data structure?\r\n\r\nSure: it will surely vary by use case and application embedding, so a one-size-fits-all structure isn't necessary for interop. Thus, I think we ought to just remove it.",
          "createdAt": "2022-02-01T00:12:50Z",
          "updatedAt": "2022-02-01T00:12:50Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok. We can keep `SigningPackage` as an example, but remove the requirement that implementations enforce this structure? I can do this change. ",
          "createdAt": "2022-02-01T15:59:47Z",
          "updatedAt": "2022-02-01T15:59:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I would hold off until we have a larger discussion about it. I think this relates to the interface that this specification should expose, which is something I raised in #62.",
          "createdAt": "2022-02-01T16:00:47Z",
          "updatedAt": "2022-02-01T16:00:47Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close as resolved?",
          "createdAt": "2022-02-09T19:31:05Z",
          "updatedAt": "2022-02-09T19:31:05Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we can, yeah. The message limit was lifted since the API no longer operates in terms of SignaturePackages and the like. @chelseakomlo, if you're OK with this, can you please close?",
          "createdAt": "2022-02-09T20:47:22Z",
          "updatedAt": "2022-02-09T20:47:22Z"
        }
      ]
    },
    {
      "number": 56,
      "id": "I_kwDOEpUZs85CoUPA",
      "title": "Limit number of signers to 2^16-1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/56",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There is no theoretical hard bound on the number of participants, but we cap the number of participants to something reasonable just for ease of managing secret key material. ",
      "createdAt": "2022-01-28T21:31:43Z",
      "updatedAt": "2022-01-31T18:48:50Z",
      "closedAt": "2022-01-31T18:48:50Z",
      "comments": [
        {
          "author": "isislovecruft",
          "authorAssociation": "CONTRIBUTOR",
          "body": "2^16-1 because participant index cannot be zero.",
          "createdAt": "2022-01-28T22:05:22Z",
          "updatedAt": "2022-01-28T22:05:22Z"
        }
      ]
    },
    {
      "number": 57,
      "id": "I_kwDOEpUZs85CoUy0",
      "title": "Use Commitment List Terminology",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/57",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently the spec uses `B` as a variable name for the commitment set for a signing session. Instead, we should use the variable name `commitment_list`.",
      "createdAt": "2022-01-28T21:35:15Z",
      "updatedAt": "2022-01-29T00:57:25Z",
      "closedAt": "2022-01-29T00:57:25Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Or `commitment_list` since we assume it to have a well-defined order based no participant index?",
          "createdAt": "2022-01-28T22:03:03Z",
          "updatedAt": "2022-01-28T22:03:03Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #53.",
          "createdAt": "2022-01-29T00:57:25Z",
          "updatedAt": "2022-01-29T00:57:25Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "I_kwDOEpUZs85CoVYi",
      "title": "Commitment set should be hashed in ascending order of participant id",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/58",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, the commitment set does not specify ordering of elements that are hashed in. Instead, we should hash in commitment elements in ascending order of the participant identifier. ",
      "createdAt": "2022-01-28T21:38:52Z",
      "updatedAt": "2022-01-29T00:58:26Z",
      "closedAt": "2022-01-29T00:57:18Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #53.",
          "createdAt": "2022-01-29T00:57:18Z",
          "updatedAt": "2022-01-29T00:57:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "(This was also a dupe!)",
          "createdAt": "2022-01-29T00:58:26Z",
          "updatedAt": "2022-01-29T00:58:26Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "I_kwDOEpUZs85C-Far",
      "title": "Define alternative signature format with (response, commitment) ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/64",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "RFC8032 requires that the signature format be in the form (response, challenge) but some implementations would like the format to be (response, commitment)  in order to allow for batched signature verification. We should allow for this alternative format in this draft.",
      "createdAt": "2022-02-03T21:26:36Z",
      "updatedAt": "2022-02-09T19:30:00Z",
      "closedAt": "2022-02-09T19:30:00Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this will need to be a ciphersuite-specific detail. How we decide to present that in the draft is not immediately clear to me right now.",
          "createdAt": "2022-02-03T21:27:52Z",
          "updatedAt": "2022-02-03T21:27:52Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Re-reading this, small clarification: RFC8032 signatures are of the form (commitment, response), and this is [what's in the draft now](https://cfrg.github.io/draft-irtf-cfrg-frost/draft-irtf-cfrg-frost.html#name-signature-share-aggregation) (`R` is the group commitment and `z` is the response, to use terminology here). Unless I'm misunderstanding, I think we can close this.",
          "createdAt": "2022-02-06T01:42:48Z",
          "updatedAt": "2022-02-06T01:42:55Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah i think we can close",
          "createdAt": "2022-02-09T19:29:50Z",
          "updatedAt": "2022-02-09T19:29:50Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "I_kwDOEpUZs85DD124",
      "title": "Single-party signature generation and verification, accounting for cofactors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/68",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "isislovecruft"
      ],
      "labels": [
        "next-version"
      ],
      "body": "The [current verification](https://cfrg.github.io/draft-irtf-cfrg-frost/draft-irtf-cfrg-frost.html#name-schnorr-signature-operation) routine diverges from RFC8032. In particular, it does this:\r\n\r\n~~~\r\ndef schnorr_signature_verify(msg, sig = (R, z), PK):\r\n    msg_hash = H3(msg)\r\n    comm_enc = G.SerializeElement(R)\r\n    pk_enc = G.SerializeElement(PK)\r\n    challenge_input = group_comm_enc || group_public_key_enc || msg_hash\r\n    c = H2(challenge_input)\r\n\r\n    l = ScalarBaseMult(z)\r\n    r = R + (c * PK)\r\n    if l == r:\r\n      return 1\r\n    return 0\r\n~~~\r\n\r\nWhen it should do something like this (partially modified from [ed25519-zebra's ZIP15-based verification check](https://github.com/ZcashFoundation/ed25519-zebra/blob/main/src/verification_key.rs)):\r\n\r\n~~~\r\ndef schnorr_signature_verify(msg, sig = (R, z), PK):\r\n    msg_hash = H3(msg)\r\n    comm_enc = G.SerializeElement(R)\r\n    pk_enc = G.SerializeElement(PK)\r\n    challenge_input = group_comm_enc || group_public_key_enc || msg_hash\r\n    c = H2(challenge_input)\r\n\r\n    # Check that [8][Z]B = [8]R + [8][c]PK:\r\n    # <=> 0 == [8](R - ([z]B - [c]PK))\r\n    # <=> 0 == [8](R - R'), where R' = [z]B - [c]PK\r\n    \r\n    Z = ScalarBaseMult(z)\r\n    Rp = c * PK\r\n    D = 8 * (R - Rp)\r\n    return D == Identity()\r\n~~~\r\n\r\nThis is specific to RFC8032 and Ed25519, where the cofactor of the curve is 8, so we probably need to write this in terms of a more general cofactor `h`. This probably relates to #12, so cc @dconnolly for a sanity check. =)",
      "createdAt": "2022-02-06T01:53:30Z",
      "updatedAt": "2022-03-28T17:18:14Z",
      "closedAt": "2022-03-28T17:18:14Z",
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes the 8 is because the Edwards curve has that cofactor. In the p256 and Ristretto cases, that h = 1. One way to handle this is to make the h explicit in our formulas and explicit in the ciphersuites, so h = 1, or h = 8, or whatever. ",
          "createdAt": "2022-02-09T19:29:00Z",
          "updatedAt": "2022-02-09T19:29:00Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Relatedly : https://github.com/cfrg/draft-irtf-cfrg-frost/issues/12",
          "createdAt": "2022-02-09T19:59:35Z",
          "updatedAt": "2022-02-09T19:59:35Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "```\r\ndef schnorr_signature_verify(msg, sig = (R, z), PK):\r\n    comm_enc = G.SerializeElement(R)\r\n    pk_enc = G.SerializeElement(PK)\r\n    challenge_input = comm_enc || pk_enc || msg\r\n    c = H2(challenge_input)\r\n\r\n    Z = ScalarBaseMult(z)\r\n    Rp = c * PK\r\n    check = h * (Z - Rp - R)\r\n    return check == G.Identity()\r\n ```",
          "createdAt": "2022-02-28T19:47:34Z",
          "updatedAt": "2022-02-28T19:47:34Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Notes: \r\n- Right now we don't have verification algorithms defined externally for P-256 and Ristretto (either for plain Schnorr or EdDSA) \r\n- We should define verification algorithms for these two, but others we should reference existing standards. ",
          "createdAt": "2022-02-28T20:00:55Z",
          "updatedAt": "2022-02-28T20:13:31Z"
        }
      ]
    },
    {
      "number": 69,
      "id": "I_kwDOEpUZs85DD16k",
      "title": "Add secp256k1 ciphersuite and test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/69",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "isislovecruft",
        "chris-wood"
      ],
      "labels": [
        "enhancement"
      ],
      "body": "The adoption call for this draft indicated that we'd need to support specializations for all RFC8032 signatures, including Ed25519 and Ed448. This should be a trivial extension now that we have the ed25519 suite. ",
      "createdAt": "2022-02-06T01:55:19Z",
      "updatedAt": "2022-08-02T19:54:50Z",
      "closedAt": "2022-08-02T19:54:50Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Also, maybe we need to add ciphersuites for other curves that are used for Schnorr signatures? I _think_ this would include, e.g., secp256k1?",
          "createdAt": "2022-02-06T01:58:30Z",
          "updatedAt": "2022-02-06T01:58:30Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> Also, maybe we need to add ciphersuites for other curves that are used for Schnorr signatures? I _think_ this would include, e.g., secp256k1?\n\nI had vague plans to implement this anyway for our FROST impls but wasn't sure if we had interest in standardizing it. I was under the impression that secp256k1 is usually used in ECDSA, and that standardizing a Schnorr signature using it would be going against the grain (imo in a good direction, but). Are there other Schnorr systems using it out there?",
          "createdAt": "2022-02-09T19:57:44Z",
          "updatedAt": "2022-02-09T19:57:44Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Are there other Schnorr systems using it out there?\r\n\r\nI dunno! That's the question, I guess. We should make sure we show how to implement FROST for all curves that folks care about.",
          "createdAt": "2022-02-09T20:46:26Z",
          "updatedAt": "2022-02-09T20:46:26Z"
        }
      ]
    },
    {
      "number": 70,
      "id": "I_kwDOEpUZs85DD1_q",
      "title": "Signature encoding",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/70",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "The draft doesn't take an opinionated stance on how to encode signatures -- it currently just spits out the commitment and response pair `(R, z)`. On the contrary, RFC8032 signatures are represented as the concatenation of `R` and `z`, both serialized. It seems like the RFC8032 suite ought to produce signatures in this format. But what about other ciphersuites?",
      "createdAt": "2022-02-06T01:57:49Z",
      "updatedAt": "2022-02-19T03:11:33Z",
      "closedAt": "2022-02-19T03:11:33Z",
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "I lean towards this, we have Signature types that are just the bytes of those elements and can easily be serialized to a concatenation",
          "createdAt": "2022-02-09T19:26:00Z",
          "updatedAt": "2022-02-09T19:26:00Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "To clarify, by \"this\" you mean what's currently in the draft?",
          "createdAt": "2022-02-09T20:45:45Z",
          "updatedAt": "2022-02-09T20:45:45Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "per meeting: \r\n\r\n` Serialize: Ciphersuite.SerializeElement(R) || Ciphersuite.SerializeScalar(z)\r\n`",
          "createdAt": "2022-02-14T18:26:30Z",
          "updatedAt": "2022-02-14T18:26:30Z"
        }
      ]
    },
    {
      "number": 72,
      "id": "I_kwDOEpUZs85DN_tU",
      "title": "Add check for valid points",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/72",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "The FROST paper assumes a prime order group. However, when we interoperate with curves that can have  invalid points, we'll need to identify places in the draft where these checks should occur. ",
      "createdAt": "2022-02-08T20:47:44Z",
      "updatedAt": "2022-02-19T03:11:33Z",
      "closedAt": "2022-02-19T03:11:33Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo I think this is already addressed [in this section](https://cfrg.github.io/draft-irtf-cfrg-frost/draft-irtf-cfrg-frost.html#section-6.1.1). Can you please confirm?",
          "createdAt": "2022-02-08T20:55:55Z",
          "updatedAt": "2022-02-08T20:55:55Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Just in case, is there any danger to not checking for valid points when verifying? I think not because it's verification and everything is public but I was working on this  recently and was curious",
          "createdAt": "2022-02-09T19:54:56Z",
          "updatedAt": "2022-02-09T19:54:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Good question. I don't think so? It seems harmless to add a check, just to be safe, but... here be dragons.",
          "createdAt": "2022-02-09T20:48:00Z",
          "updatedAt": "2022-02-09T20:48:00Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks like RFC8032 checks for valid points when verifying, so we should probably as well in the places where we define single-party verification. \r\n\r\nhttps://datatracker.ietf.org/doc/html/rfc8032#section-3.4\r\n\r\nGood catch @dconnolly ! ",
          "createdAt": "2022-02-10T21:35:16Z",
          "updatedAt": "2022-02-10T21:46:26Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo will you have time to prepare a PR for this, or would you like me to do it?",
          "createdAt": "2022-02-10T21:53:44Z",
          "updatedAt": "2022-02-10T21:53:44Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood If you have time to do this, that would be fantastic ",
          "createdAt": "2022-02-10T22:02:02Z",
          "updatedAt": "2022-02-10T22:02:02Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Leaving open as a reminder to ourselves to review this again after the draft is more stable. ",
          "createdAt": "2022-02-14T18:21:20Z",
          "updatedAt": "2022-02-14T18:21:20Z"
        }
      ]
    },
    {
      "number": 82,
      "id": "I_kwDOEpUZs85Dvo1F",
      "title": "Question regarding the concatenation of contextString in POC code",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/82",
      "state": "CLOSED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "Hi, looking at the POC code, I see there is a space between the `contextString` and the `rho`, `chal` and `digest` words\r\n```python\r\ndef H1(self, m):\r\n        hash_input = _as_bytes(\"FROST-RISTRETTO255-SHA512 rho\") + m\r\n...\r\n```\r\nbut in the document there is no space (see `H(contextString || \"rho\" || m)`).\r\n\r\nJust looking for clarification, thanks",
      "createdAt": "2022-02-14T00:19:41Z",
      "updatedAt": "2022-02-15T00:42:54Z",
      "closedAt": "2022-02-15T00:42:54Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's go with no space -- thanks @aldenml!",
          "createdAt": "2022-02-14T18:19:48Z",
          "updatedAt": "2022-02-14T18:19:48Z"
        }
      ]
    },
    {
      "number": 99,
      "id": "I_kwDOEpUZs85E44Xa",
      "title": "Produce test vector json in separate files for each ciphersuite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/99",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "enhancement"
      ],
      "body": "This would make it easier for importing the test vectors for only the ciphersuite(s) you care about into your own code",
      "createdAt": "2022-03-01T20:05:10Z",
      "updatedAt": "2022-03-28T18:36:04Z",
      "closedAt": "2022-03-28T18:36:04Z",
      "comments": []
    },
    {
      "number": 106,
      "id": "I_kwDOEpUZs85FIlnM",
      "title": "trusted_dealer_keygen should output a VSS commitment",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/106",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "We discuss right now that `trusted_dealer_keygen` should output a VSS commitment, but the interface for generating secret shares does not output the coefficients, and so is incompatible with what is needed to generate a commitment. We should change the interface so that it is possible, and then update `trusted_dealer_keygen` to generate and output the VSS commitment. \r\n",
      "createdAt": "2022-03-04T17:24:15Z",
      "updatedAt": "2022-03-28T17:49:07Z",
      "closedAt": "2022-03-28T17:49:07Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "In resolving this change, we must also ensure the pseudocode notation matches that of the reference implementation.",
          "createdAt": "2022-03-16T16:15:54Z",
          "updatedAt": "2022-03-16T16:15:54Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #126",
          "createdAt": "2022-03-28T17:49:07Z",
          "updatedAt": "2022-03-28T17:49:07Z"
        }
      ]
    },
    {
      "number": 108,
      "id": "I_kwDOEpUZs85FMOhA",
      "title": "Simplify commitment list structure",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/108",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "enhancement",
        "editorial"
      ],
      "body": "The data structure we use for the group commitment list is a bit _too_ precise. For example, implementations could choose to do store this in some other way, subject to the same sorted constraint. We should change this so that the data structure contents are clear, but the implementation-specific details are not forced upon users. One way to do that might be to say that the commitment list is a sorted list of objects, where each object has named fields for things like the \"index,\" \"hiding_nonce_commitment,\" and \"binding_nonce_commitment.\" ",
      "createdAt": "2022-03-07T02:47:59Z",
      "updatedAt": "2022-05-26T17:20:14Z",
      "closedAt": "2022-05-26T17:20:14Z",
      "comments": []
    },
    {
      "number": 110,
      "id": "I_kwDOEpUZs85FQx2e",
      "title": "secret_share_shard should allow both the input secret and coefficients to be zero",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/110",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "Currently, `secret_share_shard` requires that coefficients be non-zero, as they are sampled using `RandomScalar`. Further, `DeserializeElement` requires non-identity elements. However, both the secret `s` in `secret_share_shard` should be allowed to be zero, as well as each additional coefficient that is sampled at random. This is to ensure the largest possible search space for an adversary.\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#shamir-secret-sharing-dep-shamir",
      "createdAt": "2022-03-07T23:05:41Z",
      "updatedAt": "2022-03-28T18:21:14Z",
      "closedAt": "2022-03-28T18:21:14Z",
      "comments": []
    },
    {
      "number": 111,
      "id": "I_kwDOEpUZs85FU5ES",
      "title": "Highlight that single-round FROST is out of scope for the draft",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/111",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "The draft is clearly two-round, but we do not mention that FROST has a single-round variant. We should add 1-2 sentences saying what the single-round variant is, and that it is out of scope for this document. \r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#two-round-frost-frost-spec",
      "createdAt": "2022-03-08T20:48:38Z",
      "updatedAt": "2022-03-21T23:31:28Z",
      "closedAt": "2022-03-21T23:31:28Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #123",
          "createdAt": "2022-03-21T23:31:28Z",
          "updatedAt": "2022-03-21T23:31:28Z"
        }
      ]
    },
    {
      "number": 112,
      "id": "I_kwDOEpUZs85FU6F0",
      "title": "Clarify that group info is public",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/112",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "We have a diagram that shows the protocol flow that shows that group info is an input to the coordinator and to each signer. We should clarify that all elements in group info are strictly public values.",
      "createdAt": "2022-03-08T20:53:45Z",
      "updatedAt": "2022-03-21T23:00:17Z",
      "closedAt": "2022-03-21T23:00:17Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #121 ",
          "createdAt": "2022-03-21T23:00:17Z",
          "updatedAt": "2022-03-21T23:00:17Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "I_kwDOEpUZs85FVLgv",
      "title": "Inconsistent notation for group public key",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/114",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "In the section on Two-Round FROST, we discuss the group's public key `PK`, but in `trusted_dealer_keygen` we use the notation `public_key`. We should also specify in the Two-Round FROST section that `PK` is an output from the key generation protocol, since participants cannot derive it directly themselves. ",
      "createdAt": "2022-03-08T21:54:16Z",
      "updatedAt": "2022-03-15T19:59:54Z",
      "closedAt": "2022-03-15T19:59:53Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #120 ",
          "createdAt": "2022-03-15T19:59:53Z",
          "updatedAt": "2022-03-15T19:59:53Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "I_kwDOEpUZs85FVMXD",
      "title": "Group info additionally requires each signer's individual public key",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/115",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "Right now, we describe the coordinator and each participant as having the same `group info`. However, in order for the coordinator to perform `verify_signature_share`, the coordinator additionally requires each participant's public key. \r\n\r\nWe can have those values be within `group_info`, to make notation easy, and to not exclude the setting where a coordinator is not used. \r\n\r\nWe also need `trusted_dealer_keygen` to output these individual public keys, or to derive a function so that the coordinator and/or participants can derive these values themselves (it is possible to do so using only the VSS commitment). ",
      "createdAt": "2022-03-08T21:58:39Z",
      "updatedAt": "2022-03-21T23:00:00Z",
      "closedAt": "2022-03-21T22:59:59Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #121",
          "createdAt": "2022-03-21T22:59:59Z",
          "updatedAt": "2022-03-21T22:59:59Z"
        }
      ]
    },
    {
      "number": 117,
      "id": "I_kwDOEpUZs85Fq-Mk",
      "title": "Fix overly broad text",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/117",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "Unrelated to this PR, but this sentence in general is even a bit broad - deriving nonces deterministically is insecure for FROST, but not necessarily for any multi-party signature scheme.\r\n\r\n_Originally posted by @chelseakomlo in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/116#discussion_r826276585_",
      "createdAt": "2022-03-14T20:54:06Z",
      "updatedAt": "2022-03-15T19:47:34Z",
      "closedAt": "2022-03-15T19:47:33Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #119 ",
          "createdAt": "2022-03-15T19:47:33Z",
          "updatedAt": "2022-03-15T19:47:33Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "I_kwDOEpUZs85GLBJj",
      "title": "Define how participants derive each other's public keys",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/125",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "Currently in `trusted_dealer_keygen` and `vss_commit`, it is shown that the VSS commitment and public key are outputs, but we do not define how participants derive all other participant's public keys from these values. ",
      "createdAt": "2022-03-22T20:53:03Z",
      "updatedAt": "2022-03-29T15:24:11Z",
      "closedAt": "2022-03-29T15:24:10Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm... why does each participant need the participant of other parties?",
          "createdAt": "2022-03-28T16:40:55Z",
          "updatedAt": "2022-03-28T16:40:55Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "We currently have the same \"group info\" as input to both the coordinator and each participant, and this group info contains the public keys for both the group and each participant. ",
          "createdAt": "2022-03-28T17:05:12Z",
          "updatedAt": "2022-03-28T17:05:12Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #132 ",
          "createdAt": "2022-03-29T15:24:10Z",
          "updatedAt": "2022-03-29T15:24:10Z"
        }
      ]
    },
    {
      "number": 131,
      "id": "I_kwDOEpUZs85Gjoqo",
      "title": "Update POC to include the cofactor schnorr checks",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/131",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "bug"
      ],
      "body": "",
      "createdAt": "2022-03-28T17:18:40Z",
      "updatedAt": "2022-06-20T13:24:19Z",
      "closedAt": "2022-06-20T13:24:19Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Suggest closing without fix.",
          "createdAt": "2022-05-27T12:09:55Z",
          "updatedAt": "2022-05-27T12:09:55Z"
        }
      ]
    },
    {
      "number": 141,
      "id": "I_kwDOEpUZs85H9EWc",
      "title": "`order()` must return a type that can hold `p`, the `Scalar` type goes to p-1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/141",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-04-18T16:02:43Z",
      "updatedAt": "2022-05-13T23:55:45Z",
      "closedAt": "2022-05-13T23:55:45Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems to be an implementation issue, so I recommend we close without change.",
          "createdAt": "2022-04-19T20:51:48Z",
          "updatedAt": "2022-04-19T20:51:48Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed, closing (@dconnolly please re-open with a comment/suggestion if you disagree)",
          "createdAt": "2022-05-13T23:55:45Z",
          "updatedAt": "2022-05-13T23:55:45Z"
        }
      ]
    },
    {
      "number": 142,
      "id": "I_kwDOEpUZs85H9G0Y",
      "title": "Change \"participant index\" terminology to \"participant identifier\" or \"participant id\"",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/142",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "The difference between an index in a list and a participant index can get confusing, so let's just use \"identifier\" terminology.",
      "createdAt": "2022-04-18T16:13:36Z",
      "updatedAt": "2022-05-17T14:54:46Z",
      "closedAt": "2022-05-17T14:54:45Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Good point! \"identifier\" does seem better than \"index\" for that reason.",
          "createdAt": "2022-04-19T20:51:23Z",
          "updatedAt": "2022-04-19T20:51:23Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #167\r\n",
          "createdAt": "2022-05-17T14:54:45Z",
          "updatedAt": "2022-05-17T14:54:45Z"
        }
      ]
    },
    {
      "number": 144,
      "id": "I_kwDOEpUZs85H9Qvn",
      "title": "Specify that NUM_SIGNERS and THRESHOLD_LIMIT must be in GF(p)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/144",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-04-18T17:03:08Z",
      "updatedAt": "2022-05-13T23:54:03Z",
      "closedAt": "2022-05-13T23:54:02Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #165 ",
          "createdAt": "2022-05-13T23:54:02Z",
          "updatedAt": "2022-05-13T23:54:02Z"
        }
      ]
    },
    {
      "number": 151,
      "id": "I_kwDOEpUZs85IHPv2",
      "title": "Specify all group member functions in the ciphersuite section",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/151",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "We define serialization things, but not the rest (like Order(), Identity(), etc).",
      "createdAt": "2022-04-20T15:34:44Z",
      "updatedAt": "2022-05-26T17:20:14Z",
      "closedAt": "2022-05-26T17:20:14Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #162",
          "createdAt": "2022-05-09T17:14:51Z",
          "updatedAt": "2022-05-09T17:14:51Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo I don't think #162 resolves this issue. In particular, this issue was meant to describe how each of the member functions of G should be implemented for the group in the ciphersuite. In particular, Order and Identity are absent from the group description of each ciphersuite.",
          "createdAt": "2022-05-09T18:00:53Z",
          "updatedAt": "2022-05-09T18:00:53Z"
        }
      ]
    },
    {
      "number": 152,
      "id": "I_kwDOEpUZs85IHRkm",
      "title": "Use non-contiguous indexes for participants in test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/152",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "So use \"1,3\" instead of \"1,2,\" for example.",
      "createdAt": "2022-04-20T15:40:26Z",
      "updatedAt": "2022-05-26T17:20:14Z",
      "closedAt": "2022-05-26T17:20:14Z",
      "comments": []
    },
    {
      "number": 155,
      "id": "I_kwDOEpUZs85IgWGx",
      "title": "Clarify member functions on G",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/155",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "This is a reminder to add a a couple words saying that G in the draft is not the a mathematical type but a data type with associated functions. ",
      "createdAt": "2022-04-26T20:24:27Z",
      "updatedAt": "2022-05-03T17:56:23Z",
      "closedAt": "2022-05-03T17:56:23Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #162",
          "createdAt": "2022-05-03T17:56:23Z",
          "updatedAt": "2022-05-03T17:56:23Z"
        }
      ]
    },
    {
      "number": 157,
      "id": "I_kwDOEpUZs85IhU6j",
      "title": "Note TLS syntax origin",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/157",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Citing RFC8446.",
      "createdAt": "2022-04-27T02:26:37Z",
      "updatedAt": "2022-05-21T22:06:10Z",
      "closedAt": "2022-05-21T22:06:10Z",
      "comments": []
    },
    {
      "number": 159,
      "id": "I_kwDOEpUZs85IlQfE",
      "title": "Additional clarification on trusted dealer threat model",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/159",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The dealer is trusted to:\r\n1. Generate good randomness\r\n2. Delete secret values after distributing shares\r\n\r\nWe should specify these criteria when discussing trusted dealer key generation. ",
      "createdAt": "2022-04-27T18:22:17Z",
      "updatedAt": "2022-05-09T21:02:08Z",
      "closedAt": "2022-05-09T21:02:07Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #166",
          "createdAt": "2022-05-09T21:02:07Z",
          "updatedAt": "2022-05-09T21:02:07Z"
        }
      ]
    },
    {
      "number": 160,
      "id": "I_kwDOEpUZs85IlTVa",
      "title": "Clarify subgroup check in deserialization ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/160",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "We should make it clearer that deserialization also involves checking that the element is within the proper subgroup for non-prime order groups, and that it is assumed this check is performed before calling `sign` or `verify`",
      "createdAt": "2022-04-27T18:33:58Z",
      "updatedAt": "2022-05-27T16:02:21Z",
      "closedAt": "2022-05-27T16:02:21Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly @chelseakomlo any updates on this?",
          "createdAt": "2022-05-25T11:18:33Z",
          "updatedAt": "2022-05-25T11:18:33Z"
        }
      ]
    },
    {
      "number": 161,
      "id": "I_kwDOEpUZs85I6QrN",
      "title": "Make nonce generation a function of randomness in the first round",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/161",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "documentation",
        "editorial",
        "interop"
      ],
      "body": "So that function is deterministic, parameterized by randomness\r\n\r\nThis is out of feedback from Ian Goldberg and nicely allows different means of generating nonces (like H(random || secret_share || \"contextString\") per recommendation by @FiloSottile as a lesson learned from ECDSA implementations",
      "createdAt": "2022-05-02T18:58:58Z",
      "updatedAt": "2022-05-27T16:44:36Z",
      "closedAt": "2022-05-27T16:44:36Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #182",
          "createdAt": "2022-05-27T16:44:36Z",
          "updatedAt": "2022-05-27T16:44:36Z"
        }
      ]
    },
    {
      "number": 164,
      "id": "I_kwDOEpUZs85JQRN8",
      "title": "`trusted_dealer_keygen` should also return the PK, group public verification key",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/164",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "enhancement"
      ],
      "body": "",
      "createdAt": "2022-05-08T22:17:59Z",
      "updatedAt": "2022-09-23T14:29:19Z",
      "closedAt": "2022-09-23T14:29:19Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "This value is the first element in the VSS commitment- do you think having it also output as a separate variable would be clearer? ",
          "createdAt": "2022-05-09T17:11:13Z",
          "updatedAt": "2022-05-09T17:11:13Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> This value is the first element in the VSS commitment- do you think having it also output as a separate variable would be clearer?\r\n\r\nAs the function is currently written, it produces PK and then never returns it, strictly from the secret_key, with no obvious relation to the VSS commitment / coefficients; either we should remove that line, and/or explictly say that vss_commitment[0] is the PK/group verifying key",
          "createdAt": "2022-05-09T22:30:28Z",
          "updatedAt": "2022-05-09T22:30:28Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> \r\n\r\nI would explicitly return it but as:\r\n\r\n```\r\nOutputs:\r\n  - signer_private_keys\r\n  - group public key\r\n  - vss_commitment\r\n\r\n...\r\n\r\n    return signer_private_keys, vss_commitment[0], vss_commitment\r\n```\r\n\r\nOr something like that. Internally, group_public_key == vss_commitment[0], but we should make it easy to just spit it out and not require meddling in the guts of the vss commitment 'type'",
          "createdAt": "2022-05-09T22:33:52Z",
          "updatedAt": "2022-05-09T22:33:52Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly can you still address this issue? If not, let's just close it out.",
          "createdAt": "2022-08-06T22:03:43Z",
          "updatedAt": "2022-08-06T22:03:43Z"
        }
      ]
    },
    {
      "number": 173,
      "id": "I_kwDOEpUZs85JxvWq",
      "title": "Nice to have: deterministic secret_share_shard ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/173",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "enhancement"
      ],
      "body": "This is a nice to have and not a blocker, but `secret_share_shard` in the appendix could be made deterministic, to allow for ease of testing. ",
      "createdAt": "2022-05-16T21:59:43Z",
      "updatedAt": "2022-09-27T11:51:52Z",
      "closedAt": "2022-09-27T11:51:52Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "+1 -- every function that generates randomness internally should probably be retrofitted to take randomness as an explicit parameter so we can produce test vectors as needed.",
          "createdAt": "2022-05-16T23:41:44Z",
          "updatedAt": "2022-05-16T23:41:44Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Could we have the vectors defined as using a stream cipher per-signer to generate random bytes?\r\n\r\n> random_bytes(n): Outputs n bytes, sampled uniformly at random using a cryptographically secure pseudorandom number generator (CSPRNG).\r\n\r\n> This section contains test vectors for all ciphersuites listed in {{ciphersuites}}. All Element and Scalar values are represented in serialized form and encoded in hexadecimal strings. Signatures are represented as the concatenation of their constituent parts. The input message to be signed is also encoded as a hexadecimal string.\r\n> \r\n> random_bytes is defined as the output of the Chacha20 stream cipher, instantiated per signer, with a seed of H(\"vectors\" || encode_uint16(signer)).\r\n\r\nThis means we don't have to take in randomness in each of the spec's functions and would minimize testing against the vectors to just the signatures they end up producing.",
          "createdAt": "2022-07-14T21:11:24Z",
          "updatedAt": "2022-07-14T21:12:04Z"
        }
      ]
    },
    {
      "number": 180,
      "id": "I_kwDOEpUZs85J33Ao",
      "title": "Add reasoning for why coordinator must abort if validation fails. ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/180",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In the spec, we say \"If validation fails, the Coordinator MUST abort the protocol.\"\r\n\r\nWe should add more reasoning as to why this is a MUST. See https://mailarchive.ietf.org/arch/msg/cfrg/qkz1DlchicPs6z64xtT7lgxkVqI/",
      "createdAt": "2022-05-18T03:23:50Z",
      "updatedAt": "2022-05-21T00:36:40Z",
      "closedAt": "2022-05-21T00:36:40Z",
      "comments": []
    },
    {
      "number": 185,
      "id": "I_kwDOEpUZs85KPM6l",
      "title": "Add `RandomBytes` which is scalar-field-size bytes, call from `nonce_generate()`",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/185",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "documentation",
        "editorial"
      ],
      "body": "",
      "createdAt": "2022-05-23T17:35:10Z",
      "updatedAt": "2022-05-27T11:29:55Z",
      "closedAt": "2022-05-27T11:29:55Z",
      "comments": []
    },
    {
      "number": 188,
      "id": "I_kwDOEpUZs85KYi5b",
      "title": "Include version string in test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/188",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "... to ensure non-interoperability across versions.",
      "createdAt": "2022-05-25T11:21:00Z",
      "updatedAt": "2022-05-31T18:09:48Z",
      "closedAt": "2022-05-31T18:09:48Z",
      "comments": []
    },
    {
      "number": 189,
      "id": "I_kwDOEpUZs85KeLdz",
      "title": "Rename THRESHOLD_LIMIT to MIN_SIGNERS",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/189",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Then we'd have MIN_SIGNERS and MAX_SIGNERS as bounds on the threshold scheme, and NUM_SIGNERS as a value within these bounds. THRESHOLD_LIMIT and MAX_SIGNERS together is just unnecessarily confusing, I think.",
      "createdAt": "2022-05-26T11:04:21Z",
      "updatedAt": "2022-05-27T13:54:10Z",
      "closedAt": "2022-05-27T13:54:10Z",
      "comments": []
    },
    {
      "number": 190,
      "id": "I_kwDOEpUZs85KfzMA",
      "title": "Define subtraction of elements and scalar multiplication",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/190",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Define how one element is subtracted from another\r\n- Define Element * Scalar (as opposed to Scalar * Element)",
      "createdAt": "2022-05-26T17:30:20Z",
      "updatedAt": "2022-05-27T16:02:21Z",
      "closedAt": "2022-05-27T16:02:21Z",
      "comments": []
    },
    {
      "number": 191,
      "id": "I_kwDOEpUZs85Kfz3-",
      "title": "Discuss coordinator in introduction",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/191",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We don't define the coordinator until very late in the document; we should introduce the role in the introduction.",
      "createdAt": "2022-05-26T17:32:20Z",
      "updatedAt": "2022-05-27T16:02:20Z",
      "closedAt": "2022-05-27T16:02:20Z",
      "comments": []
    },
    {
      "number": 194,
      "id": "I_kwDOEpUZs85KjH2a",
      "title": "Don't require the coordinator to be a signer.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/194",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We say \"The coordinator is a distinguished signer with the following responsibilities\" but there is no reason that the coordinator has to be a signer. For example, it could just be a server that communicates with signers (such as HSMs). ",
      "createdAt": "2022-05-27T12:38:32Z",
      "updatedAt": "2022-07-07T20:57:23Z",
      "closedAt": "2022-07-07T20:57:23Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been addressed.",
          "createdAt": "2022-07-07T20:57:23Z",
          "updatedAt": "2022-07-07T20:57:23Z"
        }
      ]
    },
    {
      "number": 195,
      "id": "I_kwDOEpUZs85KjMbj",
      "title": "Show that state is maintained between rounds",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/195",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently in our diagram for FROST, it looks like it is a stateless protocol, when instead, we could show that state created in round one is maintained until round two.",
      "createdAt": "2022-05-27T12:58:17Z",
      "updatedAt": "2022-08-02T01:36:15Z",
      "closedAt": "2022-08-02T01:36:15Z",
      "comments": []
    },
    {
      "number": 196,
      "id": "I_kwDOEpUZs85KjQ97",
      "title": "Delete nonces after generating signature share",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/196",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We can be clearer exactly when nonces are deleted- in fact, they can be deleted immediately after generating the signature share.",
      "createdAt": "2022-05-27T13:17:01Z",
      "updatedAt": "2022-07-07T20:56:52Z",
      "closedAt": "2022-07-07T20:56:52Z",
      "comments": []
    },
    {
      "number": 197,
      "id": "I_kwDOEpUZs85KjXo-",
      "title": "Pseudocode notation description",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/197",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We should have description for pseudocode notation such as:\r\n- i^j\r\n- vss_commitment_j",
      "createdAt": "2022-05-27T13:43:27Z",
      "updatedAt": "2022-08-01T16:03:51Z",
      "closedAt": "2022-08-01T16:03:51Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We fixed i^j (we now have a `pow` function), and we now index into `vss_commitment` using array-based notation (vss_commitment[j]). Closing.",
          "createdAt": "2022-08-01T16:03:51Z",
          "updatedAt": "2022-08-01T16:03:51Z"
        }
      ]
    },
    {
      "number": 201,
      "id": "I_kwDOEpUZs85KmouL",
      "title": "Nice to have: ScalarMult member function",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/201",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See #199 for discussion- it would be nice to have a `G.ScalarMult` function to make this operation clearer.",
      "createdAt": "2022-05-28T14:11:59Z",
      "updatedAt": "2022-08-19T17:14:46Z",
      "closedAt": "2022-08-19T17:14:46Z",
      "comments": []
    },
    {
      "number": 204,
      "id": "I_kwDOEpUZs85LE4IT",
      "title": "Sage and draft conflict for Ed25519 hash function definitions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/204",
      "state": "CLOSED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "interop",
        "discuss",
        "next-version"
      ],
      "body": "Sage implements wide reduction: https://github.com/cfrg/draft-irtf-cfrg-frost/blob/6590e8e30455bfa485733d77bcdd0166825bc4d7/poc/hash.sage#L37-L51\r\n\r\nThe draft specifies just the lower 32 bytes are supposed to be reduced, not the full hash: https://github.com/cfrg/draft-irtf-cfrg-frost/blob/6590e8e30455bfa485733d77bcdd0166825bc4d7/draft-irtf-cfrg-frost.md?plain=1#L875-L885\r\n\r\nWhile I personally prefer wide reduction, I can't comment on which should be used in an IETF draft. It should be noted the provided vectors are incompatible with the spec as-is though (which I found when working on a implementation attempting to be compliant).",
      "createdAt": "2022-06-03T07:46:27Z",
      "updatedAt": "2022-06-20T17:59:17Z",
      "closedAt": "2022-06-20T17:58:24Z",
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So I've been reading through the meta on this topic. Between:\r\n\r\n- https://datatracker.ietf.org/doc/html/rfc8032#section-5.1.6 Step 4 saying to interpret the 64-octet digest as an integer.\r\n- \"Further, this draft specifies signatures that are compatible with RFC8032.\"\r\n- Emails from the archived list\r\n- Recommendation for usage of this ciphersuite for RFC8032\r\n- Python 8032 implementation interpreting H(m) as little-endian, not just the lower 32 bytes\r\n- Sage...\r\n\r\nIt seems H2 is required to be as such. Regarding H1 and H4, technically those are flexible, yet I don't see why those wouldn't follow suit. The only argument I've seen against wide reduction is it not being implemented, with other constructions being simpler to workaround. Since the necessary modification to H2 will require implementations support wide reduction, modifying H1 and H4 should be solely beneficial (though potentially not in any notable way due to Ed25519's naturally low scalar modulus, which I'm unfortunately not skilled enough to comment on further).\r\n\r\nI don't want to be too proactive, and rush forward a PR for an issue I created on a group discussion for a formal specification and reference, yet given the above, I do believe it'd be helpful to offer a PR. If I am rushing into things, please just tell me, and I'm happy to bow out while this is resolved.",
          "createdAt": "2022-06-03T09:30:39Z",
          "updatedAt": "2022-06-03T09:30:39Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "Not using a wide reduction also introduces a noticeable bias in the output, doesn't it? (Not sure what are the implications...)",
          "createdAt": "2022-06-13T18:57:53Z",
          "updatedAt": "2022-06-13T18:57:53Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@kayabaNerve can we close this now that #205 landed?",
          "createdAt": "2022-06-20T13:24:02Z",
          "updatedAt": "2022-06-20T13:24:02Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't see why not. I just didn't dare close it on my own in case the policy was wait until a release was issued with the bug fix :p",
          "createdAt": "2022-06-20T17:58:24Z",
          "updatedAt": "2022-06-20T17:58:24Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The policy is basically \"close once the fix lands in `main` (or `master`)\" =) Thanks!",
          "createdAt": "2022-06-20T17:59:17Z",
          "updatedAt": "2022-06-20T17:59:17Z"
        }
      ]
    },
    {
      "number": 213,
      "id": "I_kwDOEpUZs85NXqR-",
      "title": "Specify signature `verify()` subroutine (or point to one) for each ciphersuite isntead",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/213",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "Explicitly point to RFC-8032 verification for Ed25519, for those that don't have their own verification defined elsewhere, we inline it.\r\n\r\nWe can explicitly _recommend_, even if we cannot _enforce_, that the Ed25519 verification use the cofactor formula, and list the reasons like security, consensus verification, and batch verification consistency with singleton verification, as motivations why.\r\n\r\n",
      "createdAt": "2022-07-07T20:21:42Z",
      "updatedAt": "2022-07-11T18:48:14Z",
      "closedAt": "2022-07-11T18:48:14Z",
      "comments": []
    },
    {
      "number": 214,
      "id": "I_kwDOEpUZs85NX0Df",
      "title": "Use per-signer rhos instead of per-group rho",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/214",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "FROST1 here we come!",
      "createdAt": "2022-07-07T20:55:19Z",
      "updatedAt": "2022-07-12T20:25:38Z",
      "closedAt": "2022-07-11T18:15:53Z",
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is there an explanation for this available? I thought this was dropped as unnecessary, and would like to personally note this would be unappreciated from an implementation standpoint.\r\n\r\nTo elaborate on the implementation considerations, the original definition from the paper has a conflict with continuous transcripts  in that they force a divergence in challenge generation. It'd require cloning multiple hash contexts before proceeding with one (or none). Ideally, transcripts would be linear machines which fully acknowledge all messages/challenges. This prevents duplicate messages from generating the same transcript. While yes, the message in this case is a unique ID, the interoperability of FROST in larger protocols declines when it can't follow this best practice.\r\n\r\nWhile there would be per-signer rho constructions which are compatible with such ideals, i.e. ones which append the `l` in question (instead of setting), hash commitments and message before re-hashing with the per-signer index, or an exponential rho per-signer (removing hashing entirely, post the initial), I don't dare suggest they're in-scope for consideration under this IETF draft (beyond `H(H({(i, D, E)}, m), l)`, which is decently minimal yet still suboptimal). I do question why per-signer rhos are being reconsidered though.\r\n\r\nRegardless, if this satisfies security concerns, I'll bow out accordingly. I just wanted to try to understand what's going on.\r\n\r\nAnd sorry for the ELI5 on transcript theory to someone who obviously doesn't need it :p Just wanted to lay out my thoughts as a whole on the matter. Also demonstrates my practical understanding here, yet always eager to pick up a bit more formal knowledge as I can :)",
          "createdAt": "2022-07-08T01:49:19Z",
          "updatedAt": "2022-07-08T01:54:02Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The motivation for this change is due to [this paper](https://eprint.iacr.org/2022/833.pdf). Handwaving over details, the optimized version we have in the draft now allows an attacker to manipulate the signing protocol such that the signers that _started_ the signing process in round 1 are not the same signers that _finished_ the process and produced the signature. One might argue that this isn't a problem in practice because the threshold requirement was not violated (`t` signers contributed, just not the `t` signers you wanted). However, this malleability is concerning, so we're going to revert the optimization for now and then solicit more feedback on this tradeoff. ",
          "createdAt": "2022-07-08T14:37:25Z",
          "updatedAt": "2022-07-08T14:37:25Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @kayabaNerve for that context. Indeed, it would be helpful to have feedback on whether performance/linearity is the most important factor here, or if ensuring the signing set that was chosen is in fact the same signing set that produced a signature. Figure 12 in 2022/833 demonstrates the malleability attack that @chris-wood alluded to for the optimized FROST variant (FROST2), which the original FROST (FROST1) protects against.",
          "createdAt": "2022-07-08T14:47:39Z",
          "updatedAt": "2022-07-08T14:49:10Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Got it. I'm happy to agree with security improvements (including malleability, which is something I personally despise). I'll try to read through the paper in a bit. Thanks for linking it :D\r\n\r\nRegarding actual implementation, `H(B, m, l)` remains simplest, yet `H(B, m, l_0, l_1...)` offers the appreciated linearity. `H(H(B, m), l)`, defining a sub-transcript, enables a linear global transcript by forking off the individual ones, yet seems unnecessary regarding IETF drafts. While I do believe in ensuring IETF compliance in apps, even when the larger protocol evolves, there are still work-arounds regarding `H(B, m, l)`, which is my recommendation. \r\n\r\nAlso, to be clear, my main frustration wasn't regarding the hash clones, which alone happen regardless, yet the ambiguity around transcript continuation for protocols expecting transcripts to have a higher level of guarantees. I believe the solution there is simply to transcript `B, m`, do the `rho`s, and then where FROST discards a larger protocol can append `b\"FROST_rho\"`. As a byte string exceeding two bytes, it removes any potential of conflict and maintains IETF compatibility, while guaranteeing transcript behavior (not that I'm suggesting it for inclusion in the IETF standard, just noting possibilities for safe usage as a component).",
          "createdAt": "2022-07-08T17:40:22Z",
          "updatedAt": "2022-07-08T17:41:11Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@kayabaNerve I'm not sure I understand your concern here. The transcript for computing rho is something signers must agree on, but isn't something that any higher level protocol built on FROST would use (or extend). Am I missing something? Do you have a specific use case in mind? (Also, separately, I'm not following your `H(B, m, l)` notation here. What are `B` and `l`?)",
          "createdAt": "2022-07-11T12:39:46Z",
          "updatedAt": "2022-07-11T12:39:46Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, that was the notation from the paper. It used B for the serialized commitments and l for the signer index.\r\n\r\nRegarding the transcript, I currently have a setup extending FROST for usage in ring signatures. This means the signature as a whole has much more data which must be included as part of the binding factor, as it's not part of the message. It *needs* to have an extended transcript format accordingly.\r\n\r\nI also have another design which preps a transcript as such, does one FROST signature, and then the next in a series. Accordingly, the transcript used for `rho` is largely preferred to be sequentially continued to guarantee a lack of conflict with any future challenges. While the next FROST round re-appends commitments/message, preventing FROST from triggering these conflicts, it's commentary on component safety whose security isn't reliant on external factors, without edge cases.\r\n\r\nRegardless, I already commented above on successfully managing this, and am happy to withdraw my commentary on FROST's safety as a component for the IETF spec, which considers it an independent piece.",
          "createdAt": "2022-07-11T15:43:22Z",
          "updatedAt": "2022-07-11T15:43:22Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Regarding the transcript, I currently have a setup extending FROST for usage in ring signatures. This means the signature as a whole has much more data which must be included as part of the binding factor, as it's not part of the message. It needs to have an extended transcript format accordingly.\r\n\r\nThis isn't a use case that's been considered yet, but it seems valid at face value. Can you point to an implementation or any documentation?\r\n\r\n> Regardless, I already commented above on successfully managing this, and am happy to withdraw my commentary on FROST's safety as a component for the IETF spec, which considers it an independent piece.\r\n\r\nThis seems like a pretty unfair characterization of what's happening here. Safety is definitely _not_ something independent of the specification of FROST, or any IETF/IRTF work for that matter. \r\n\r\nWhat specifically about the existing proposal is unsafe, and why?",
          "createdAt": "2022-07-11T15:52:15Z",
          "updatedAt": "2022-07-11T15:52:15Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/serai-dex/serai/blob/develop/coins/monero/src/ringct/clsag/multisig.rs for a reference, which I'm happy to share. The modular-frost library also defines/handles the Algorithm trait/handling as a whole.\r\n\r\nSorry. I definitely didn't mean to be unfair. My comment was that the IETF specification had this scheme available, which is the most efficient and more direct scheme, and I support it accordingly. It doesn't play well with certain extended schemes, who I'd argue the security of is their own responsibility. With a forked transcript, if the original transcript is the one continued with, requesting a challenge yet again may return a previously used challenge (where the previously used challenge would've been the binding factor). It's a minor nitpick, especially since a binding factor reused as a challenge doesn't break security necessarily.\r\n\r\nWhile I do believe FROST should play nice where possible, which is why I made my comments on the implications of this, as I did believe they'd be listened to and feel like they were (truly not trying to be unfair), all of the schemes I suggested above have drawbacks. Accordingly, I noted a practical comment for implementations supporting long-lived transcripts, moving the responsibility to their realm, which solves this 'issue' without cluttering or degrading the specification.\r\n\r\nI solely meant to acknowledge I considered this settled, and should've clarified \"theoretical minor reduction with a complete lack of noted practical effect on out of scope usage in safety\" :p I didn't drop this because I believe FROST, or its contributors, is/are being insecure. I dropped it because this isn't a security I'd like to advocate to make in scope, largely given its triviality.",
          "createdAt": "2022-07-11T16:07:30Z",
          "updatedAt": "2022-07-11T16:07:30Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@kayabaNerve shall we open a separate issue to track transcript construction and its implications for protocols that embed FROST?",
          "createdAt": "2022-07-12T13:35:29Z",
          "updatedAt": "2022-07-12T13:35:29Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think it's necessary :) But thanks for being willing to reach out like that. I appreciate the support.",
          "createdAt": "2022-07-12T20:25:38Z",
          "updatedAt": "2022-07-12T20:25:38Z"
        }
      ]
    },
    {
      "number": 221,
      "id": "I_kwDOEpUZs85Njjrq",
      "title": "Optimize the Ed25519 implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/221",
      "state": "CLOSED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Follow up to #215.\r\n\r\nOver 1000 runs with dalek on release, I locally observe scalar multiplication taking 268ms. Since we use the prime-order subgroup of Ed25519, we must perform a scalar multiplication on each group element we receive. Alternatively, instead of requiring group elements be prime order when received, we can clear their torsion in just 6ms (~2% of the time).\r\n\r\nThe naive way to update FROST to this would be with the following definitions for Ed25519:\r\n\r\n```md\r\n  - SerializeElement: Implemented as specified in {{!RFC8032, Section 5.1.2}}.\r\n  - DeserializeElement: Implemented as specified in {{!RFC8032, Section 5.1.3}}.\r\n    Additionally, this function validates that the resulting element is not the group\r\n    identity element and is in the prime-order subgroup. The latter check can\r\n    be implemented by multiplying the resulting point by the order of the group and\r\n    checking that the result is the identity element.\r\n  - SerializeScalar: Implemented by outputting the little-endian 32-byte encoding of\r\n    the Scalar value.\r\n  - DeserializeScalar: Implemented by attempting to deserialize a Scalar from a 32-byte\r\n    string. This function can fail if the input does not represent a Scalar between\r\n    the value 0 and `G.Order() - 1`.\r\n```\r\n\r\nmodified to\r\n\r\n```md\r\n  - SerializeElement: Implemented as specified in {{!RFC8032, Section 5.1.2}}, after first\r\n    multiplying the element by the multiplicative inverse of the cofactor (8).\r\n  - DeserializeElement: Implemented as specified in {{!RFC8032, Section 5.1.3}}.\r\n    Additionally, this function multiplies the element by the cofactor (8) before validating\r\n    that the resulting element is not the group identity element.\r\n  - SerializeScalar: Implemented by outputting the little-endian 32-byte encoding of\r\n    the Scalar value.\r\n  - DeserializeScalar: Implemented by attempting to deserialize a Scalar from a 32-byte\r\n    string, failing if the input does not represent a Scalar between the value 0 and\r\n    `G.Order() - 1`.\r\n```\r\n\r\nPlease note this as insufficient as it will not produce valid signatures. The signature produced must have its nonce multiplied by the cofactor/never inverted, yet I care about discussing this theory right now than presenting a fully complete patch.\r\n\r\nPros:\r\n- During signing, each signer performs two inversions on their nonces (considered with a weight of 50), and then performs cofactor multiplications (efficient by being defined as three additions) for t signers (considered with a weight of 1). This produces a cost of `2(50) + 2(1)t`. The current scheme has a cost of `2(50)t` due to how checking for the presence of torsion is done.\r\n\r\nCons:\r\n- Not RFC8032 compliant, yet potentially still suitably compliant as it's solely extending with pre/post-ops when FROST already requires a scalarmul.\r\n- We also need another function for SerializeElement which doesn't perform the inverse multiplication to produce signatures.\r\n- Additional complexity in general.\r\n\r\nIt may be further beneficial, instead of modifying Serialize/Deserialize, to make cofactor a native property of the FROST algorithm. This would be more expansive than Ed25519 alone and not require an additional function. It would, however, increase complexity and remove the simple statement a prime-order group is required.\r\n\r\ncc @chris-wood, who helped review the above cited PR and merged it",
      "createdAt": "2022-07-11T20:09:24Z",
      "updatedAt": "2022-09-27T23:15:13Z",
      "closedAt": "2022-09-22T20:49:14Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "We are happy to take a PR towards this optimization but it is not a priority for the draft editors at the moment. ",
          "createdAt": "2022-09-22T20:49:14Z",
          "updatedAt": "2022-09-22T20:49:14Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "After #290, I'm tempted to submit a PR on this since it seems torsion is still an active point of discussion requiring work.\r\n\r\nThe optimal solution, in my opinion, is:\r\n- Promotion of cofactor to a curve property\r\n- SerializeElement being * inv cofactor, serialize\r\n- DeserializeElement being deserialize, * cofactor, not identity\r\n- The addition of SerializeSignatureElement for producing the final signature, compatible with RFC8032 and other existing schemes\r\n\r\n@chelseakomlo said a PR on this work will be accepted and I'll try to have one by tomorrow. This will hopefully close out all discussions on torsion checking/clearing and provide the best overall performance, though yes, it's a larger change than I would've hoped to make.\r\n\r\nAlternatively, torsion clears can be removed from the RFC as irrelevant, and torsion checks can be properly noted. The former are present, when they're unnecessary under a prime-order construction, and the latter do not seem to be (though that should be resolvable without too much trouble, as an alternative to my soon-to-be PR).",
          "createdAt": "2022-09-27T22:18:03Z",
          "updatedAt": "2022-09-27T22:18:03Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "@kayabaNerve if you don't mind please wait while we discuss this (I don't want to risk wasting your time). I think the main reason we closed this is because we want to compatible with RFC 8032, and torsion-clearing won't be",
          "createdAt": "2022-09-27T22:25:15Z",
          "updatedAt": "2022-09-27T22:25:25Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "... yes, it will be. I fully understand that requirement and have incorporated it into my work.\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/commit/ad3309f5fc4198bda84c63d5b14dd1e4490c5ce1 for the commit editing the draft alone. The entire FROST process is done with SerializePrimeOrderElement and DeserializePrimeOrderElement. The produced signatures use SerializeElement however. This means the signatures are RFC 8032 compliant.\r\n\r\nAnd sorry for not listening to you and coming back with the proposed edits. I only just saw your reply.",
          "createdAt": "2022-09-27T23:14:52Z",
          "updatedAt": "2022-09-27T23:15:13Z"
        }
      ]
    },
    {
      "number": 225,
      "id": "I_kwDOEpUZs85Nl_0E",
      "title": "Update version context strings",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/225",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We forgot to update these from \"-v5\" to \"-vCURRENT\". This isn't that big of a deal, but let's make sure we do this going forward.",
      "createdAt": "2022-07-12T09:39:17Z",
      "updatedAt": "2022-07-28T10:26:17Z",
      "closedAt": "2022-07-28T10:26:17Z",
      "comments": []
    },
    {
      "number": 232,
      "id": "I_kwDOEpUZs85OhKFB",
      "title": "Update the language on Nonce Reuse Attacks to match the updated nonce derivation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/232",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://www.ietf.org/archive/id/draft-irtf-cfrg-frost-07.html#section-7.1\n\n![1658779923647.png](https://user-images.githubusercontent.com/552961/180865929-937927c1-84c3-49d1-9051-e9cb70369eb7.png)",
      "createdAt": "2022-07-25T20:12:13Z",
      "updatedAt": "2022-08-01T15:51:59Z",
      "closedAt": "2022-08-01T15:51:59Z",
      "comments": []
    },
    {
      "number": 233,
      "id": "I_kwDOEpUZs85OmYW_",
      "title": "Add text saying that nonces MUST NOT be derived deterministically  ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/233",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-26T19:49:53Z",
      "updatedAt": "2022-07-27T21:01:39Z",
      "closedAt": "2022-07-27T21:01:39Z",
      "comments": []
    },
    {
      "number": 242,
      "id": "I_kwDOEpUZs85QYBJL",
      "title": "Identifier is a Scalar; ciphersuite-specific conversions to u16/integer",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/242",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2022-08-23T19:53:28Z",
      "updatedAt": "2022-09-21T12:18:54Z",
      "closedAt": "2022-09-21T12:18:54Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in #247",
          "createdAt": "2022-09-12T17:13:24Z",
          "updatedAt": "2022-09-12T17:13:24Z"
        }
      ]
    },
    {
      "number": 243,
      "id": "I_kwDOEpUZs85Qlo-x",
      "title": "Replace H1-5 with H, Hscalar, and Hchallenge",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/243",
      "state": "CLOSED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The first two functions can be used to build H{1, 3, 4, 5}, as demonstrated in the following Rust trait:\r\n\r\n```rs\r\n  /// Field element from hash. Used during key gen and by other crates under Serai as a general\r\n  /// utility. Used to instantiate H1 and H3.\r\n  #[allow(non_snake_case)]\r\n  fn hash_to_F(dst: &[u8], msg: &[u8]) -> Self::F;\r\n\r\n  /// Hash the given dst and data to a byte vector. Used to instantiate H4 and H5.\r\n  fn hash_to_vec(dst: &[u8], data: &[u8]) -> Vec<u8>;\r\n\r\n  /// Hash the message for the binding factor. H4 from the IETF draft\r\n  fn hash_msg(msg: &[u8]) -> Vec<u8> {\r\n    Self::hash_to_vec(b\"msg\", msg)\r\n  }\r\n\r\n  /// Hash the commitments for the binding factor. H5 from the IETF draft\r\n  fn hash_commitments(commitments: &[u8]) -> Vec<u8> {\r\n    Self::hash_to_vec(b\"com\", commitments)\r\n  }\r\n\r\n  /// Hash the commitments and message to calculate the binding factor. H1 from the IETF draft\r\n  fn hash_binding_factor(binding: &[u8]) -> Self::F {\r\n    Self::hash_to_F(b\"rho\", binding)\r\n  }\r\n\r\n  /// Securely generate a random nonce. H3 from the IETF draft\r\n  fn random_nonce<R: RngCore + CryptoRng>(mut secret: Self::F, rng: &mut R) -> Self::F {\r\n    let mut seed = vec![0; 32];\r\n    rng.fill_bytes(&mut seed);\r\n\r\n    let mut repr = secret.to_repr();\r\n    secret.zeroize();\r\n\r\n    seed.extend(repr.as_ref());\r\n    for i in repr.as_mut() {\r\n      i.zeroize();\r\n    }\r\n\r\n    let res = Self::hash_to_F(b\"nonce\", &seed);\r\n    seed.zeroize();\r\n    res\r\n  }\r\n```\r\n\r\nH2 isn't capable of this procedure thanks to the RFC8032 compliance requirement, yet I don't believe H2 should exist except within the test vectors. I find it completely infeasible for practical deployment and believe acknowledging it as an application-defined component would be beneficial. Any existing protocol for which FROST is used with will require such modification due to the usage of context strings specifying FROST (which won't be used with existing protocols).\r\n\r\nProtocols also don't agree on HRAms, thanks to Bitcoin having one for secp256k1, Bitcoin Cash having another, and then Polkadot having one for Ristretto. While I'm sorry for solely providing cryptocurrency examples, it's where I come from and a prime candidate for the deployment of FROST.\r\n\r\nH{1, 3, 4, 5} being consolidated reduces ciphersuite verbosity while guaranteeing the existing API consistency. H2 becoming application-defined, with only the test vectors providing it, better models real world discussions.\r\n\r\nI'm happy to write the PR myself, yet I wanted to get an ACK before doing so in order to ensure it's not a waste of time. This is technically two separate proposals (H{1, 3, 4, 5} -> H/Hscalar consolidation + Hchallenge becoming application specific), and I'm fine hearing ACK on one yet not the other.\r\n\r\nAs a side note, I'd personally prefer if hashes were ordered by usage. This would make H1 nonce (currently H3), H2 msg (currently H4), H3 commitments (currently H5), H4 rho (currently H1), and H5 Hchallenge. Alternatively, we could replace the numbers entirely for their DSTs (Hnonce, Hmsg, Hcom, Hrho). I just find it awkward how we use H4 + H5 in H1. I also understand the path of least resistance and won't push here.",
      "createdAt": "2022-08-26T10:00:36Z",
      "updatedAt": "2022-09-12T20:04:03Z",
      "closedAt": "2022-09-12T17:16:06Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a style preference; it is a good argument but as the draft is nearing completion, we are going to try to minimize large changes like this. ",
          "createdAt": "2022-09-12T17:16:06Z",
          "updatedAt": "2022-09-12T17:16:06Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Considering my main interest wasn't about simplifying the amount of code yet about ensuring it could always be simplified as such, all good with me if this won't be changed anyways. Thanks for reviewing this.",
          "createdAt": "2022-09-12T20:04:03Z",
          "updatedAt": "2022-09-12T20:04:03Z"
        }
      ]
    },
    {
      "number": 245,
      "id": "I_kwDOEpUZs85QqC4d",
      "title": "Ed448 Sage PoC isn't RFC8032 compliant",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/245",
      "state": "CLOSED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I misdiagnosed this issue originally, yet have re-opened it in a correct form.\r\n\r\nThe RFC8032 Python code for EdDSA has the following statement:\r\n`print(Edwards448Point.stdbase().double().encode().hex())`\r\nprint\r\n`ed8693eacdfbeada6ba0cdd1beb2bcbb98302a3a8365650db8c4d88a726de3b7d74d8835a0d76e03b0c2865020d659b38d04d74a63e905ae80`\r\n\r\nThe Sage PoC has:\r\n`print(GroupEd448().serialize((GroupEd448().generator() + GroupEd448().generator())).hex())`\r\nprint\r\n`3918e56df836e2325b4f0d5d2844d4b57294caa17ef9d8c0c15b8a7b22c30dc945d857042fc0b79c971b02dea5334b1627e5cdace47790d400`\r\n\r\nGiven the inclusion of Ed448 was predicated on RFC8032 compliance, this should be corrected.\r\n\r\nI also note the PoC defines a Decaf448 impl, yet the draft doesn't define a spec for it. Is there a reason for that? Considering how little used Ed448 is, I don't feel a need to advocate for Decaf448 (which unfortunately wasn't used in RFC8032 for whatever reason), yet it was a point of interest. I've also now seen references to a newer Decaf448, along with a Ristretto for Ed448, so it's hard to endorse Decaf448 (or anything associated) until review of the variety of schemes occurs...",
      "createdAt": "2022-08-27T23:37:12Z",
      "updatedAt": "2022-09-20T12:25:51Z",
      "closedAt": "2022-09-20T12:25:51Z",
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The PoC uses the generator from the paper. The RFC process used a different generator (or at least, a different mapping of it which should've been used here). Will submit a PR correcting it.",
          "createdAt": "2022-08-27T23:41:10Z",
          "updatedAt": "2022-08-28T00:48:50Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The Ed448 spec also has https://github.com/cfrg/draft-irtf-cfrg-frost/issues/204 as an issue.\r\n\r\nRFC8032: \"interpret the 114-octet digest as a little-endian integer k.\"\r\n\r\nFROST: \"H2(m): Implemented by computing H(m), interpreting the lower 57 bytes as a little-endian integer, and reducing the resulting integer modulo L = 2^446 - 13818066809895115352007386748515426880336692474882178609894547503885.\"\r\n\r\nI'll update #246 to fix this as well in a bit, after checking if any other discrepancies exist.",
          "createdAt": "2022-08-28T08:19:03Z",
          "updatedAt": "2022-08-28T08:22:49Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The FROST H2 also simply says H(m) (where m is RAm), when it's actually:\r\n\r\n`H(dom4(F, C) || R || A || PH(M), 114)`\r\n\r\nF = 0 if we're supporting Ed448, not Ed448ph\r\nC = ... actually, for once, we get to define a context string . No other ciphersuite naturally lets us like Ed448 does.\r\nPH is additionally an identity function, or `SHAKE256(M, 64)` for Ed448ph.\r\n\r\nSo `H(\"SigEd448\" || 0 || len(contextString) || contextString || m)` where len(contextString) < 256 would be a correct definition. I don't believe we need to further state that bound however since we're providing a sufficiently short context string, not stating how to define custom ciphersuites (though #243 proposes that, to some level. I believe the 8032-compliance bound would be on any ciphersuites specified in this draft however, not any anywhere, especially when those can never truly be stopped).",
          "createdAt": "2022-08-28T08:38:39Z",
          "updatedAt": "2022-08-29T06:45:18Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "~~H1 and H3 also aren't using wide reduction nor a hash to field? I assume all of these should be moved to wide reduction since it's already required by 8032 for H2.~~ The PoC already uses wide reduction for all of these, just as #204 already did for Ed25519.",
          "createdAt": "2022-08-28T08:51:04Z",
          "updatedAt": "2022-08-29T16:12:01Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "@conradoplg will review this",
          "createdAt": "2022-09-12T17:17:50Z",
          "updatedAt": "2022-09-12T17:17:50Z"
        }
      ]
    },
    {
      "number": 249,
      "id": "I_kwDOEpUZs85Rqf3o",
      "title": "Include all randomness used for test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/249",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "From @pornin:\r\n\r\n> I note, though, that the vectors could be slightly more complete by providing the random 32-byte values used in the calls to nonce_generate() (right now I can only take the provided hiding and binding nonces at face value, I cannot check that they were produced with the H3 hash function).",
      "createdAt": "2022-09-12T15:24:46Z",
      "updatedAt": "2022-09-21T16:08:24Z",
      "closedAt": "2022-09-21T16:08:24Z",
      "comments": []
    },
    {
      "number": 250,
      "id": "I_kwDOEpUZs85RqlSJ",
      "title": "Should ristretto255 DeserializeElement function reject the identity element?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/250",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @pornin's review. For comparison, the Ed25519 suite _does_ reject the identity element: ",
      "createdAt": "2022-09-12T15:40:04Z",
      "updatedAt": "2022-09-20T12:35:15Z",
      "closedAt": "2022-09-20T12:35:15Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, it should, as currently the draft does not consider identity elements for either the public key or commitment. I'll fix this up.",
          "createdAt": "2022-09-12T17:19:23Z",
          "updatedAt": "2022-09-12T17:19:23Z"
        }
      ]
    },
    {
      "number": 251,
      "id": "I_kwDOEpUZs85Rql0v",
      "title": "Fix editorial typos",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/251",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-09-12T15:41:44Z",
      "updatedAt": "2022-09-12T15:51:20Z",
      "closedAt": "2022-09-12T15:51:20Z",
      "comments": []
    },
    {
      "number": 252,
      "id": "I_kwDOEpUZs85RqmHy",
      "title": "Identifier allocation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/252",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @pornin's review:\r\n\r\n>   - The allocation of identifiers to individual signers is not\r\n    described. In practice, each signer is given an identifier at key\r\n    generation time, and signers are supposed to reliably remember their\r\n    identifier. If signers are dynamically told their identifiers are\r\n    signature generation time, and could be lied to by the Coordinator,\r\n    then bad things would probably happen.\r\n>  - Section 5 does not state that each participant shall know their own\r\n    identifier as well. Identifiers must be allocated during keygen,\r\n    and the protocol assumes that such identifiers are unique and\r\n    remembered.\r\n\r\nShould the spec describe how signer identifiers are allocated, or punt entirely to key generation requirements? This may be related to #247. We should also require that signer identifiers are distinct (see related comment from @pornin below):\r\n\r\n> Commitment list must be sorted by signer identifier, but it is not stated that all signer identifiers must be distinct. ",
      "createdAt": "2022-09-12T15:42:38Z",
      "updatedAt": "2022-09-21T12:18:53Z",
      "closedAt": "2022-09-21T12:18:53Z",
      "comments": []
    },
    {
      "number": 253,
      "id": "I_kwDOEpUZs85RqmVH",
      "title": "Add duplicate signer check",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/253",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @pornin's review:\r\n\r\n>   - All sets of participants assume that there is no duplicate (the same\r\n    participant should appear only once in the set, and all participants\r\n    should have distinct identifiers). There are no explicit checks of\r\n    that property in the described functions, but there should probably\r\n    be such a check somewhere. I suggest adding such checks for all\r\n    values which are received by the involved parties; in particular by\r\n    participants when receiving the group commitments: the participants\r\n    should verify that the values are in the proper order (by increasing\r\n    identifier values) and that there is no duplicate.",
      "createdAt": "2022-09-12T15:43:15Z",
      "updatedAt": "2022-09-20T16:43:10Z",
      "closedAt": "2022-09-20T16:43:01Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "This case is currently captured by #281, but the check is quite buried. \r\n\r\nDo we need a higher-level check as well, or will #281 suffice? ",
          "createdAt": "2022-09-20T16:24:43Z",
          "updatedAt": "2022-09-20T16:24:43Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think #281 resolves the comment and we can close this, but @pornin please reopen if you disagree!",
          "createdAt": "2022-09-20T16:43:01Z",
          "updatedAt": "2022-09-20T16:43:10Z"
        }
      ]
    },
    {
      "number": 254,
      "id": "I_kwDOEpUZs85Rqmo9",
      "title": "Clarify challenge length",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/254",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @pornin's review:\r\n\r\n>   - A point worth mentioning is that all signatures in this draft use a\r\n    \"challenge\" of the same size as the scalar field, but this is not an\r\n    actual requirement of Schnorr signatures. In fact it is just a sort\r\n    of tradition, established for no good reasons. In his original\r\n    paper, Schnorr explained that for n-bit security and a 2n-bit group,\r\n    the challenge only needs to have length n bits, not 2n bits. This\r\n    may lead to a signature encoding that contains (c,z) instead of\r\n    (R,z). The advantage of doing so is that it makes signatures shorter\r\n    (e.g. 48 bytes instead of 64); it also speeds up signature\r\n    verification. As far as I can tell, this would be compatible with\r\n    the FROST scheme.\r\n    I (very recently!) defined such a scheme for double-odd curves, see\r\n    https://eprint.iacr.org/2022/1052 (section 7) for details and some\r\n    analysis. In particular there is a paper by Neven, Smart and\r\n    Warinshi that analyzes the security of doing so in great details:\r\n       https://www.esat.kuleuven.be/cosic/publications/article-1167.pdf\r\n",
      "createdAt": "2022-09-12T15:44:13Z",
      "updatedAt": "2022-09-22T20:47:54Z",
      "closedAt": "2022-09-22T20:47:54Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a good point; this seems difficult to specify cleanly over different ciphersuites. A PR from @pornin here would be helpful. ",
          "createdAt": "2022-09-12T17:24:22Z",
          "updatedAt": "2022-09-12T17:24:22Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Wouldn't it be best done as, whoever deploys this, defining a new ciphersuite whose hash output is just 16-bytes? While the IETF draft will produce a signature formatted R, s, it's possible to convert that as c, s without issue IIRC. The main note I'd have about an effective reversion to classical Schnorr signature is how FROST follows the EdDSA standard of r + cx yet classical signatures were r - cx. Accordingly, FROST isn't usable there, unless a FROST specific hash function returning the Scalar negative is supplied (or custom share algorithms in general are).\r\n\r\nThe only issue I would see if if FROST assumed hash outputs >= the scalar field size, yet the wire format spec was removed and I don't believe the spec does have that assumption.",
          "createdAt": "2022-09-12T20:45:00Z",
          "updatedAt": "2022-09-12T20:45:00Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed. I think this could best be dealt with as a new ciphersuite. @chelseakomlo, I suggest we close this without change.",
          "createdAt": "2022-09-22T18:41:26Z",
          "updatedAt": "2022-09-22T18:41:26Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood Sounds good. @pornin see discussion above regarding the decision to close without change. ",
          "createdAt": "2022-09-22T20:47:54Z",
          "updatedAt": "2022-09-22T20:47:54Z"
        }
      ]
    },
    {
      "number": 255,
      "id": "I_kwDOEpUZs85Rqsa7",
      "title": "Polynomial interpolation should check for duplicate points",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/255",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @pornin:\r\n\r\n> 4.2.3 Deriving the constant term of a polynomial\r\n\r\n    \"L.append(point.x)\" -> This does not check for duplicates. In\r\n    section 4.2.2, L was stated as \"the set of x-coordinates\", and sets\r\n    do not have duplicate elements; this raises the question of what\r\n    happens (and what should happen) when trying to insert twice the\r\n    same value in a set. Also, the use of \"append()\" sort of hints as\r\n    this set being, in fact, a list, hence a structure that can store\r\n    the same value several times.",
      "createdAt": "2022-09-12T16:01:10Z",
      "updatedAt": "2022-09-20T12:36:39Z",
      "closedAt": "2022-09-20T12:36:38Z",
      "comments": []
    },
    {
      "number": 256,
      "id": "I_kwDOEpUZs85Rqsr5",
      "title": "Prime-Order group updates",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/256",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "From @pornin's review:\r\n\r\n> 3.1 Prime-Order Group\r\n\r\n    THe text should state explicitly that: \"It is assumed that\r\n    group element addition, negation, and equality comparisons can be\r\n    efficiently computed for arbitrary group elements.\"\r\n\r\n    \"a unique byte array buf\" (in SerializeElement()): if the intent is\r\n    that a given group element admits a single valid encoding as bytes,\r\n    then this should be stated so. Similarly, in DeserializeElement(),\r\n    \"a valid byte representation of an element\" can be interpreted as a\r\n    hint for the potential existence of several representations of the\r\n    same element, which is at odds with the idea that the output of\r\n    SerializeElement() is \"unique\"; maybe write it as \"the unique valid\r\n    byte representation of an element\"?\r\n",
      "createdAt": "2022-09-12T16:01:57Z",
      "updatedAt": "2022-09-26T19:49:26Z",
      "closedAt": "2022-09-26T19:49:26Z",
      "comments": []
    },
    {
      "number": 257,
      "id": "I_kwDOEpUZs85Rqu4t",
      "title": "Explain key share and secret key relationship",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/257",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @pornin's review:\r\n\r\n>     The relationship between the key shares sk_i, and the aggregate\r\n    secret key s, is not explained (normally, sk_i = f(Scalar(i)) for\r\n    some implicit polynomial f of degree at most NUM_SIGNERS-1, with f\r\n    being indistinguishable from a uniformly random polynomial, and s =\r\n    f(0); when using a trusted dealer, the dealer does generate f\r\n    randomly and sends f(Scalar(i)) to the participant i).",
      "createdAt": "2022-09-12T16:08:20Z",
      "updatedAt": "2022-09-20T12:23:27Z",
      "closedAt": "2022-09-20T12:23:27Z",
      "comments": []
    },
    {
      "number": 258,
      "id": "I_kwDOEpUZs85RqxH1",
      "title": "Signature share verification failures",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/258",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @pornin's review:\r\n\r\n> 5.3 Signature Share Verification and Aggregation\r\n\r\n    \"Excluding one signer means that their nonce will not be included in\r\n    the joint response z and consequently the output signature will not\r\n    verify.\" -> Excluding a signer does not necessarily prevent\r\n    computation of a correct signature, if the Coordinator deliberately\r\n    selected more signers than necessary. E.g. if the threshold is 5 but\r\n    the coordinator decided to involve 8 signers, then up to 3 signer\r\n    shares may fail without preventing a correct signature from being\r\n    computed. This corresponds to the first paragraph of section 5.2,\r\n    where it is said that the the Coordinator chooses _at least_\r\n    MIN_SIGNERS. Normally, the Coordinator may _a posteriori_ exclude\r\n    some participants (removing their parts from the recomputed lists of\r\n    commitments and binding factors).\r\n",
      "createdAt": "2022-09-12T16:14:57Z",
      "updatedAt": "2022-09-19T16:13:21Z",
      "closedAt": "2022-09-19T16:13:21Z",
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "... except then each share will be for a different nonce. Not to dismiss the work of https://eprint.iacr.org/2022/833.pdf, but this suggests a robust process and the reversion to FROST1 closed out the malleability discussed there. Is there something I'm missing which makes this review correct?\r\n\r\nEDIT: This comment suggested the malleability identified by the cited work could lead to a robust process. That is not a suggestion I wanted to make as that can not be done securely, and could only be argued as insecurely robust if you know the party which would fail before they do (which is not a valid argument).",
          "createdAt": "2022-09-12T20:37:30Z",
          "updatedAt": "2022-09-16T17:12:07Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "@kayabaNerve you are correct. We'll update the draft so this point is not missed in the future. ",
          "createdAt": "2022-09-13T19:40:44Z",
          "updatedAt": "2022-09-13T19:40:44Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "@pornin - FROST is not robust, meaning that if any signer whose commitment was used to generate the group commitment `R` does not respond or issues an invalid response, the signing operation will fail for correctness reasons. Hence, in either of these cases, the coordinator MUST abort and re-run the protocol using fresh commitments. I added language to further clarify this; please let me know if you have any suggestions for making this point clearer. ",
          "createdAt": "2022-09-19T16:13:14Z",
          "updatedAt": "2022-09-19T16:13:14Z"
        }
      ]
    },
    {
      "number": 259,
      "id": "I_kwDOEpUZs85RqxoI",
      "title": "FROST(Ed25519, SHA-512) feedback",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/259",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "From @pornin:\r\n\r\n> 6.1. FROST(Ed25519, SHA-512)\r\n\r\n    It may be worth pointing out that when deserializing a scalar from\r\n    bytes, there is no ignored bit. Scalars are always lower than 2^253\r\n    (the subgroup order is slightly over 2^252) so the top three bits\r\n    are always zero, and some existing implementations will gleefully\r\n    _ignore_ these three bits, which contradicts the canonicality of\r\n    the encoding.\r\n\r\n    DeserializeElement(buf) is defined here with an extra check to\r\n    reject the group identity upon deserializing. Nothing in the\r\n    previous text checked that the public keys and commitment points\r\n    should be non-identity (and, for that matter, randomly generated\r\n    nonces can conceptually be zero). In practice, probability of such\r\n    an occurrence is negligible when generating keys and signatures with\r\n    FROST. However, it can matter for signature verification, where\r\n    malicious input is possible, and it can be important that all\r\n    verifiers agree on what is a valid key or signature.\r\n    RFC 8032 allows scalars to be zero, and points to be the identity;\r\n    this applies to public keys (A), commitments in signatures (R),\r\n    private keys (s) and responses in signatures (S). If strict\r\n    interoperability with RFC 8032 is sought, then the same rules should\r\n    apply to FROST.\r\n\r\n    \"Nh\" is defined to be equal to 64. This notation was not defined\r\n    previously. I suppose this is meant to be the size of the output\r\n    of H, in bytes.\r\n\r\n    The (sub)group order is denoted \"L\", which maps to what RFC 8032\r\n    does, but conflicts with the use of \"L\" as the set of signer\r\n    identifiers (as scalars) earlier in the FROST draft.",
      "createdAt": "2022-09-12T16:16:39Z",
      "updatedAt": "2022-09-22T19:53:12Z",
      "closedAt": "2022-09-22T19:53:12Z",
      "comments": []
    },
    {
      "number": 260,
      "id": "I_kwDOEpUZs85Rqxus",
      "title": "FROST(ristretto255, SHA-512) feedback",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/260",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "From @pornin:\r\n\r\n> FROST(ristretto255, SHA-512)\r\n\r\n    Same comment about scalar decoding as for Ed25519.\r\n\r\n    Here, DeserializeElement() does NOT reject the identity (either as a\r\n    public key or as a commitment). It is weird to explicitly reject it\r\n    for Ed25519 and Ed448 (in contradiction with RFC 8032) and not\r\n    reject it for ristretto255 (where there is no existing signature\r\n    standard that should be adhered to for interoperability). I would\r\n    have expected the opposite (accept the identity for Ed25519 and\r\n    Ed448 because of interoperability issues, but reject it for\r\n    ristretto255 because the identity is a really daft public key).",
      "createdAt": "2022-09-12T16:16:57Z",
      "updatedAt": "2022-09-23T12:06:43Z",
      "closedAt": "2022-09-23T12:06:42Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This should be addressed now.",
          "createdAt": "2022-09-23T12:06:42Z",
          "updatedAt": "2022-09-23T12:06:42Z"
        }
      ]
    },
    {
      "number": 261,
      "id": "I_kwDOEpUZs85Rqxz4",
      "title": "FROST(Ed448, SHAKE256) feedback",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/261",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "From @pornin:\r\n\r\n> FROST(Ed448, SHAKE256)\r\n\r\n    H2() is defined as: \"H2(m): Implemented by computing H(m),\r\n    interpreting the lower 57 bytes as a little-endian integer, and\r\n    reducing the resulting integer modulo L\". However, this is not\r\n    compatible with RFC 8032, which, in section 5.2.6 (step 2),\r\n    interprets the full 114-byte output as an integer and reduces it\r\n    modulo L. Thus, \"the lower 57 bytes\" should here become \"the\r\n    114-byte hash output\".\r\n    (It is somewhat weird to use 114 bytes here, since 1. for the\r\n    challenge part in a Schnorr signature, there is no actual need\r\n    for complete uniformity; and 2. the subgroup order is very\r\n    close to a power of 2, so even using only 56 bytes here would\r\n    still yield a selection indistinguishable from uniformity. But\r\n    RFC 8032 is defined to use 114 bytes, so interoperability\r\n    dictates that FROST should use the same length.)\r\n\r\n    See Ed25519 and ristretto255 about the identity point (again, it is\r\n    allowed by RFC 8032 but explicitly rejected by the FROST draft).",
      "createdAt": "2022-09-12T16:17:12Z",
      "updatedAt": "2022-09-21T13:10:51Z",
      "closedAt": "2022-09-21T13:10:50Z",
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is resolved in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/246 which also resolved other differences which I don't believe were mentioned by this review.",
          "createdAt": "2022-09-12T20:15:24Z",
          "updatedAt": "2022-09-12T20:15:24Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed. Closed as having been fixed by #246.",
          "createdAt": "2022-09-21T13:10:50Z",
          "updatedAt": "2022-09-21T13:10:50Z"
        }
      ]
    },
    {
      "number": 262,
      "id": "I_kwDOEpUZs85Rqx4t",
      "title": "FROST(P-256, SHA-256) and FROST(secp256k1, SHA-256) feedback",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/262",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "From @pornin:\r\n\r\n> FROST(P-256, SHA-256)\r\n\r\n    SEC1 rules formally describe point encodings of various lengths.\r\n    Specifically, for curve P-256 (or secp256k1), you can get the\r\n    following lengths:\r\n\r\n      - identity point: 1 byte\r\n      - non-identity point, compressed format: 33 bytes\r\n      - non-identity point, uncompressed or hybrid format: 65 bytes\r\n\r\n    Since the FROST draft mandates a fixed serialization length in\r\n    general, the text should specify that for this ciphersuite, points\r\n    should always be encoded over exactly 33 bytes. This would have the\r\n    side effects of rejected uncompressed/hybrid formats, and also the\r\n    identity point (with SEC1 rules, no 33-byte encoding can possibly be\r\n    decoded as the identity point).\r\n\r\n    It might be noted that the compressed format was long rumoured to be\r\n    covered by a Certicom patent, so that some libraries don't implement\r\n    it. In the Internet/PKIX world (RFC 5480, section 2.2), uncompressed\r\n    format is the rule, with compressed format being allowed to be\r\n    supported but not mandatory (so nobody used the compressed format in\r\n    their X.509 certificates, since that would fail to work with some\r\n    implementations). It is in the nature of patent law that absolutely\r\n    no guarantee whatsoever can be obtained about them, even after\r\n    litigation and an explicit ruling, which did not happen; but the\r\n    usual assertion is that such patents, if they existed at all, should\r\n    have expired by now. Of course, using the uncompressed format makes\r\n    keys and signatures substantially larger, so there are tangible\r\n    benefits to sticking to the compressed format; but it should be\r\n    understood that some existing libraries that implement P-256 might\r\n    not be up to the task.\r\n\r\n    H1, H2 and H3 are defined to use \"hash_to_field from\r\n    [HASH-TO-CURVE], Section 5.3 using L = 48, expand_message_xmd with\r\n    SHA-256, DST = contextString || \"rho\", and prime modulus equal to\r\n    Order().\" This is a slightly incomplete description, because:\r\n\r\n      - hash_to_field() is actually defined in section 5.2 of the\r\n        hash-to-curve draft, not 5.3 (though it uses expand_message(),\r\n        which calls expand_message_xmd(), which is in section 5.3.1).\r\n      - hash_to_field() expects a total of 6 parameters and 2 inputs.\r\n        Here, one hould understand that the target field is the\r\n        scalar field (of order p, and extension degree 1); the number\r\n        of bytes L (again an overload of the notation \"L\"!) is meant\r\n        to be 48 (normally it is inferred from the target field size\r\n        and a \"security parameter\" k), and exactly one field element\r\n        is expected to be produced from each call to hash_to_field().\r\n\r\n    Also, the hash-to-curve draft defines and uses hash_to_field() to\r\n    produce elements in the base field of some elliptic curve, which is\r\n    NOT the case here: in FROST, this is used to produce elements in the\r\n    scalar field. This may be worth mentioning explicitly (i.e. the\r\n    hash_to_field() implementation of a hash_to_curve() function for\r\n    P-256 cannot be reused unchanged, it is not the same target field).",
      "createdAt": "2022-09-12T16:17:28Z",
      "updatedAt": "2022-09-26T19:47:57Z",
      "closedAt": "2022-09-26T19:47:57Z",
      "comments": []
    },
    {
      "number": 263,
      "id": "I_kwDOEpUZs85RrDsk",
      "title": "Tidy up references",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/263",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @pornin:\r\n\r\n> 9.1. Normative References\r\n\r\n    [x9.62] designates ANSI X9.62-1998, but this is not the latest\r\n    version of that standard. There is ANS X9.62-2005 (for that one it's\r\n    \"ANS\" and not \"ANSI\", I don't know why), and more recently ANSI\r\n    X9.142-2020 was published, which states that \"This document cancels\r\n    and replaces the previous edition of the Standard, which was ANS\r\n    X9.62-2005.\" Thus, the actual reference should theoretically be:\r\n\r\n   [x9.142]   ANSI, \"Public Key Cryptography for the Financial Services\r\n              Industry - The Elliptic Curve Digital Signature Algorithm\r\n              (ECDSA)\", ANSI X9.142-2020, September 2020.\r\n\r\n    Note that none of these standards is free! The latest more-or-less\r\n    freely available version is a \"working draft\" of X9.62-1998. I have\r\n    a (legitimately bought) copy of X9.62-2005; I do not have\r\n    X9.142-2020 (though the preview on the ANSI webstore covers enough\r\n    to see the assertion that it replaces X9.62-2005). I can confirm\r\n    that X9.62-2005 agrees with the X9.62-1998 draft in all the\r\n    essentials (in particular encoding formats) and I have not heard of\r\n    X9.142-2020 having changed things substantially in that respect (but\r\n    they might not have told me if it did!).\r\n\r\n    It is of course always a bother to reference non-free standards.\r\n    Pointing to an old, twice-deprecated-and-replaced standard is not\r\n    comfortable, but neither is pointing to a new standard that we could\r\n    not actually look at. I don't have a good answer here, but I think\r\n    that switching from X9.62-1998 to X9.62-2005 would be a gain,\r\n    leading to:\r\n\r\n   [x9.62]    ANSI, \"Public Key Cryptography for the Financial Services\r\n              Industry: the Elliptic Curve Digital Signature Algorithm\r\n              (ECDSA)\", ANS X9.62-2005, November 2005.\r\n",
      "createdAt": "2022-09-12T17:01:07Z",
      "updatedAt": "2022-09-15T13:45:08Z",
      "closedAt": "2022-09-15T13:45:08Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #272",
          "createdAt": "2022-09-15T13:45:08Z",
          "updatedAt": "2022-09-15T13:45:08Z"
        }
      ]
    },
    {
      "number": 264,
      "id": "I_kwDOEpUZs85RrD9A",
      "title": "Note verifier optimization",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/264",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @pornin:\r\n\r\n> Appendix B. Schnorr Signature Verification for Prime-Order Groups\r\n\r\n    I am not sure whether this is worth mentioning, but the signature\r\n    verification process can be sped up with the Antipa et al.\r\n    optimization, coupled with the lattice basis reduction algorithm\r\n    from https://eprint.iacr.org/2020/454 (yes, I am aware that I am\r\n    quoting myself here). On Ed25519, this reduces verification cost\r\n    from 129k cycles to 114k, on a recent x86 system, and the gain\r\n    is greater for slower curves (e.g. P-256 or Ed448).\r\n",
      "createdAt": "2022-09-12T17:01:33Z",
      "updatedAt": "2022-09-15T13:44:38Z",
      "closedAt": "2022-09-15T13:44:38Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as the algorithm to implement is not well-defined in the cited papers.",
          "createdAt": "2022-09-15T13:44:38Z",
          "updatedAt": "2022-09-15T13:44:38Z"
        }
      ]
    },
    {
      "number": 265,
      "id": "I_kwDOEpUZs85RrEIh",
      "title": "Input message validation fixes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/265",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "From @pornin:\r\n\r\n> 7.4 Input Message Validation\r\n\r\n    \"As another example, use of threshold signatures in TLS [TLS] to\r\n    produce signatures of transcript hashes might require that signers\r\n    check that the input message is a valid TLS transcript from which\r\n    the corresponding transcript hash can be derived.\"\r\n    -> This raises the issue of pre-hashing. EdDSA, as defined in RFC\r\n    8032, has several modes, depending on whether the message to sign m\r\n    is used directly in the signature process, or first hashed, the hash\r\n    value being then used in the process. In a TLS-1.2 implementation,\r\n    the raw concatenation of the handshake messages is used, but TLS-1.2\r\n    only supports ECDSA, not EdDSA, and in ECDSA pre-hashing is used\r\n    systematically. In TLS-1.3, the input to the signature algorithm is\r\n    a byte sequence that is the concatenation of a domain-separation\r\n    string and the transcript hash, i.e. if EdDSA is used then \"pure\"\r\n    mode is used (no pre-hashing), except that the non-pre-hashed\r\n    message is, in fact, a hash output.\r\n\r\n    A lot of confusion (hence interoperability issues) can raise from\r\n    this pre-hashing concept. In general, pre-hashing is useful for\r\n    implementations since it avoids buffering potentially large inputs\r\n    (with \"pure\" EdDSA, you cannot start hashing the data until you know\r\n    which public/private key pair you are going to use, and that would\r\n    be quite inconvenient in a TLS-1.2 context, especially for small\r\n    embedded systems, since the need for a client signature and the\r\n    relevant key are discovered quite late in the handshake), which is\r\n    why TLS-1.3 uses the \"transcript-hash\". A similar situation happens\r\n    for instance in CMS (aka \"PKCS#7\", the generic format which powers\r\n    S/MIME and other similar things), in which a signature on a message\r\n    is really a signature on a set of \"signed attributes\", one of which\r\n    containing a hash value over the actual content bytes. In other\r\n    words, even if the signature mechanism itself does not include some\r\n    pre-hashing, protocols will go to great lengths to put it back in\r\n    some way.\r\n\r\n    EdDSA was defined with a \"pure\" mode because it was published right\r\n    in the middle of the Great Hash Function Scare, that was initiated\r\n    when MD5 got broken, and led to the assumption (which turned out not\r\n    to be true) that SHA-2 functions were soon going to fall;\r\n    non-pre-hashed signatures are resilient to collision attacks, in a\r\n    way that pre-hashed signatures are not. From a conceptual security\r\n    point of view, \"pure\" mode is a gain. From a practical point of\r\n    view, though, pure mode is a hassle. This has led RFC 8032 to try to\r\n    define both \"pure\" and \"pre-hashed\" modes, which complicates APIs.\r\n    From my own cursory experience, nobody uses RFC 8032 pre-hashed\r\n    signatures, but many protocols actually use PureEdDSA over what\r\n    really is a hash value, like what is done in TLS-1.3. It's all a bit\r\n    messy.\r\n\r\n    My suggestions:\r\n\r\n      - State explicitly in the text that FROST signatures do not use\r\n        any pre-hashing by themselves, but of course protocols that use\r\n        FROST signatures can totally do some pre-hashing and apply the\r\n        FROST signatures on something which is already a hash value. In\r\n        that case, the used hashing process shall employ a properly\r\n        collision-resistant hash function with a security level\r\n        commensurate with the security inherent to the group used in\r\n        FROST.\r\n\r\n      - In section 7.4 and the TLS example, alter the text to state\r\n        something along the lines of: \"As another example, use of\r\n        threshold signatures in TLS to produce signatures of transcript\r\n        hashes might require the signers receive the source handshake\r\n        messages themselves, and recompute the transcript hash which is\r\n        used as input message to the signature generation process, so\r\n        that they can verify that they are signing a proper TLS\r\n        transcript hash and not some other data.\"\r\n\r\n",
      "createdAt": "2022-09-12T17:01:49Z",
      "updatedAt": "2022-09-22T18:29:26Z",
      "closedAt": "2022-09-22T18:29:26Z",
      "comments": []
    },
    {
      "number": 266,
      "id": "I_kwDOEpUZs85RrFGQ",
      "title": "Random scalar generation clarifications",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/266",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "From @pornin:\r\n\r\n> D.1. Rejection Sampling\r\n\r\n    It might be worth mentioning that a safe (constant-time)\r\n    implementation of rejection sampling must take care not to leak\r\n    extra information. A naive implementation will scan the source bytes\r\n    in high-to-low order and exit the loop as soon as a source byte\r\n    differs from the corresponding modulus byte, and that means a\r\n    side-channel that leaks how many top source bytes are equal to the\r\n    top modulus bytes (and that side-channel can be exploited in a key\r\n    recovery attack with Bleichenbacher's other attack).\r\n\r\nand\r\n\r\n> D.2. Wide Reduction\r\n\r\n    For some curves, where the target curve order is already quite close\r\n    to a power of two, the number of bytes to generate can be safely\r\n    reduced. This applies in particular to Ed25519, Ed448, ristretto255\r\n    and secp256k1, for which producing just as many bytes as the curver\r\n    order size would already be safe (and would make the reduction step\r\n    quite simpler). However, in all generality, the recommendation of\r\n    x1.5 size is fine.\r\n",
      "createdAt": "2022-09-12T17:04:26Z",
      "updatedAt": "2022-09-20T12:20:09Z",
      "closedAt": "2022-09-20T12:20:09Z",
      "comments": []
    },
    {
      "number": 268,
      "id": "I_kwDOEpUZs85RrOoI",
      "title": "Clarify how the verifier() in appendix B is stricter than RFC8032",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/268",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "> 1.  I clarified my thinking about interoperability with EdDSA, and the identity point. The gist of it is that the interoperability which is sought in FROST is that correct FROST signatures are accepted by standard Ed25519 / Ed448 verifiers, but it does not go the other way round: standard Ed25519 and Ed448 verifiers (as per RFC 8032) may accept some signatures that a FROST verifier would reject. In other words, the verifier in appendix B is stricter, since it will reject points not in the subgroup (for both public keys and commitment points) that an RFC 8032 verifier may accept; similarly, the appendix B verifier will reject the identity point (again, both as a public key and as a signature commitment point) that are deemed acceptable by RFC 8032. This is fine! But it should be said explicitly somewhere in the draft. In all generality, and especially for consensus-based applications, it matters to be precise about what signatures are accepted and what signatures are rejected.\r\nIt is still weird, though, that identity points are accepted in the Ristretto255 ciphersuite: whatever reasons required the explicit rejection of the identity in DeserializePoint() for the Ed25519/Ed448 ciphersuites should equally apply to the Ristretto255 ciphersuite. I think the identity points should be explicitly rejected in the Ristretto255 ciphersuite DeserializeElement() function.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/crypto-panel/kEwszf9MDNmdgJDnuUFaIHmBYwc/",
      "createdAt": "2022-09-12T17:37:05Z",
      "updatedAt": "2022-09-22T18:55:10Z",
      "closedAt": "2022-09-22T18:54:56Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think we should do anything for this. The verifier in Appendix B is not meant to be used for suites compatible with RFC8032. ",
          "createdAt": "2022-09-13T17:39:13Z",
          "updatedAt": "2022-09-13T17:39:13Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing per the comment above.",
          "createdAt": "2022-09-22T18:54:56Z",
          "updatedAt": "2022-09-22T18:54:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@pornin please reopen if you disagree with this conclusion.",
          "createdAt": "2022-09-22T18:55:10Z",
          "updatedAt": "2022-09-22T18:55:10Z"
        }
      ]
    },
    {
      "number": 269,
      "id": "I_kwDOEpUZs85RrPa1",
      "title": "Cite faster way to verify if in the prime order subgroup via Pornin",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/269",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "> 1.  Speaking of checking that points are in the proper subgroup: section 6.1 suggests that it can be done by multiplying the point by the order of the subgroup. This is true, that method works; but it is quite expensive (in my tests, it costs about 80% of a generic point multiplication by a scalar). It turns out that one can do better with some point halving using some isogenies. I just pushed it to eprint: https://eprint.iacr.org/2022/1164\r\n(And I also implemented it: https://github.com/pornin/crrl/blob/471e15e5df1532395b1226f3b54370f458992225/src/ed25519.rs#L570)\r\nThis might be worth a mention in the draft, maybe?\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/crypto-panel/kEwszf9MDNmdgJDnuUFaIHmBYwc/",
      "createdAt": "2022-09-12T17:40:07Z",
      "updatedAt": "2022-09-26T20:17:41Z",
      "closedAt": "2022-09-26T20:17:41Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Dupe!",
          "createdAt": "2022-09-12T17:46:25Z",
          "updatedAt": "2022-09-12T17:46:25Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Not a dupe!",
          "createdAt": "2022-09-12T17:47:06Z",
          "updatedAt": "2022-09-12T17:47:06Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd be sure to highlight the application to Twisted Edwards curves, not curves in general. I recently started working with a non-prime order Weierstrass. While all curves with a cofactor != 1 in the spec have Twisted Edwards forms, making this unnecessary within this scope, I believe it'd be good to be clear.",
          "createdAt": "2022-09-12T20:57:28Z",
          "updatedAt": "2022-09-17T06:26:18Z"
        }
      ]
    },
    {
      "number": 270,
      "id": "I_kwDOEpUZs85RrPs5",
      "title": "Add Thomas's implementation to the FROST implementation list",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/270",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2022-09-12T17:41:09Z",
      "updatedAt": "2022-09-15T13:44:00Z",
      "closedAt": "2022-09-15T13:44:00Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #271 ",
          "createdAt": "2022-09-15T13:44:00Z",
          "updatedAt": "2022-09-15T13:44:00Z"
        }
      ]
    },
    {
      "number": 283,
      "id": "I_kwDOEpUZs85SP20o",
      "title": "Test vector for result of derive_lagrange_coefficient()",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/283",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "enhancement"
      ],
      "body": "One implementor expressed interest in having this to debug their implementation, this would be a nice-to-have, not a blocker.",
      "createdAt": "2022-09-20T19:24:12Z",
      "updatedAt": "2023-01-03T22:45:01Z",
      "closedAt": "2023-01-03T22:45:01Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This would be a good thing to add \ud83d\udc4d Maybe the enhancement could be an appendix that lists test vectors for each helper function?",
          "createdAt": "2022-09-21T13:09:34Z",
          "updatedAt": "2022-09-21T13:09:34Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly will you have time to do this? If not, let's close this.",
          "createdAt": "2022-12-27T12:46:57Z",
          "updatedAt": "2022-12-27T12:46:57Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing",
          "createdAt": "2023-01-03T22:45:01Z",
          "updatedAt": "2023-01-03T22:45:01Z"
        }
      ]
    },
    {
      "number": 284,
      "id": "I_kwDOEpUZs85STe_Y",
      "title": "Protocol participant names",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/284",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The draft previously used \"participant\" and \"signer\" inconsistently and interchangeably, and #282 unified them around \"signer.\" But @dconnolly points out that might be confusing, since they contribute a _share_ to the signature, and don't compute the entire signature themselves. What about \"co-signer\" as the name? ",
      "createdAt": "2022-09-21T12:20:05Z",
      "updatedAt": "2022-09-21T18:45:04Z",
      "closedAt": "2022-09-21T18:45:04Z",
      "comments": []
    },
    {
      "number": 304,
      "id": "I_kwDOEpUZs85TQFIQ",
      "title": "Raise an error if `SerializeElement` tries to serialize the identity Element",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/304",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "Once upon a time we contemplated allowing the identity Element to be serialized to in theory we could support ciphersuites like RedDSA that explicitly want all possible group Elements that can represent the full distribution including the Identity as verifying keys. This resulted in SerializeElement not rejecting identity Elements, but DeserializeElement does raise an error if the bytes do deserialize to the identity\r\n\r\nNow that we explicitly enforce that Identifer's, a restricted set of Scalars, can never /MUST NOT ever equal zero, we're kind of covered in general, and re-randomized 'forks' of this document that support the identity element can be created that do not affect the security / imply that an identifier can ever be zero and its commitment ever be the identity",
      "createdAt": "2022-10-04T19:08:36Z",
      "updatedAt": "2022-10-07T13:37:43Z",
      "closedAt": "2022-10-07T13:37:43Z",
      "comments": []
    },
    {
      "number": 312,
      "id": "I_kwDOEpUZs85XA-wh",
      "title": "RGLC review request",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/312",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@aldenml do you think you could review this document and send a message indicating support (or lack there of) to the CFRG mailing list? (Apologies for the format of this request, but I could not find your email address!)",
      "createdAt": "2022-11-22T13:28:49Z",
      "updatedAt": "2022-11-30T23:18:13Z",
      "closedAt": "2022-11-30T23:18:12Z",
      "comments": [
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @chris-wood, more than glad to do it, I will find some time today (my email: aldenml@gmail.com)",
          "createdAt": "2022-11-22T23:34:31Z",
          "updatedAt": "2022-11-22T23:34:31Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Lovely -- thank you! For your convenience, here is the thread to which you can reply: https://mailarchive.ietf.org/arch/msg/cfrg/SaPJ_cZ30plejbluZtcVYSHhjIc/",
          "createdAt": "2022-11-23T00:15:19Z",
          "updatedAt": "2022-11-23T00:15:19Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "cc @kayabaNerve, too!",
          "createdAt": "2022-11-23T00:15:51Z",
          "updatedAt": "2022-11-23T00:15:51Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've emailed cfrg-chairs my endorsement.\r\n\r\nWhile I reiterated #243 and #298*, I said the former is solely an available simplification and the latter is understandably not included. My only other comment was on how H2 *should* be application-bound, not ciphersuite bound, with the ack it's trivial to work around in practice and arguably not an issue accordingly. Solely a preference on layout.\r\n\r\nThe main reason I believe in standardization is for the test vectors, ensuring correct implementations can be built for FROST as a primitive. I also believe despite being a primitive, not covering items such as a wire protocol, it is extremely usable in the real world and I greatly appreciate it accordingly.\r\n\r\nThank you for requesting my participation in the review process and I wish you the best of luck :)\r\n\r\n*I do truly believe it should move forward regardless of the former, and definitely regardless of the latter. I'm just not a person to leave a review which I consider incomplete, nor glossing over topics. I found both personally sufficiently interesting.",
          "createdAt": "2022-11-23T03:52:36Z",
          "updatedAt": "2022-11-23T08:26:35Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood just to let you know that I sent a message yesterday (for support), but as of today, I still don't see it in the CFRG mailing list archives.",
          "createdAt": "2022-11-23T13:04:20Z",
          "updatedAt": "2022-11-23T13:04:20Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My review does not seem to have been published with the rest yet, likely because I emailed the chairs (I subscribed to batched emails and couldn't reply to the original message). Hopefully that's forwarded soon.",
          "createdAt": "2022-11-24T04:04:05Z",
          "updatedAt": "2022-11-24T04:04:05Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@aldenml your message doesn't appear in the queue of pending messages. What email address did you send it to? Would it be possible to subscribe and resend it? And yeah, @kayabaNerve, your message wouldn't appear on the list since it only went to the chairs.",
          "createdAt": "2022-11-25T13:51:09Z",
          "updatedAt": "2022-11-25T13:51:40Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood, yes, I will resend it.",
          "createdAt": "2022-11-25T14:16:34Z",
          "updatedAt": "2022-11-25T14:16:34Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood I expected them to forward it. If they won't, is there a way I can reply to the original email now (as I only have it in a batch) in order for it to be properly added to the list? Or is it simply a waiting game?\r\n\r\nIf they read it, I'm not sure it needs to be forwarded. Just want to do what I can :)",
          "createdAt": "2022-11-26T00:11:21Z",
          "updatedAt": "2022-11-26T00:11:21Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry for the delay @kayabaNerve. In order for the message to show up on the list it needs to be sent to the cfrg@irtf.org email address, not to the CFRG chairs. But don't worry about it. I think they received both your and @aldenml's message, so we should be all set. Thanks, both!",
          "createdAt": "2022-11-30T23:18:12Z",
          "updatedAt": "2022-11-30T23:18:12Z"
        }
      ]
    },
    {
      "number": 315,
      "id": "I_kwDOEpUZs85YNyt1",
      "title": "Review feedback from Paul Bottinelli ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/315",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "1.  Introduction\r\n\r\n\t* \"[RFC8032]\" is only referred to as such (namely, by reference to the RFC), and never as Edwards-Curve Digital Signature Algorithm (EdDSA), which could help readers. In comparison, the Ristretto specification states \"Curve25519 [RFC7748]\" when talking about \"[RFC7748]\" for the first time.\r\n\r\n2.  Conventions and Definitions\r\n\r\n\t* \"len(l): Outputs the length of input list l, e.g., len([1,2,3]) = 3).\" -> There's an extra closing parenthesis at the end. Also consider changing to \"len(l): Outputs the length of *the* list ...\" (i.e., dropping \"input\" and adding \"the\") for consistency with the other bullet points.\r\n\r\n3.1.  Prime-Order Group\r\n\r\n\t* \"element addition or scalar addition, depending on types of the\" -> \"element addition or scalar addition, depending on *the* type of the\"; The type being pluralized make it sounds like the operands may be of different types, in my opinion.\r\n\r\n\t* \"equivalent to the repeated application of the group operation B with\" -> \"equivalent to the repeated application of the group operation *on* B with\"\r\n\r\n\t* \"addition, negation, and equality comparisons can be efficiently\" -> either pluralize addition, negation, or change \"comparisons\" to \"comparison\".\r\n\r\n\t* Consider adding a comma after i.e. in \"(i.e. p)\" and \"(i.e.  I)\" for consistency with the rest of the document. Also, there's an extra whitespace in the latter.\r\n\r\n\t* \"ScalarMult(A, k): Output\" -> \"ScalarMult(A, k): Outputs\"\r\n\r\n\t* \"ScalarBaseMult(k): Output\" -> \"ScalarBaseMult(k): Outputs\"\r\n\r\n\t* \"raise an error if deserialization fails or A is the identity\" -> \"raise an error if deserialization fails or *if* A is the identity\"\r\n\r\n4.  Helper Functions\r\n\r\n\t* \"Signature binding Section 4.4, group commitment Section 4.5, and challenge computation Section 4.6.\" -> should these have their dedicated bullet points?\r\n\r\n\t* \"These sections describes these operations in more detail.\" -> \"describes\" should be \"describe\". Also, nitpicking, but the repetition of \"these\" could be avoided by writing \"The following sections describe\".\r\n\r\n4.1.  Nonce generation\r\n\r\n\t* Why are the Inputs \"- secret, a Scalar\" on a new line and preceded by a hyphen, while the Outputs are on the same line: \"Outputs: nonce, a Scalar\"?\r\n\t\tThis also applies to the other algorithms in that subsection, e.g., \"4.2.1.  Evaluation of a polynomial\". Consider making these uniform throughout the document.\r\n\r\n\r\n4.2.  Polynomial Operations\r\n\r\n\t* \"A polynomial of maximum degree t+1 is represented as a list of t coefficients\" shouldn't it be the reverse? Namely, \"A polynomial of maximum degree t is represented as a list of t+1 coefficients\". For example, a polynomial of degree 2 (quadratic) could be f(x) = x^2 + x + 1, which has 2 + 1 = 3 coefficients.\r\n\r\n4.3.  List Operations\r\n\t\r\n\t* \"list of participant commitments into a bytestring for use in the\" -> replace with \"byte string\" to be consistent with the rest of the document\r\n\r\n\t* In the function \"binding_factor_for_participant(binding_factor_list, identifier):\", is the requirement that \"This list MUST be sorted in ascending order by participant identifier.\" Is this really necessary for that particular algorithm?\r\n\r\n4.5.  Group Commitment Computation\r\n\r\n\t* \"binding_factor_list = [(i, binding_factor), ...], a list of (identifier, Scalar) tuples representing the binding factor Scalar for the given identifier. This list MUST be sorted in ascending order by identifier.\" -> again, it doesn't seem necessary for this specific list to be sorted.\r\n\r\n5.1.  Round One - Commitment\r\n\r\n\t* Just observing that now, Inputs and Outputs are consistent (single line and no hyphen since there's one I/O per line). I would suggest modifying some algorithms from Sec 4 to follow that approach, where applicable.\r\n\r\n5.2.  Round Two - Signature Share Generation\r\n\r\n\t* \"input messages are also required to also perform relevant\" -> repetition of \"also\", delete one.\r\n\r\n\t* \"identifier, Identifier i of the participant. Note identifier will never equal 0.\" Two comments on that line: \r\n\t\t1. \"Identifier\" does not seem to be capitalized previously, and \r\n\t\t2. \"Note identifier will never equal 0.\" is slightly unclear. Could this be replaced by one of the normative key words from RFC2119, such as \"identifier SHALL NOT equal 0\"?\r\n\r\n5.3.  Signature Share Verification and Aggregation\r\n\r\n\t* \"identifier, Identifier i of the participant. Note: identifier MUST never equal 0.\" similarly to the previous comment, \"Identifier\" should probably be lowercase. Also, the Note is slightly more formal then in 5.2.; consider making them the same.\r\n\t\r\n\t* \"generated in round one from the ith participant\" I am noticing now that \"ith\" is also sometimes spelled \"i-th\" in this document. I personally prefer the latter and would suggest performing a search and replace over the entire text.\r\n\t\r\n\t* \"commitment will be with respect to a different signing set than the the aggregated response.\" -> remove the superfluous \"the\".\r\n\r\n6.  Ciphersuites\r\n\r\n\t* \"The RECOMMENDED ciphersuite is (ristretto255, SHA-512) Section 6.2.\" Is there a word missing here, such as \"The RECOMMENDED ciphersuite is (ristretto255, SHA-512) *as described in* Section 6.2.\"\r\n\r\n\t* \"these functions are described for each the ciphersuites below.\" -> \"for each *of* the\"\r\n\r\n6.1.  FROST(Ed25519, SHA-512)\r\n\r\n\t* \"Order():\" -> Missing period at the end of that statement. This applies to all \"Order():\" descriptions. Note that this may be done on purpose to avoid confusion when copy/pasting the value, in which case this comment may be disregarded.\r\n\r\n\r\n6.4.  FROST(P-256, SHA-256)\r\n\r\n\t* \"yielding a 33 byte output.  Additionally, this function\" -> should \"33 byte\" be hyphenated (\"33-byte\")? \r\n\r\n\t* \"deserialize a 33 byte input string to a public key using the\" -> again, should \"33 bytes\" be hyphenated? I think most of the document is consistent otherwise. Consider performing a document-wide search and replace.\r\n\r\n\t* At the end of the \"DeserializeElement(buf):\" description, it says \"If these checks fail, deserialization returns an error.\" Interestingly, this is not specified in such details in other instances of \"DeserializeElement()\". For example, the previous instance states \"this function *validates* that the resulting element is not the group identity element and is in the prime-order subgroup\", but it does not say that the function should return an error. Similarly, for the different \"DeserializeScalar()\" functions, the phrasing \"This function can fail if the\" is used in all ciphersuite examples. Would it make sense to say that it *does* fail and returns an error?\r\n\r\n7.  Security Considerations\r\n\r\n\t* \"unforgeability assuming at most (MIN_PARTICIPANTS-1) corrupted\" why is \"MIN_PARTICIPANTS-1\" in parentheses?\r\n\r\n\t* \"Existential Unforgeability Under Chosen Message Attack (EUF-CMA) attacks,\" I think the second \"attacks\" could be dropped, but I would understand wanting to keep it.\r\n\r\n\t* \"Post quantum security.\" consider hyphenating \"Post-quantum\". \r\n\r\n7.4.  Input Message Hashing\r\n\r\n\t* \"security level commensurate with the security in inherent to the\" -> delete \"in\"\r\n\r\n\t* \"H(contextString \\|\\| \"pre-hash\" \\|\\| m).\" -> why are the \"|\" symbols escaped in this case?\r\n",
      "createdAt": "2022-12-06T19:38:34Z",
      "updatedAt": "2022-12-07T15:56:31Z",
      "closedAt": "2022-12-07T15:56:31Z",
      "comments": []
    },
    {
      "number": 316,
      "id": "I_kwDOEpUZs85YN0gY",
      "title": "Review feedback from Armando Faz",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/316",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Here are some comments:\r\n\r\n#1\r\n- we introduce separate domain-separated hashes\r\n+ we introduce domain-separated hashes\r\n\r\n#2\r\n- to Scalar elements of the prime-order group scalar field\r\n+ to Scalar elements of the prime-order group.\r\n\r\n#3\r\n- These sections describes these operations in more detail.\r\n+ These sections describe these operations in more detail.\r\n\r\nLike this one, there are a few other errors that can be easily catched\r\nby a spellchecker.\r\n\r\n#4\r\n- A polynomial of maximum degree t+1 is represented as a list of t coefficients\r\n+ A polynomial of maximum degree t is represented as a list of t+1 coefficients\r\n\r\n#5\r\nderive_lagrange_coefficient\r\nI think it is more accurate to name this function as\r\n\"lagrange_basis_at_0\"  since the Lagrange basis is defined as  l_i(x)\r\n= \\prod i\\neq j (x-x_j)/(x_i-x_j), which must be evaluated at 0.\r\n\r\n#6\r\nIn Section 5. (without reading the Appendix) it is not clear what is\r\nthe (mathematical) relation, if any, between the key shares (sk_i),\r\nand the signing key (sk).\r\n\r\n#7\r\nIs this statement true with respect to EdDSA as in RFC8032?\r\n\r\n\"FROST produces signatures that are indistinguishable from those\r\nproduced with a single participant using a signing key s with\r\ncorresponding public key PK, where s is a Scalar value and PK =\r\nG.ScalarBaseMult(s).\"\r\n\r\nLet\r\n  s0 = sign(m,s,pk) using RFC8032;\r\n  s1 = threshold_sign(m,s,pk) using FROST.\r\n\r\nany s1 can be distinguished as a FROST signature as is expected to be\r\ndifferent from s0 because FROST signing is not deterministic.\r\n\r\n#8\r\n- The nonce values produced by this function MUST NOT be reused in\r\nmore than one invocation of FROST, and it MUST be generated from a\r\nsource of secure randomness.\r\n+ The nonce values produced by this function MUST NOT be reused in\r\nmore than one invocation of FROST, and they MUST be generated from a\r\nsource of secure randomness.\r\n\r\n#9\r\n- Moreover, each participant MUST ensure that their identifier appears\r\nin commitment_list along with their commitment from the first round.\r\n+ Moreover, each participant MUST ensure that its identifier and the\r\ncommitments  (from the first round) appear in the commitment_list.\r\n\r\n- signing set than the the aggregated response\r\n+ signing set than the aggregated response\r\n\r\n#10\r\nThe alternative check [S]B = R + [k]A' is not safe or interoperable in practice.\r\n\r\nI understand why it is not interoperable, but why is it not safe? A\r\ncomment about these two restrictions is appreciated.\r\n\r\nAlso, unify name of variables in the verification equation: [S]B = R + [k]A'\r\n\r\n#11\r\nFor FROST(Ed448, SHAKE256) ciphersuite:\r\n\r\nSerializeScalar(s): Implemented by outputting the little-endian\r\n48-byte encoding of the Scalar value.\r\nDeserializeScalar(buf): Implemented by attempting to deserialize a\r\nScalar from a little-endian 48-byte string.\r\n\r\nScalars are 57-byte strings.\r\n\r\n#12\r\nFor FROST(Ed448, SHAKE256) ciphersuite:\r\nEd448 allows specifying a context string, and the FROST ciphersuite\r\nvanishes the context string. why?\r\nNote it is still possible to include the Ed448 context string in H2,\r\nso it makes this ciphersuite fully compatible with RFC8032.\r\n\r\n#13\r\n\"This includes checking that the coordinates of the resulting point\r\nare in the correct range, that the point is on the curve, and that the\r\npoint is not the point at infinity. Additionally, this function\r\nvalidates that the resulting element is not the group identity\r\nelement.\"\r\n\r\nIt looks like the second sentence is redundant.\r\n\r\n#14\r\nFor secp256r1:\r\npartial public-key validation as defined in section 5.6.2.3.4 of [KEYAGREEMENT].\r\n\r\nFor secp256k1:\r\npartial public-key validation as defined in section 3.2.2.1 of [SEC1].\r\n\r\nAre these validation methods different? If not, why make a distinction?\r\n\r\n#15\r\n- H(contextString \\|\\| \"pre-hash\" \\|\\| m)\r\n+ H(contextString || \"pre-hash\" || m)\r\n\r\n#16\r\n- create secret shares of s, denoted s_i for i = 0, ...,\r\nMAX_PARTICIPANTS, to be sent to all MAX_PARTICIPANTS participants.\r\n+ create secret shares of s, denoted s_i for i = 1, ...,\r\nMAX_PARTICIPANTS, to be sent to all MAX_PARTICIPANTS participants.\r\n\r\n#17\r\n...participants MUST abort if they do not have the same view of vss_commitment.\r\n\r\nIn practice, how this checking is performed (without adding a\r\ncommunication round)?\r\n\r\n#18\r\n- that any cooperating subset of MIN_PARTICIPANTS participants\r\n+ that any cooperating subset of at least MIN_PARTICIPANTS participants\r\n\r\n#19\r\n\"invalid parameters\", if MIN_PARTICIPANTS > MAX_PARTICIPANTS or if\r\nMIN_PARTICIPANTS is less than 2\r\n\r\nThis prevents splitting the secret between two entities, is this correct?\r\n\r\nAlso note that in the Test Vector Section\r\nMIN_PARTICIPANTS = 2\r\n\r\n#20\r\nSection 4.2.1 is only useful for App C. So it can be moved there.\r\n\r\n#21\r\n\"points, a set of t distinct points on a polynomial f\"\r\n\r\nNote that (1,2) != (1,3), these points are different, but they are an\r\ninvalid input to polynomial_interpolation function\r\n\r\n#22\r\nAdding references to Feldman and Shamir secret sharing.\r\n\r\n#23\r\nOutputs: 1 if sk_i is valid, and 0 otherwise\r\nBetter to return true/false?\r\n\r\n#24\r\nIn verify_signature_share, at which point the Coordinator learns the\r\nPK_i from participants?\r\n\r\n#25\r\nIn the VSS section:\r\n\"We now define how the Coordinator and participants can derive group\r\ninfo, which is an input into the FROST signing protocol.\"\r\n\r\nIf the group info is the input of the FROST protocol, then VSS is a dependency?\r\n\r\n#26\r\nAppendix D is equal to Section 4.3 of VOPRF. Should this section be\r\nreplaced by reference or by a verbatim copy of Sec 4.3?\r\n\r\nhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-voprf#section-4.3\r\n\r\n#27\r\n\r\nExponents do not render ok. (*we should fix this also in VOPRF draft)\r\n\r\np - 2<sup>b</sup>| < 2<sup>(b/2)</sup>,\r\n\r\nThe ASCII version looks ok:  | p - 2^b | < 2^(b/2)\r\n",
      "createdAt": "2022-12-06T19:42:14Z",
      "updatedAt": "2022-12-07T16:41:38Z",
      "closedAt": "2022-12-07T16:41:38Z",
      "comments": []
    },
    {
      "number": 317,
      "id": "I_kwDOEpUZs85YN1Az",
      "title": "Add extensions discussion",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/317",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @hdevalence:\r\n\r\nOne thing that could be nice to mention in the document would be pointers on robust schemes built on top of FROST, like ROAST. I don't think it makes sense to incorporate a specification of ROAST in the document -- since it would best be standardized on its own, in a separate document referencing this one -- but it would be helpful for readers to be aware that it exists.",
      "createdAt": "2022-12-06T19:43:22Z",
      "updatedAt": "2022-12-15T14:37:01Z",
      "closedAt": "2022-12-15T14:37:01Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #356",
          "createdAt": "2022-12-15T14:37:00Z",
          "updatedAt": "2022-12-15T14:37:00Z"
        }
      ]
    },
    {
      "number": 318,
      "id": "I_kwDOEpUZs85YN1jd",
      "title": "Feedback from Chris Patton",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/318",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Section 1: \"For select ciphersuites, the signatures produced by this draft are compatible with [RFC8032].\" Compatible in what sense? Can a signature be validated by a plain EdDSA verifier? Or do you mean the signatures look the same on the wire? I'd clarify this in the introduction.\r\n\r\nSection 3.2: nit: \"FROST requires the use of a cryptographically secure hash function, generically written as H, which functions effectively as a random oracle.\" I would reword this as \"... secure hash function, ..., which is modeled as a random oracle in current security proofs.\"\r\n\r\nSection 5:\r\n- \"Two-Round FROST Signing Protocol\": Throughout the draft you refer to the protocol as a variant of FROST. As an implementer, I think I would find it helpful if the protocol had a distinguished name. Something like \"FROST2\"? Alternatively, you could call your protocol \"FROST\" and say that it is a variant  of the protocol proposed in [FROST20].\r\n- editorial: \"FROST assumes that the Coordinator and the set of signer participants, are chosen externally to the protocol.\" Omit the comma.\r\n- commit() in Section 5.1: I might have called the output \"nonce\" the \"ephmeral_secret\" or something, to emphasize that it is secret (nonces generally aren't) and that it is used only once.\r\n\r\nSection 5.2: \"... and MUST use the nonce to generate at most one signature share\": I think a MUST NOT would better emphasize the requirement: \"... MUST NOT use the nonce for more than once\".\r\n\r\nSection 6:\r\nContext strings encode the draft version, e.g., \"\"FROST-ED25519-SHA512-v11\". Do you intend to revise these for RFC?\r\n\r\nSection 7:\r\nYou call out that the coordinator needs to be honest-but-curious. Something that's not made clear here --- this might be obvious to those who are deeper into threshold signatures than I am --- is whether the non-coordinator signers are allowed to act maliciously towards forging a signature.\r\n\r\nSection 7.4: Just, :thumbs_up:. I'm very glad FROST doesn't pre-hash, but it's helpful to provide some guidance for those who want to do this. One minor nit here: \"One possible example is to construct this pre-hash over message m as H(contextString \\|\\| \"pre-hash\" \\|\\| m)\": Instead of \"pre-hash\", I think we ought to recommend adding context here that identifies the higher-level application, e.g., \"my protocol\" instead of \"pre-hash\".\r\n\r\nEditorial: Many of the algorithm specs seem to be too long to fit into the column limit. Consider wrapping lines so that the reader doesn't have to scroll.",
      "createdAt": "2022-12-06T19:44:36Z",
      "updatedAt": "2022-12-07T15:44:12Z",
      "closedAt": "2022-12-07T15:44:12Z",
      "comments": []
    },
    {
      "number": 319,
      "id": "I_kwDOEpUZs85YWHgj",
      "title": "Fix Schnorr reference",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/319",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @real-or-random:\r\n\r\n> [Schnorr21]\r\n\r\nThis citation tag really looks like Schnorr wrote the referenced paper,\r\nI suggest to change it.",
      "createdAt": "2022-12-07T15:29:02Z",
      "updatedAt": "2022-12-15T14:42:12Z",
      "closedAt": "2022-12-15T14:42:12Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #357",
          "createdAt": "2022-12-15T14:42:12Z",
          "updatedAt": "2022-12-15T14:42:12Z"
        }
      ]
    },
    {
      "number": 320,
      "id": "I_kwDOEpUZs85YWH1I",
      "title": "Clarify nonce use limitation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/320",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @real-or-random:\r\n\r\n> The nonce values produced by this function MUST NOT be reused in more\r\nthan one invocation of FROST, and it MUST be generated from a source of\r\nsecure randomness.\r\n\r\nIt's not clear what an \"invocation\" is in a two-round protocol. Maybe\r\n\"more than one invocation of the second round algorithm\" or something\r\nalong these lines? Below you say \"and MUST use the nonce to generate at\r\nmost one signature share.\" -- this is very clear.\r\n\r\n> Each participant MUST delete the nonce and corresponding commitment\r\nafter this round completes\r\n\r\nIt's not entirely clear what \"completes\" means here. (One could for\r\nexample wrongly assume that the round does not \"complete\" before the\r\naggregator outputs a signature.)\r\n\r\nFrom @cjpatton:\r\n\r\nSection 5.2: \"... and MUST use the nonce to generate at most one signature share\": I think a MUST NOT would better emphasize the requirement: \"... MUST NOT use the nonce for more than once\".\r\n\r\nFrom @armfazh:\r\n\r\n\"The nonce values produced by this function MUST NOT be reused in more than one invocation of FROST, and it MUST be generated from a source of secure randomness.\" -> \"The nonce values produced by this function MUST NOT be reused in more than one invocation of FROST, and they MUST be generated from a source of secure randomness.\"",
      "createdAt": "2022-12-07T15:29:36Z",
      "updatedAt": "2022-12-15T14:36:36Z",
      "closedAt": "2022-12-15T14:36:36Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #358",
          "createdAt": "2022-12-15T14:36:35Z",
          "updatedAt": "2022-12-15T14:36:35Z"
        }
      ]
    },
    {
      "number": 321,
      "id": "I_kwDOEpUZs85YWICj",
      "title": "Multi-signature applicability",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/321",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @real-or-random:\r\n\r\nIt may make sense to mention that FROST can be used in the case\r\nMIN_PARTICIPANTS == MAX_PARTICIPANTS but in this special case of\r\nmultisignatures, other schemes (MuSig2, SpeedyMuSig) with nicer\r\nproperties (e.g., much simpler key generation) are available but out of\r\nscope of this document. I believe this could be a useful hint for\r\napplications that purely need an \"n-of-n\" solution. Of course, even for\r\nthese application, one may still come to the conclusion that FROST is\r\nthe way to go given that it's a RFC (assuming it makes it). \r\n\r\nFrom @armfazh:\r\n\r\n\"invalid parameters\", if MIN_PARTICIPANTS > MAX_PARTICIPANTS or if\r\nMIN_PARTICIPANTS is less than 2\r\n\r\nThis prevents splitting the secret between two entities, is this correct?\r\n\r\nAlso note that in the Test Vector Section\r\nMIN_PARTICIPANTS = 2\r\n\r\n---------\r\n\r\nWe should have a consistency story as to whether FROST can (or should) be used for multi-signatures, even when `t=n=2`.",
      "createdAt": "2022-12-07T15:29:58Z",
      "updatedAt": "2022-12-15T17:40:28Z",
      "closedAt": "2022-12-15T17:40:27Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "We generalize t to be 1 in #359. The discussion of whether to use multisignatures or threshold signatures is out of scope; t=n is a valid input to FROST. ",
          "createdAt": "2022-12-13T22:28:25Z",
          "updatedAt": "2022-12-13T22:28:25Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #359",
          "createdAt": "2022-12-15T17:40:27Z",
          "updatedAt": "2022-12-15T17:40:27Z"
        }
      ]
    },
    {
      "number": 322,
      "id": "I_kwDOEpUZs85YWMhR",
      "title": "Signature share verification step in the coordinator",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/322",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @real-or-random:\r\n\r\n> If any signature share fails to verify, i.e., if\r\nverify_signature_share returns False for any participant share, the\r\nCoordinator MUST abort the protocol for correctness reasons (this is\r\ntrue regardless of the size or makeup of the signing set selected by\r\nthe Coordinator).\r\n\r\nTo be honest, I'm not entirely sure why you require verification if the\r\nindividual signature shares. I assume this is to identify misbehaving\r\nparticipants because you also say \"However, in order to identify any\r\nparticipant which has misbehaved (resulting in the protocol aborting)\r\nto take actions such as excluding them from future signing operations\r\nverification.\" If this is the case, then this purpose should be\r\nclarified here. And then, it could make sense to mention the\r\noptimization that the coordinator can simply first build the final\r\nsignature and verify it. Only if it doesn't verify, the coordinator\r\nmust look at the shares.\r\n\r\nBy the way, it took me a while to convince myself that misbehaving\r\nparticipants cannot force the group commitment to be the identity\r\nelement (which typically couldn't be part of a valid signature even\r\nthough signature share verification would pass for all shares). This\r\ncan happen in the scheme in our MuSig2 BIP draft due to the fact that\r\nwe use the same binding factor for everyone (because we want commitment\r\naggregation). And then we need to be careful when we deal with the\r\nidentity element, and need some special casing, see the paragraph\r\nhttps://github.com/jonasnick/bips/blob/musig2/bip-musig2.mediawiki#Dealing_with_Infinity_in_Nonce_Aggregation\r\nif you're interested in the details. But this doesn't seem to be a\r\nproblem here in your draft now that you've switched to different\r\nbinding factors.\r\n",
      "createdAt": "2022-12-07T15:37:52Z",
      "updatedAt": "2022-12-21T19:29:09Z",
      "closedAt": "2022-12-21T19:29:08Z",
      "comments": []
    },
    {
      "number": 323,
      "id": "I_kwDOEpUZs85YWMqo",
      "title": "Remove duplicate check",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/323",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @real-or-random:\r\n\r\n> This includes checking that [...] that the point is not the point at\r\ninfinity. Additionally, this function validates that the resulting\r\nelement is not the group identity element.\r\n\r\nThese two checks are in fact the same check.\r\n\r\nFrom @armfazh:\r\n\r\n\"This includes checking that the coordinates of the resulting point\r\nare in the correct range, that the point is on the curve, and that the\r\npoint is not the point at infinity. Additionally, this function\r\nvalidates that the resulting element is not the group identity\r\nelement.\"\r\n\r\nIt looks like the second sentence is redundant.",
      "createdAt": "2022-12-07T15:38:11Z",
      "updatedAt": "2022-12-14T21:11:56Z",
      "closedAt": "2022-12-14T21:11:55Z",
      "comments": [
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "Ended up being fixed by https://github.com/cfrg/draft-irtf-cfrg-frost/pull/348/",
          "createdAt": "2022-12-14T17:35:47Z",
          "updatedAt": "2022-12-14T17:35:47Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @conradoplg ! ",
          "createdAt": "2022-12-14T21:11:55Z",
          "updatedAt": "2022-12-14T21:11:55Z"
        }
      ]
    },
    {
      "number": 324,
      "id": "I_kwDOEpUZs85YWNId",
      "title": "Clarify threat model and security properties",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/324",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @real-or-random:\r\n\r\n> Honest-but-curious coordinator. We assume an honest-but-curious\r\nCoordinator which, at the time of signing, does not perform a denial of\r\nservice attack. A denial of service would include any action which\r\neither prevents the protocol from completing or causing the resulting\r\nsignature to be invalid. Such actions for the latter include sending\r\ninconsistent values to participants, such as messages or the set of\r\nindividual commitments.\r\n\r\nTowards what (security) property do you assume this? In the next\r\nparagraph say \"Under this threat model, FROST aims to achieve signature\r\nunforgeability\". But unforgeability holds even if the coordinator is\r\nfully malicious. Or do you have this because it's required for\r\n\"Identifiable aborts\", i.e., the ability to identify misbehaving\r\nparticipants? (Here honest participants need to rely on what the\r\ncoordinators claimed were the messages of the other participants.)\r\n\r\nThe way I see it is that it's already true that any malicious\r\nparticipant can perform a DoS attack on signing run by not responding,\r\nso I think protection against DoS is anyway out of scope? (And as you\r\nsay further below, robustness is not a goal.) So I suggest to clarify\r\nthat the coordinator must be trusted to identify misbehaving\r\nparticipants correctly but assuming honest-but-curious is not necessary\r\nfor unforgeability.\r\n\r\n> the scheme remains secure against Existential Unforgeability Under\r\nChosen Message Attack (EUF-CMA) attacks, as defined in [BonehShoup],\r\nDefinition 13.2.\r\n\r\nI think a reference to a \"single-singer\" EUF-CMA definition is plain\r\nwrong for a threshold signature scheme. What would the definition even\r\nmean in this setting?\r\n\r\n> However, in the setting that a player attempts to split the view of\r\nall other players by sending disjoint values to a subset of players,\r\nthe signing operation will output an invalid signature. To avoid this\r\ndenial of service, implementations may wish to define a mechanism where\r\nmessages are authenticated, so that cheating players can be identified\r\nand excluded.\r\n\r\nIdentifying and excluding cheating players would require additional\r\nmeasures, e.g., you'll need terminating reliable broadcast\r\n(=consensus), and not just authentication, in order to agree who is\r\nmalicious and should be excluded. Or alternatively, you'd need\r\nsomething like ROAST to get robustness. But I think that all of this is\r\ntoo subtle to capture in one or two sentences. Since you anyway say\r\nthat robustness is not a goal, I suggest to drop this remark and leave\r\nrobustness out of scope.\r\n\r\nFrom @cjpatton:\r\n\r\nSection 7: You call out that the coordinator needs to be honest-but-curious. Something that's not made clear here --- this might be obvious to those who are deeper into threshold signatures than I am --- is whether the non-coordinator signers are allowed to act maliciously towards forging a signature.",
      "createdAt": "2022-12-07T15:39:07Z",
      "updatedAt": "2023-01-11T18:52:47Z",
      "closedAt": "2023-01-11T18:52:47Z",
      "comments": []
    },
    {
      "number": 325,
      "id": "I_kwDOEpUZs85YWNQi",
      "title": "Clarify message validity checks",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/325",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "From @real-or-random:\r\n\r\n>  Applications which require that participants not process arbitrary\r\ninput messages are also required to also perform relevant application-\r\nlayer input validation checks; see Section 7.5 for more details.\r\n \r\n(Duplicate \"also\"). And this could make it a bit more explicit that\r\nthese don't just include adherence to some formal checks (syntax etc)\r\nbut also could involve the actual content of the message / willingness\r\nto sign the message: For example, a cryptocurrency transaction must not\r\nonly be syntactically valid, it must also be *intended* by the\r\nparticipants. (The second example Section 7.5 is an example of that\r\nkind but when reading 7.5 as a whole, I again had the feeling that this\r\naspect could be emphasized.)",
      "createdAt": "2022-12-07T15:39:22Z",
      "updatedAt": "2022-12-13T20:20:14Z",
      "closedAt": "2022-12-13T20:20:14Z",
      "comments": []
    },
    {
      "number": 326,
      "id": "I_kwDOEpUZs85YWOCL",
      "title": "Clarify RFC8032 compatibility",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/326",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "From @cjpatton:\r\n\r\nSection 1: \"For select ciphersuites, the signatures produced by this draft are compatible with [RFC8032].\" Compatible in what sense? Can a signature be validated by a plain EdDSA verifier? Or do you mean the signatures look the same on the wire? I'd clarify this in the introduction.\r\n\r\n-----\r\n\r\nFrom @armfazh: Is this statement true with respect to EdDSA as in RFC8032?\r\n\r\n\"FROST produces signatures that are indistinguishable from those\r\nproduced with a single participant using a signing key s with\r\ncorresponding public key PK, where s is a Scalar value and PK =\r\nG.ScalarBaseMult(s).\"\r\n\r\nLet\r\n  s0 = sign(m,s,pk) using RFC8032;\r\n  s1 = threshold_sign(m,s,pk) using FROST.\r\n\r\nany s1 can be distinguished as a FROST signature as is expected to be\r\ndifferent from s0 because FROST signing is not deterministic.\r\n\r\nAlso from @armfazh:\r\n\r\nEd448 allows specifying a context string, and the FROST ciphersuite vanishes the context string. why? Note it is still possible to include the Ed448 context string in H2, so it makes this ciphersuite fully compatible with RFC8032.",
      "createdAt": "2022-12-07T15:40:57Z",
      "updatedAt": "2022-12-21T20:54:07Z",
      "closedAt": "2022-12-21T19:31:44Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> armfazh: Note it is still possible to include the Ed448 context string in H2, so it makes this ciphersuite fully compatible with RFC8032.\r\n\r\nThis was not covered in #352. I can propose changes to make my point clearer.\r\n\r\n",
          "createdAt": "2022-12-21T20:54:07Z",
          "updatedAt": "2022-12-21T20:54:07Z"
        }
      ]
    },
    {
      "number": 327,
      "id": "I_kwDOEpUZs85YWPMh",
      "title": "Naming the thing",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/327",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @cjpatton:\r\n\r\nSection 5:\r\n\r\n\"Two-Round FROST Signing Protocol\": Throughout the draft you refer to the protocol as a variant of FROST. As an implementer, I think I would find it helpful if the protocol had a distinguished name. Something like \"FROST2\"? Alternatively, you could call your protocol \"FROST\" and say that it is a variant of the protocol proposed in [FROST20].",
      "createdAt": "2022-12-07T15:43:14Z",
      "updatedAt": "2022-12-21T19:16:33Z",
      "closedAt": "2022-12-21T19:16:33Z",
      "comments": []
    },
    {
      "number": 328,
      "id": "I_kwDOEpUZs85YWPkw",
      "title": "Pre-hashing recommendation context string",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/328",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "From @cjpatton:\r\n\r\nSection 7.4: Just, :thumbs_up:. I'm very glad FROST doesn't pre-hash, but it's helpful to provide some guidance for those who want to do this. One minor nit here: \"One possible example is to construct this pre-hash over message m as H(contextString || \"pre-hash\" || m)\": Instead of \"pre-hash\", I think we ought to recommend adding context here that identifies the higher-level application, e.g., \"my protocol\" instead of \"pre-hash\".\r\n",
      "createdAt": "2022-12-07T15:43:58Z",
      "updatedAt": "2022-12-13T20:24:53Z",
      "closedAt": "2022-12-13T20:24:53Z",
      "comments": []
    },
    {
      "number": 329,
      "id": "I_kwDOEpUZs85YWPnu",
      "title": "RGLC editorial issues",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/329",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "From @cjpatton:\r\n\r\nSection 3.2: nit: \"FROST requires the use of a cryptographically secure hash function, generically written as H, which functions effectively as a random oracle.\" I would reword this as \"... secure hash function, ..., which is modeled as a random oracle in current security proofs.\"\r\n\r\neditorial: \"FROST assumes that the Coordinator and the set of signer participants, are chosen externally to the protocol.\" Omit the comma.\r\n\r\ncommit() in Section 5.1: I might have called the output \"nonce\" the \"ephmeral_secret\" or something, to emphasize that it is secret (nonces generally aren't) and that it is used only once.\r\n\r\nEditorial: Many of the algorithm specs seem to be too long to fit into the column limit. Consider wrapping lines so that the reader doesn't have to scroll.\r\n\r\n---------\r\n\r\nFrom Paul Bottinelli:\r\n\r\n1.  Introduction\r\n\r\n    * \"[RFC8032]\" is only referred to as such (namely, by reference to the RFC), and never as Edwards-Curve Digital Signature Algorithm (EdDSA), which could help readers. In comparison, the Ristretto specification states \"Curve25519 [RFC7748]\" when talking about \"[RFC7748]\" for the first time.\r\n\r\n2.  Conventions and Definitions\r\n\r\n    * \"len(l): Outputs the length of input list l, e.g., len([1,2,3]) = 3).\" -> There's an extra closing parenthesis at the end. Also consider changing to \"len(l): Outputs the length of *the* list ...\" (i.e., dropping \"input\" and adding \"the\") for consistency with the other bullet points.\r\n\r\n3.1.  Prime-Order Group\r\n\r\n    * \"element addition or scalar addition, depending on types of the\" -> \"element addition or scalar addition, depending on *the* type of the\"; The type being pluralized make it sounds like the operands may be of different types, in my opinion.\r\n\r\n    * \"equivalent to the repeated application of the group operation B with\" -> \"equivalent to the repeated application of the group operation *on* B with\"\r\n\r\n    * \"addition, negation, and equality comparisons can be efficiently\" -> either pluralize addition, negation, or change \"comparisons\" to \"comparison\".\r\n\r\n    * Consider adding a comma after i.e. in \"(i.e. p)\" and \"(i.e.  I)\" for consistency with the rest of the document. Also, there's an extra whitespace in the latter.\r\n\r\n    * \"ScalarMult(A, k): Output\" -> \"ScalarMult(A, k): Outputs\"\r\n\r\n    * \"ScalarBaseMult(k): Output\" -> \"ScalarBaseMult(k): Outputs\"\r\n\r\n    * \"raise an error if deserialization fails or A is the identity\" -> \"raise an error if deserialization fails or *if* A is the identity\"\r\n\r\n4.  Helper Functions\r\n\r\n    * \"Signature binding Section 4.4, group commitment Section 4.5, and challenge computation Section 4.6.\" -> should these have their dedicated bullet points?\r\n\r\n    * \"These sections describes these operations in more detail.\" -> \"describes\" should be \"describe\". Also, nitpicking, but the repetition of \"these\" could be avoided by writing \"The following sections describe\".\r\n\r\n4.3.  List Operations\r\n    \r\n    * \"list of participant commitments into a bytestring for use in the\" -> replace with \"byte string\" to be consistent with the rest of the document\r\n\r\n5.2.  Round Two - Signature Share Generation\r\n\r\n    * \"input messages are also required to also perform relevant\" -> repetition of \"also\", delete one.\r\n\r\n5.3.  Signature Share Verification and Aggregation\r\n    \r\n    * \"generated in round one from the ith participant\" I am noticing now that \"ith\" is also sometimes spelled \"i-th\" in this document. I personally prefer the latter and would suggest performing a search and replace over the entire text.\r\n    \r\n    * \"commitment will be with respect to a different signing set than the the aggregated response.\" -> remove the superfluous \"the\".\r\n\r\n6.  Ciphersuites\r\n\r\n    * \"The RECOMMENDED ciphersuite is (ristretto255, SHA-512) Section 6.2.\" Is there a word missing here, such as \"The RECOMMENDED ciphersuite is (ristretto255, SHA-512) *as described in* Section 6.2.\"\r\n\r\n    * \"these functions are described for each the ciphersuites below.\" -> \"for each *of* the\"\r\n\r\n7.  Security Considerations\r\n\r\n    * \"unforgeability assuming at most (MIN_PARTICIPANTS-1) corrupted\" why is \"MIN_PARTICIPANTS-1\" in parentheses?\r\n\r\n    * \"Existential Unforgeability Under Chosen Message Attack (EUF-CMA) attacks,\" I think the second \"attacks\" could be dropped, but I would understand wanting to keep it.\r\n\r\n    * \"Post quantum security.\" consider hyphenating \"Post-quantum\". \r\n\r\n7.4.  Input Message Hashing\r\n\r\n    * \"security level commensurate with the security in inherent to the\" -> delete \"in\"\r\n\r\n----------\r\n\r\nFrom @armfazh:\r\n\r\n- [  ] \"we introduce separate domain-separated hashes\" -> \"we introduce domain-separated hashes\"\r\n- [  ] \"to Scalar elements of the prime-order group scalar field\" -> \"to Scalar elements of the prime-order group.\"\r\n- [  ] \"These sections describes these operations in more detail.\" -> \"These sections describe these operations in more  detail.\"\r\n- [  ] \"create secret shares of s, denoted s_i for i = 0, ..., MAX_PARTICIPANTS, to be sent to all MAX_PARTICIPANTS participants.\"\r\n-> \"create secret shares of s, denoted s_i for i = 1, ..., MAX_PARTICIPANTS, to be sent to all MAX_PARTICIPANTS participants.\"\r\n- [  ] \"that any cooperating subset of MIN_PARTICIPANTS participants\" -> \"that any cooperating subset of at least MIN_PARTICIPANTS participants\"\r\n- [  ] \"signing set than the the aggregated response\" -> \" signing set than the aggregated response\"\r\n- [  ] \"Moreover, each participant MUST ensure that their identifier appears in commitment_list along with their commitment from the first round.\" -> \"Moreover, each participant MUST ensure that its identifier and the commitments  (from the first round) appear in the commitment_list.\"\r\n- [  ] Adding references to Feldman and Shamir secret sharing.",
      "createdAt": "2022-12-07T15:44:04Z",
      "updatedAt": "2023-01-06T13:10:37Z",
      "closedAt": "2023-01-06T13:10:37Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to tackle this last, after all other issues are resolved, to minimize possible conflicts.",
          "createdAt": "2022-12-15T00:17:05Z",
          "updatedAt": "2022-12-15T00:17:11Z"
        }
      ]
    },
    {
      "number": 330,
      "id": "I_kwDOEpUZs85YWS6o",
      "title": "Consistent pseudocode notation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/330",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "From Paul:\r\n\r\n4.1.  Nonce generation\r\n\r\n    * Why are the Inputs \"- secret, a Scalar\" on a new line and preceded by a hyphen, while the Outputs are on the same line: \"Outputs: nonce, a Scalar\"?\r\n        This also applies to the other algorithms in that subsection, e.g., \"4.2.1.  Evaluation of a polynomial\". Consider making these uniform throughout the document.\r\n\r\n5.1.  Round One - Commitment\r\n\r\n    * Just observing that now, Inputs and Outputs are consistent (single line and no hyphen since there's one I/O per line). I would suggest modifying some algorithms from Sec 4 to follow that approach, where applicable.\r\n\r\nFrom @armfazh:\r\n\r\n> Outputs: 1 if sk_i is valid, and 0 otherwise\r\nBetter to return true/false?",
      "createdAt": "2022-12-07T15:50:18Z",
      "updatedAt": "2022-12-22T19:45:01Z",
      "closedAt": "2022-12-22T19:45:01Z",
      "comments": []
    },
    {
      "number": 331,
      "id": "I_kwDOEpUZs85YWTKQ",
      "title": "Polynomial representation clarification",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/331",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "conradoplg"
      ],
      "labels": [],
      "body": "From Paul:\r\n\r\n4.2.  Polynomial Operations\r\n\r\n    * \"A polynomial of maximum degree t+1 is represented as a list of t coefficients\" shouldn't it be the reverse? Namely, \"A polynomial of maximum degree t is represented as a list of t+1 coefficients\". For example, a polynomial of degree 2 (quadratic) could be f(x) = x^2 + x + 1, which has 2 + 1 = 3 coefficients.\r\n\r\nFrom @armfazh:\r\n\r\n\"A polynomial of maximum degree t+1 is represented as a list of t coefficients\" -> \"A polynomial of maximum degree t is represented as a list of t+1 coefficients\"\r\n\r\nWe should probably just include an example to be maximally clear.",
      "createdAt": "2022-12-07T15:50:44Z",
      "updatedAt": "2022-12-13T19:14:42Z",
      "closedAt": "2022-12-13T19:14:42Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Assigning @conradoplg ",
          "createdAt": "2022-12-09T23:53:21Z",
          "updatedAt": "2022-12-09T23:53:21Z"
        }
      ]
    },
    {
      "number": 332,
      "id": "I_kwDOEpUZs85YWTs4",
      "title": "Sorting requirements",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/332",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "conradoplg"
      ],
      "labels": [],
      "body": "From Paul:\r\n\r\n4.3.  List Operations\r\n\r\n    * In the function \"binding_factor_for_participant(binding_factor_list, identifier):\", is the requirement that \"This list MUST be sorted in ascending order by participant identifier.\" Is this really necessary for that particular algorithm?\r\n\r\n4.5.  Group Commitment Computation\r\n\r\n    * \"binding_factor_list = [(i, binding_factor), ...], a list of (identifier, Scalar) tuples representing the binding factor Scalar for the given identifier. This list MUST be sorted in ascending order by identifier.\" -> again, it doesn't seem necessary for this specific list to be sorted.\r\n\r\nWe should explain why these things need to be sorted.",
      "createdAt": "2022-12-07T15:51:50Z",
      "updatedAt": "2022-12-13T19:11:45Z",
      "closedAt": "2022-12-13T19:11:45Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Assigning to @conradoplg ",
          "createdAt": "2022-12-09T23:40:41Z",
          "updatedAt": "2022-12-09T23:40:41Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "They don't actually need to be sorted in these functions. The only justification I can see is that the list needs to be sorted to being used elsewhere so there is no reason to not pass a sorted list, but it's still not a requirement.\r\n\r\nI'm considering these options:\r\n\r\n- Remove the sorting requirement in these functions\r\n- Change to SHOULD\r\n- Do nothing\r\n\r\nI went with the first one in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/349 but feel free to disagree and I'll change the PR.",
          "createdAt": "2022-12-12T18:14:33Z",
          "updatedAt": "2022-12-12T18:14:33Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Dropping the requirement seems best. ",
          "createdAt": "2022-12-13T19:11:11Z",
          "updatedAt": "2022-12-13T19:11:11Z"
        }
      ]
    },
    {
      "number": 333,
      "id": "I_kwDOEpUZs85YWUf7",
      "title": "Zero identifier clarification",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/333",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "From Paul:\r\n\r\n5.2.  Round Two - Signature Share Generation\r\n\r\n    * \"identifier, Identifier i of the participant. Note identifier will never equal 0.\" Two comments on that line: \r\n        1. \"Identifier\" does not seem to be capitalized previously, and \r\n        2. \"Note identifier will never equal 0.\" is slightly unclear. Could this be replaced by one of the normative key words from RFC2119, such as \"identifier SHALL NOT equal 0\"?\r\n\r\n5.3.  Signature Share Verification and Aggregation\r\n\r\n    * \"identifier, Identifier i of the participant. Note: identifier MUST never equal 0.\" similarly to the previous comment, \"Identifier\" should probably be lowercase. Also, the Note is slightly more formal then in 5.2.; consider making them the same.",
      "createdAt": "2022-12-07T15:53:15Z",
      "updatedAt": "2022-12-21T19:20:52Z",
      "closedAt": "2022-12-21T19:20:52Z",
      "comments": []
    },
    {
      "number": 334,
      "id": "I_kwDOEpUZs85YWVHn",
      "title": "Ciphersuite edits and clarifications",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/334",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "conradoplg"
      ],
      "labels": [],
      "body": "From Paul:\r\n\r\n6.1.  FROST(Ed25519, SHA-512)\r\n\r\n    * \"Order():\" -> Missing period at the end of that statement. This applies to all \"Order():\" descriptions. Note that this may be done on purpose to avoid confusion when copy/pasting the value, in which case this comment may be disregarded.\r\n\r\n\r\n6.4.  FROST(P-256, SHA-256)\r\n\r\n    * \"yielding a 33 byte output.  Additionally, this function\" -> should \"33 byte\" be hyphenated (\"33-byte\")? \r\n\r\n    * \"deserialize a 33 byte input string to a public key using the\" -> again, should \"33 bytes\" be hyphenated? I think most of the document is consistent otherwise. Consider performing a document-wide search and replace.\r\n\r\n    * At the end of the \"DeserializeElement(buf):\" description, it says \"If these checks fail, deserialization returns an error.\" Interestingly, this is not specified in such details in other instances of \"DeserializeElement()\". For example, the previous instance states \"this function *validates* that the resulting element is not the group identity element and is in the prime-order subgroup\", but it does not say that the function should return an error. Similarly, for the different \"DeserializeScalar()\" functions, the phrasing \"This function can fail if the\" is used in all ciphersuite examples. Would it make sense to say that it *does* fail and returns an error?",
      "createdAt": "2022-12-07T15:54:19Z",
      "updatedAt": "2022-12-15T17:45:06Z",
      "closedAt": "2022-12-15T17:45:06Z",
      "comments": []
    },
    {
      "number": 335,
      "id": "I_kwDOEpUZs85YWcU4",
      "title": "derive_lagrange_coefficient name",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/335",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @armfazh:\r\n\r\n> derive_lagrange_coefficient\r\nI think it is more accurate to name this function as\r\n\"lagrange_basis_at_0\"  since the Lagrange basis is defined as  l_i(x)\r\n= \\prod i\\neq j (x-x_j)/(x_i-x_j), which must be evaluated at 0.",
      "createdAt": "2022-12-07T16:06:52Z",
      "updatedAt": "2022-12-21T19:16:05Z",
      "closedAt": "2022-12-21T19:16:05Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I initially merged this change, but in hindsight, I don't think this name is better. The current name matches that which is in the paper. However, as part of #341, I think we can just simplify things and pick a name that doesn't use the word \"Lagrange\" at all. Stay tuned.",
          "createdAt": "2022-12-20T12:20:30Z",
          "updatedAt": "2022-12-20T12:20:30Z"
        }
      ]
    },
    {
      "number": 336,
      "id": "I_kwDOEpUZs85YWcp5",
      "title": "Key share contents",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/336",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @armfazh\r\n\r\n> In Section 5. (without reading the Appendix) it is not clear what is the (mathematical) relation, if any, between the key shares (sk_i), and the signing key (sk).",
      "createdAt": "2022-12-07T16:07:30Z",
      "updatedAt": "2022-12-21T19:16:23Z",
      "closedAt": "2022-12-21T19:16:23Z",
      "comments": []
    },
    {
      "number": 337,
      "id": "I_kwDOEpUZs85YWeNu",
      "title": "Verification safety clarification",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/337",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "conradoplg"
      ],
      "labels": [],
      "body": "From @armfazh:\r\n\r\n> The alternative check [S]B = R + [k]A' is not safe or interoperable in practice.\r\n\r\nI understand why it is not interoperable, but why is it not safe? A\r\ncomment about these two restrictions is appreciated.\r\n\r\nAlso, unify name of variables in the verification equation: [S]B = R + [k]A'",
      "createdAt": "2022-12-07T16:10:36Z",
      "updatedAt": "2022-12-21T19:21:53Z",
      "closedAt": "2022-12-21T19:21:53Z",
      "comments": [
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "Good question, I've wondered about it myself. Is that because of the inconsistency between single and batched verification that it introduces? https://eprint.iacr.org/2020/1244.pdf\r\n\r\nAlso I don't understand what is being requested in\r\n\r\n> Also, unify name of variables in the verification equation: [S]B = R + [k]A'\r\n\r\nunify with what?",
          "createdAt": "2022-12-14T17:57:46Z",
          "updatedAt": "2022-12-14T17:57:46Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In the verification equation:\r\n`[S]B = R + [k]A'` \r\nthese variable names are from RFC8032, and I suggest to use the variable names used in FROST draft. \r\ne.g. Frost uses signature = (R,z) while RFC-8032 uses (R,S). \r\nand A' the result of  G.Deserialize \r\n",
          "createdAt": "2022-12-14T18:58:39Z",
          "updatedAt": "2022-12-14T18:58:39Z"
        }
      ]
    },
    {
      "number": 338,
      "id": "I_kwDOEpUZs85YWeqi",
      "title": "Ed448 scalar size",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/338",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @armfazh:\r\n\r\nFor FROST(Ed448, SHAKE256) ciphersuite:\r\n\r\nSerializeScalar(s): Implemented by outputting the little-endian\r\n48-byte encoding of the Scalar value.\r\nDeserializeScalar(buf): Implemented by attempting to deserialize a\r\nScalar from a little-endian 48-byte string.\r\n\r\nScalars are 57-byte strings.",
      "createdAt": "2022-12-07T16:11:28Z",
      "updatedAt": "2022-12-09T23:08:15Z",
      "closedAt": "2022-12-09T23:08:15Z",
      "comments": []
    },
    {
      "number": 339,
      "id": "I_kwDOEpUZs85YWkam",
      "title": "secp256r1 and secp256k1 validation reference",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/339",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "conradoplg"
      ],
      "labels": [],
      "body": "From @armfazh:\r\n\r\nFor secp256r1:\r\npartial public-key validation as defined in section 5.6.2.3.4 of [KEYAGREEMENT].\r\n\r\nFor secp256k1:\r\npartial public-key validation as defined in section 3.2.2.1 of [SEC1].\r\n\r\nAre these validation methods different? If not, why make a distinction?",
      "createdAt": "2022-12-07T16:22:21Z",
      "updatedAt": "2022-12-13T19:10:36Z",
      "closedAt": "2022-12-13T19:10:36Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Assigning to @conradoplg ",
          "createdAt": "2022-12-09T23:39:10Z",
          "updatedAt": "2022-12-09T23:39:10Z"
        }
      ]
    },
    {
      "number": 340,
      "id": "I_kwDOEpUZs85YWpWb",
      "title": "Lagrange input checks",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/340",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "conradoplg"
      ],
      "labels": [],
      "body": "From @armfazh:\r\n\r\n> \"points, a set of t distinct points on a polynomial f\"\r\n\r\nNote that (1,2) != (1,3), these points are different, but they are an\r\ninvalid input to polynomial_interpolation function",
      "createdAt": "2022-12-07T16:32:31Z",
      "updatedAt": "2022-12-15T17:45:25Z",
      "closedAt": "2022-12-15T17:45:25Z",
      "comments": [
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "Not sure about this, `derive_lagrange_coefficient` raises an error if that happens, so `polynomial_interpolation` doesn't need to enforce that.\r\n\r\nI did the obvious thing in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/368 but by the same argument we would need to change `secret_share_combine` too and any other function that calls another function that can raise an error",
          "createdAt": "2022-12-14T18:41:44Z",
          "updatedAt": "2022-12-14T18:42:05Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How about this?\r\n\r\n```diff\r\n-  - points, a set of t points with distinct x coordinates on a polynomial f,\r\n-    each a tuple of two Scalar values representing the x and y coordinates\r\n+  - points, a set of t points (x,y) with distinct x coordinates on a polynomial f,\r\n+    each coordinate is a Scalar value.\r\n```",
          "createdAt": "2022-12-14T19:02:48Z",
          "updatedAt": "2022-12-14T19:02:48Z"
        }
      ]
    },
    {
      "number": 341,
      "id": "I_kwDOEpUZs85YWpjK",
      "title": "Relocate Section 4.2.1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/341",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @armfazh: Section 4.2.1 is only useful for App C. So it can be moved there.",
      "createdAt": "2022-12-07T16:32:58Z",
      "updatedAt": "2022-12-21T19:16:05Z",
      "closedAt": "2022-12-21T19:16:05Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "I looked at moving it to the appendix, but I think it makes more logical sense being grouped with other polynomial functions. It makes the flow of the document better to be in 4.2.1, so my preference is to keep it there. \r\n\r\n@chris-wood let me know if you disagree.",
          "createdAt": "2022-12-14T16:34:32Z",
          "updatedAt": "2022-12-14T16:34:32Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with Armando. The procedure is not used in the main document, so it doesn't belong there. Let's move it to the appendix. ",
          "createdAt": "2022-12-20T11:56:32Z",
          "updatedAt": "2022-12-20T11:56:32Z"
        }
      ]
    },
    {
      "number": 342,
      "id": "I_kwDOEpUZs85YWroz",
      "title": "VSS implementation details",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/342",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @armfazh:\r\n\r\n> ...participants MUST abort if they do not have the same view of vss_commitment.\r\n\r\nIn practice, how this checking is performed (without adding a\r\ncommunication round)?\r\n\r\n> In the VSS section:\r\n\"We now define how the Coordinator and participants can derive group\r\ninfo, which is an input into the FROST signing protocol.\"\r\n\r\nIf the group info is the input of the FROST protocol, then VSS is a dependency?",
      "createdAt": "2022-12-07T16:37:30Z",
      "updatedAt": "2022-12-15T14:36:12Z",
      "closedAt": "2022-12-15T14:36:12Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh The draft does not have a dependency on VSS; the group info is simply a set of public keys for the group and each participant. These could be derived via the VSS or a DKG (which under the hood, yes, does use VSS). But key generation is out of scope for this document; we simply require the relation of Shamir secret sharing between secret key shares and the secret committed to by the group public key.",
          "createdAt": "2022-12-14T16:59:07Z",
          "updatedAt": "2022-12-14T16:59:07Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's fine. Then, such a relation should be explicitly stated in the document. I pointed this in other comment.\r\n\r\n",
          "createdAt": "2022-12-14T18:50:34Z",
          "updatedAt": "2022-12-14T18:50:34Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #366",
          "createdAt": "2022-12-15T14:36:12Z",
          "updatedAt": "2022-12-15T14:36:12Z"
        }
      ]
    },
    {
      "number": 343,
      "id": "I_kwDOEpUZs85YWsMA",
      "title": "Consider repurposing scalar generation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/343",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @armfazh:\r\n\r\nAppendix D is equal to Section 4.3 of VOPRF. Should this section be\r\nreplaced by reference or by a verbatim copy of Sec 4.3?\r\n\r\nhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-voprf#section-4.3",
      "createdAt": "2022-12-07T16:38:47Z",
      "updatedAt": "2022-12-13T21:38:35Z",
      "closedAt": "2022-12-13T19:19:23Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The FROST section came first =) I recommend we do not make this change. I think it's simpler better to keep the document self-contained when possible.",
          "createdAt": "2022-12-07T19:35:09Z",
          "updatedAt": "2022-12-07T19:35:09Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed. Ok if I close @chris-wood ?",
          "createdAt": "2022-12-07T21:22:52Z",
          "updatedAt": "2022-12-07T21:22:52Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh I'm going to close this without a change to FROST. It's an unnecessary dependency that we'd be introducing without much benefit. ",
          "createdAt": "2022-12-13T19:19:23Z",
          "updatedAt": "2022-12-13T19:19:23Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "sounds good.",
          "createdAt": "2022-12-13T21:38:35Z",
          "updatedAt": "2022-12-13T21:38:35Z"
        }
      ]
    },
    {
      "number": 344,
      "id": "I_kwDOEpUZs85YWs72",
      "title": "Clarify coordinator inputs",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/344",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @armfazh:\r\n\r\nIn verify_signature_share, at which point the Coordinator learns the\r\nPK_i from participants?\r\n\r\n------\r\n\r\nThe coordinator gets these as input (part of group info), but this doesn't seem to be clear enough. Let's make it more clear.",
      "createdAt": "2022-12-07T16:40:31Z",
      "updatedAt": "2022-12-27T12:23:20Z",
      "closedAt": "2022-12-27T12:23:20Z",
      "comments": []
    },
    {
      "number": 345,
      "id": "I_kwDOEpUZs85YWtVW",
      "title": "Exponential math rendering",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/345",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "From @armfazh:\r\n\r\nExponents do not render ok. (*we should fix this also in VOPRF draft)\r\n\r\np - 2<sup>b</sup>| < 2<sup>(b/2)</sup>,\r\n\r\nThe ASCII version looks ok:  | p - 2^b | < 2^(b/2)\r\n",
      "createdAt": "2022-12-07T16:41:21Z",
      "updatedAt": "2022-12-20T21:17:53Z",
      "closedAt": "2022-12-20T21:17:53Z",
      "comments": []
    },
    {
      "number": 386,
      "id": "I_kwDOEpUZs85al30y",
      "title": "About participants",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/386",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "The identifier is a non-zero scalar to be smaller than MAX_PARTICIPATNS, and MAX_PARTICIPATNS is a positive integer smaller than the group order. So `1 <= id <= max`, and we have `min <= num <= max`.\r\n\r\n`def secret_key_shares` tests if MIN_PARTICIPANTS is < 2, so it can't be 1, contrary to the previous definition.\r\n```\r\nif MIN_PARTICIPANTS < 2:\r\n      raise \"invalid parameters\"\r\n```\r\n\r\nSome functions verify these values, while others don't. E.g.\r\n```\r\ndef trusted_dealer_keygen(secret_key, MAX_PARTICIPANTS, MIN_PARTICIPANTS):\r\n    # Generate random coefficients for the polynomial\r\n    coefficients = []\r\n    for i in range(0, MIN_PARTICIPANTS - 1):\r\n      coefficients.append(G.RandomScalar())\r\n\r\n```\r\nIf MIN_PARTICIPANTS = 1, we don't get the polynomial.\r\n\r\nMaybe MIN_PARTICIPANTS should be defined as >= 2.\r\n\r\nAlso, the `Identifier` notion is defined after it's evoked in function definitions.\r\n\r\ncc @chris-wood ",
      "createdAt": "2023-01-05T01:47:25Z",
      "updatedAt": "2023-01-19T01:39:04Z",
      "closedAt": "2023-01-19T01:39:04Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> If MIN_PARTICIPANTS = 1, we don't get the polynomial. Maybe MIN_PARTICIPANTS should be defined as >= 2.\r\n\r\nCan we just remove `MIN_PARTICIPANTS` from `secret_key_shard`? It's not used and doesn't need to be used.\r\n\r\n> Also, the Identifier notion is defined after it's evoked in function definitions.\r\n\r\nWe don't have a proper `Identifier` type, so I'm not sure what this means. We say everywhere that identifiers are NonZeroScalars. ",
          "createdAt": "2023-01-11T19:04:12Z",
          "updatedAt": "2023-01-11T19:04:12Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm fine removing `MIN_PARTICIPANTS` from `secret_key_shard`. If t=1, then the polynomial is just a constant function, which is consistent with the result of the document. ",
          "createdAt": "2023-01-11T21:01:42Z",
          "updatedAt": "2023-01-11T21:01:42Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this was resolved by #395 ",
          "createdAt": "2023-01-19T01:39:03Z",
          "updatedAt": "2023-01-19T01:39:03Z"
        }
      ]
    },
    {
      "number": 387,
      "id": "I_kwDOEpUZs85al4mX",
      "title": "About Group Info",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/387",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "`verify_signature_share` states `\"Recall that the Coordinator is configured with \"group info\" which contains the group public key PK and public keys PK_i for each participant\"` and then proceeds to have the group public key as a function argument, which can be confusing.\r\n\r\nAlso, the participants' public keys in the group info are never used in the document (but are in the reference implementation).\r\n\r\nI'm not sure what I'm suggesting, I think this might benefit from some clarification.\r\n\r\ncc @chris-wood ",
      "createdAt": "2023-01-05T01:51:06Z",
      "updatedAt": "2023-01-17T21:22:36Z",
      "closedAt": "2023-01-17T21:22:36Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure I follow- the participant public keys are used in `verify_signature_share`. \r\n\r\nIf you have suggestions to make the description of `verify_signature_share` less confusing, that would be helpful. ",
          "createdAt": "2023-01-06T17:46:51Z",
          "updatedAt": "2023-01-06T17:46:51Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "As an implementer it can be confusing to distinguish which arguments come from other participants and which come from information previously stored. That statement reminds that the arguments `group_public_key` and `PK_i` are information previously stored after key generation. As Chelsea mentioned, the participants's public key are indeed used in the document, precisely the `PK_i` in `verify_signature_share`.\r\n\r\n",
          "createdAt": "2023-01-11T19:10:25Z",
          "updatedAt": "2023-01-11T19:10:25Z"
        }
      ]
    },
    {
      "number": 388,
      "id": "I_kwDOEpUZs85al6eL",
      "title": "Requirement about constant time",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/388",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "In the document, only `DeserializeScalar` is expected to execute in constant time (note that `MUST` has not been used).\r\n\r\nIt looks like the other algorithms are all constant time, should it be mentioned that this is a desired property that MUST persist?\r\n\r\ncc @chris-wood ",
      "createdAt": "2023-01-05T01:57:03Z",
      "updatedAt": "2023-01-19T20:43:10Z",
      "closedAt": "2023-01-19T20:43:10Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The requirement for `DeserializeScalar` to run in constant time is only necessary if one uses rejection sampling for producing random scalars. I don't think any other algorithm needs to be constant time. @dconnolly, what's your take here?",
          "createdAt": "2023-01-11T18:54:29Z",
          "updatedAt": "2023-01-11T18:54:29Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> The requirement for `DeserializeScalar` to run in constant time is only necessary if one uses rejection sampling for producing random scalars. I don't think any other algorithm needs to be constant time. @dconnolly, what's your take here?\r\n\r\nLooking over all Scalar ops, we also process the secret share as part of [`nonce_generate()`](https://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#nonce-generation-dep-nonces) and pass it to `G.SerializeScalar(secret)`, so this may need to be constant-time as well.",
          "createdAt": "2023-01-12T03:02:05Z",
          "updatedAt": "2023-01-12T03:02:22Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> > The requirement for `DeserializeScalar` to run in constant time is only necessary if one uses rejection sampling for producing random scalars. I don't think any other algorithm needs to be constant time. @dconnolly, what's your take here?\r\n> \r\n> Looking over all Scalar ops, we also process the secret share as part of [`nonce_generate()`](https://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#nonce-generation-dep-nonces) and pass it to `G.SerializeScalar(secret)`, so this may need to be constant-time as well.\r\n\r\nAnd if that holds then `G.ScalarMult()` and `G.ScalarBaseMult()` should be constant time too to avoid leaking nonces in particular",
          "createdAt": "2023-01-12T03:57:09Z",
          "updatedAt": "2023-01-12T03:57:09Z"
        }
      ]
    },
    {
      "number": 401,
      "id": "I_kwDOEpUZs85f1w0E",
      "title": "Define Scalar Multiplication and Add Modular Reduction",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/401",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "Section 5.2- The output of the sign function is a Scalar, but one that is potentially larger than the maximum buffer size of SerializeScalar due to the multiplication. The * operator on two scalars is also not defined, adding to the confusion somewhat.\r\n\r\nCan this algorithm be re-written to clarify the points above? There seem to be general assumptions about the maximum integer size for scalars that are not addressed in the instantiations of DeserializeScalar described in the ciphersuites. Is there a modular reduction by the group order missing somewhere?",
      "createdAt": "2023-03-03T04:38:55Z",
      "updatedAt": "2023-03-07T19:11:41Z",
      "closedAt": "2023-03-07T19:11:40Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think we need to do anything here. By definition, Scalar types can always be encoded. Also, we do define scalar multiplication using `*` in Section 3.1.",
          "createdAt": "2023-03-07T19:11:40Z",
          "updatedAt": "2023-03-07T19:11:40Z"
        }
      ]
    },
    {
      "number": 402,
      "id": "I_kwDOEpUZs85f1w6w",
      "title": "Explicitly define Serialization/Deserialization Assumptions Between Algorithms",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/402",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "Section 5.2: It's also not stated that the unserialized Scalar is sent to. Is the implementer meant to serialize this before sending? In the following section it's stated that the coordinator MUST validate the signature share with DeserializeScalar, so serialization seems implied.",
      "createdAt": "2023-03-03T04:39:35Z",
      "updatedAt": "2023-03-14T19:51:34Z",
      "closedAt": "2023-03-14T19:51:34Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I would address this by stating in the overview that all message sent over the wire are encoded appropriately, e.g., that Scalars and Elements are encoded using their respective functions. I would add it to this paragraph:\r\n\r\n```\r\nFROST assumes that all inputs to each round, especially those of which are received over the network, are validated before use. In particular, this means that any value of type Element or Scalar is deserialized using DeserializeElement and DeserializeScalar, respectively, as these functions perform the necessary input validation steps.\r\n```",
          "createdAt": "2023-03-07T19:19:32Z",
          "updatedAt": "2023-03-07T19:19:32Z"
        }
      ]
    },
    {
      "number": 403,
      "id": "I_kwDOEpUZs85f1xbc",
      "title": "Move to Per-Ciphersuite Encoding",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/403",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "Section 5.3: This MUST requirement to use the TLS framing format for the signature seems out of place. None of the other objects or lists use this framing and at no point is the deserialization of this object described. Formatting requirements are typically for interoperability, what's the justification for this requirement here? Would this be better suited for per-ciphersuites definitions in the appendix for compatibility with other RFCs?",
      "createdAt": "2023-03-03T04:42:05Z",
      "updatedAt": "2023-05-08T20:18:29Z",
      "closedAt": "2023-05-08T20:18:29Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems like a reasonable thing to do. In particular, here's how I would do it:\r\n\r\n1. Define a new section somewhere (maybe as first thing in the appendix?) that describes the current encoding format.\r\n2. In each ciphersuite, point to this reference and say \"Signatures are according using the format described in {{section}}\"",
          "createdAt": "2023-03-07T19:17:55Z",
          "updatedAt": "2023-03-07T19:17:55Z"
        }
      ]
    },
    {
      "number": 404,
      "id": "I_kwDOEpUZs85f1xkP",
      "title": "Clarify how to identify misbehaving parties",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/404",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "Section 5.4 \"However, one reasonable approach would be to remove the misbehaving participant from the set of allowed participants in future runs of FROST.\" -> is there any text that would indicate to an implementer how to identify which share, and therefore which participant, is corrupted? If not, this recommendation seems unenforceable.\r\n\r\nThis can be done just by verifying the signature share",
      "createdAt": "2023-03-03T04:42:47Z",
      "updatedAt": "2023-03-07T20:43:27Z",
      "closedAt": "2023-03-07T20:43:27Z",
      "comments": []
    },
    {
      "number": 405,
      "id": "I_kwDOEpUZs85f1xwS",
      "title": "Move reference of Shamir secret sharing to appendix",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/405",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "This section initially references shamir secret sharing as a foundational aspect of the protocol and references the paper, which may mislead an initial reader that reading that paper is necessary for following the RFC. Conveniently, all relevant operations are fully described in section C.1. of the appendix. It would be more reader friendly to reference C.1. from here, or move up the later reference to appendix C, and move the reference to Shamir's paper to the appendix.",
      "createdAt": "2023-03-03T04:43:49Z",
      "updatedAt": "2023-03-14T19:35:30Z",
      "closedAt": "2023-03-14T19:35:30Z",
      "comments": []
    },
    {
      "number": 406,
      "id": "I_kwDOEpUZs85f1x25",
      "title": "Fix line length",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/406",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "conradoplg"
      ],
      "labels": [],
      "body": "1. Sections 4.3-4.6- the definitions go beyond the line length in these sections\r\n2. Section 5- The diagram in this section does not fit the line length",
      "createdAt": "2023-03-03T04:44:23Z",
      "updatedAt": "2023-04-15T08:24:33Z",
      "closedAt": "2023-04-15T08:24:33Z",
      "comments": [
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "I can work on this but it will conflict with most of the other changes so I suggesting leaving this for last",
          "createdAt": "2023-03-07T18:22:09Z",
          "updatedAt": "2023-03-07T18:22:09Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @conradoplg ! ",
          "createdAt": "2023-03-07T18:33:17Z",
          "updatedAt": "2023-03-07T18:33:17Z"
        }
      ]
    },
    {
      "number": 407,
      "id": "I_kwDOEpUZs85f1yN5",
      "title": "Clarify the term byte",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/407",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "conradoplg"
      ],
      "labels": [],
      "body": "Byte is not a universal term for a 8-bit integer. Although network protocols commonly use 8-bit bytes, this isn\u2019t universal, so stating that a Byte in this context is a sequence of 8 bits would be helpful. See section 2.1 of https://datatracker.ietf.org/doc/rfc8391/ for an example. The less-ambiguous term octet has been used to denote a serialized 8-bit number in other documents as well (such as https://datatracker.ietf.org/doc/rfc7539/). The CFRG has not been consistent about this definition in the past and is attempting to ensure consistency going forward.",
      "createdAt": "2023-03-03T04:46:23Z",
      "updatedAt": "2023-03-07T20:42:27Z",
      "closedAt": "2023-03-07T20:42:27Z",
      "comments": []
    },
    {
      "number": 408,
      "id": "I_kwDOEpUZs85f1yYx",
      "title": "Make explicit the lengths of variables Ne and Ns",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/408",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "conradoplg"
      ],
      "labels": [],
      "body": "Section 3: The fixed lengths Ne and Ns are defined here but not instantiated in the ciphersuites in section 6. The sizes can be surmised from the text, but it should be made explicit so that the validation and serialization functions are well-defined.",
      "createdAt": "2023-03-03T04:47:23Z",
      "updatedAt": "2023-03-08T14:48:10Z",
      "closedAt": "2023-03-08T14:48:10Z",
      "comments": [
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "How do you want to do this? Ideas:\r\n\r\n## Option  1: \"Associated Constants\"\r\n\r\n```\r\nThis ciphersuite...\r\n\r\n- Group: edwards25519 {{!RFC8032}}\r\n  - Ne: 32\r\n  - Ns: 32\r\n  - Order(): Return 2^252 + 27742317777372353535851937790883648493 (see {{?RFC7748}}).\r\n  - Identity(): As defined in {{RFC7748}}.\r\n  ...\r\n```\r\n\r\n## Option  2: Outside of group\r\n\r\n```\r\nThis ciphersuite...\r\n\r\n- Constants:\r\n  - Ne: 32\r\n  - Ns: 32\r\n \r\n- Group: edwards25519 {{!RFC8032}}\r\n  - Order(): Return 2^252 + 27742317777372353535851937790883648493 (see {{?RFC7748}}).\r\n  - Identity(): As defined in {{RFC7748}}.\r\n  ...\r\n```\r\n\r\n## Option 3: Make new methods\r\n\r\n```\r\nThis ciphersuite...\r\n\r\n- Group: edwards25519 {{!RFC8032}}\r\n  - Ne(): 32\r\n  - Ns(): 32\r\n  - Order(): Return 2^252 + 27742317777372353535851937790883648493 (see {{?RFC7748}}).\r\n  - Identity(): As defined in {{RFC7748}}.\r\n  ...\r\n```\r\n\r\nThis would also requring adding `Ne()` and `Ns()` to the generic group description.",
          "createdAt": "2023-03-07T17:53:15Z",
          "updatedAt": "2023-03-07T17:53:15Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@conradoplg I would suggest a fourth option: \r\n\r\n## Option  4: \"In group definition\"\r\n\r\n```\r\nThis ciphersuite...\r\n\r\n- Group: edwards25519 {{!RFC8032}}, where Ne = 32 and Ns = 32.\r\n  - Order(): Return 2^252 + 27742317777372353535851937790883648493 (see {{?RFC7748}}).\r\n  - Identity(): As defined in {{RFC7748}}.\r\n  ...\r\n```\r\n\r\nThis is similar to how we define the hash output \"constant\" for the ciphersuite `Hash`.",
          "createdAt": "2023-03-07T19:13:06Z",
          "updatedAt": "2023-03-07T19:13:31Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "That's great, I'm glad I asked :laughing: ",
          "createdAt": "2023-03-07T19:16:48Z",
          "updatedAt": "2023-03-07T19:16:48Z"
        }
      ]
    },
    {
      "number": 409,
      "id": "I_kwDOEpUZs85f1yjF",
      "title": "Clarify lagrange function for readability",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/409",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "conradoplg"
      ],
      "labels": [],
      "body": "  - x_i, an x-coordinate contained in L, a NonZeroScalar.\r\n  - L, the set of x-coordinates, each a NonZeroScalar.\r\n\r\nThe order of these definitions should be reversed for readability since the first references the second. Plus, \u201cset\u201d should be \u201clist\u201d to indicate it is ordered.",
      "createdAt": "2023-03-03T04:48:16Z",
      "updatedAt": "2023-03-07T19:05:20Z",
      "closedAt": "2023-03-07T19:05:20Z",
      "comments": []
    },
    {
      "number": 420,
      "id": "I_kwDOEpUZs85hcSCN",
      "title": "Make spec and reference implementation identical",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/420",
      "state": "OPEN",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "So one can literally execute the spec!",
      "createdAt": "2023-03-21T22:52:15Z",
      "updatedAt": "2023-03-21T22:52:15Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 421,
      "id": "I_kwDOEpUZs85jeiZ_",
      "title": "Make formatting of function definitions consistent",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/421",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "editorial"
      ],
      "body": "> The formatting of the function definitions is inconsistent. Some of the early definitions, for example in Section 4.1 nonce_generate(secret) are written with a function signature, the Inputs, the Outputs, then def nonce_generate(secret):. In the later sections, the initial function signature is missing. The draft would be improved if the formatting of these definitions was consistent.",
      "createdAt": "2023-04-14T21:02:43Z",
      "updatedAt": "2023-05-02T09:54:59Z",
      "closedAt": "2023-05-02T09:54:59Z",
      "comments": []
    },
    {
      "number": 422,
      "id": "I_kwDOEpUZs85jejH2",
      "title": "Inline nonces, commitments in `commit()`?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/422",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "editorial"
      ],
      "body": "> Section 5.1: the description of the output \u201c(nonce, comm), a tuple of nonce and nonce commitment pairs\u201d is confusing since it looks like a single tuple is returned, rather than a tuple of tuples. Maybe \u201c((hiding_none, binding_none), (hiding_nonce_comm, binding_nonce_comm))\u201d?",
      "createdAt": "2023-04-14T21:05:37Z",
      "updatedAt": "2023-05-02T09:52:01Z",
      "closedAt": "2023-05-02T09:52:01Z",
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Rename the variable names 'nonce' to 'nonces' and 'comm' to 'comms' in the pseudocode of commit()",
          "createdAt": "2023-04-18T19:26:34Z",
          "updatedAt": "2023-04-18T19:26:34Z"
        }
      ]
    },
    {
      "number": 423,
      "id": "I_kwDOEpUZs85jovtv",
      "title": "Lowercase Secp256k1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/423",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, the context string parameter for the Secp256k1 ciphersuite is \"FROST-secp256k1-SHA256-vXX\", with the group name in lowercase letters. The other ciphersuites have their parameter in all uppercase. Would it make sense to make this one uppercase as well, for consistency? I can open a PR with new vectors, if necessary.",
      "createdAt": "2023-04-17T17:10:46Z",
      "updatedAt": "2023-05-08T20:21:50Z",
      "closedAt": "2023-05-08T20:21:49Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think I've generally seen secp256k1 written with lowercase letters, so I think we ought to keep this as-is. I'm happy to reopen this and fix if this isn't actually the norm!",
          "createdAt": "2023-05-08T20:21:49Z",
          "updatedAt": "2023-05-08T20:21:49Z"
        }
      ]
    },
    {
      "number": 425,
      "id": "I_kwDOEpUZs85jwqap",
      "title": "Amend section 6.6 to mention only H2 in Ed25519 lacks domain separation for compat",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/425",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "> All hash functions MUST be domain separated with a per-suite context string. Note that the FROST(Ed25519, SHA-512) ciphersuite does not adhere to this requirement for compatibility with [[RFC8032](https://cfrg.github.io/draft-irtf-cfrg-frost/draft-irtf-cfrg-frost.html#RFC8032)].",
      "createdAt": "2023-04-18T19:18:10Z",
      "updatedAt": "2023-05-02T09:54:18Z",
      "closedAt": "2023-05-02T09:54:18Z",
      "comments": []
    },
    {
      "number": 427,
      "id": "I_kwDOEpUZs85j4iBC",
      "title": "Improve testability regarding randomness",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/427",
      "state": "CLOSED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@FiloSottile reached out to me to convince us of adjusting the FROST spec to make it easier to test regarding randomness, re: https://words.filippo.io/dispatches/avoid-the-randomness-from-the-sky/\r\n\r\nWe already do a good job at it, though some parts are kind of implicit. For example, `nonce_generate(secret)` samples randomness so in principle it can't be tested, but we do provide test vectors for a specific `random_bytes` so there as an implicit \"`nonce_generate_for_random_bytes(secret, random_bytes)`\" function that could be tested instead. Note that this is kinda part of #420; the reference implementation does have a `nonce_generate(H, secret, random_bytes)`\r\n\r\nThe other place that involves randomness is `trusted_dealer_keygen(secret_key)` which samples a bunch of random scalars. We again provide test vectors for a given list of scalars for an implicit \"`trusted_dealer_keygen_for_coefficients(secret_key, coefficients)`\" function.\r\n\r\nThat leaves the `G.RandomScalar()` function which is what generates those coefficients (interestingly, it's only used in `trusted_dealer_keygen`). Currently we don't specify it and refer to the appendix for how to implement it with wide reduction or rejection sampling. But we could have simply defined it with:\r\n\r\n```\r\ndef random_scalar():\r\n  random_bytes = random_bytes(64)\r\n  return H3(random_bytes)\r\n```\r\n\r\n(though I guess we can't use `H3` and we'd need Yet Another Hash Function, but the idea is the same. Though would it be fine in this case, since the input is random?)\r\n\r\nThat would allow implementers to test `RandomScalar()` and would also make it harder for implementers to botch its implementation. And would also allow us to remove that Appendix.\r\n\r\nI appreciate that we are very close to get the RFC published so we probably won't want to change this, but here are some suggestions:\r\n\r\n1. Make the spec a bit more explicit about what can be tested by refactoring `nonce_generate()` into `nonce_generate_for_random_bytes()` and making `nonce_generate()` sample `random_bytes` and call it (or anything similar, I'm bad at naming). Same applies for `trusted_dealer_keygen`. This is closely related to #420.\r\n1. Remove `G.RandomScalar()` and the appendix about randomness, and specify `random_scalar()` as above instead. Then change the test vectors to provide the `random_bytes` inputs to `random_scalar` instead of the random coefficients.\r\n1. If we don't want to change the RFC, we could do those just in the PoC code and in the Rust code",
      "createdAt": "2023-04-19T23:20:37Z",
      "updatedAt": "2023-09-05T20:04:34Z",
      "closedAt": "2023-09-05T20:04:33Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a useful goal to aim for in general but this feedback/effort would have been more helpful earlier in the process. Closing because we are (hopefully) close to completion. ",
          "createdAt": "2023-09-05T20:04:33Z",
          "updatedAt": "2023-09-05T20:04:33Z"
        }
      ]
    },
    {
      "number": 433,
      "id": "I_kwDOEpUZs85lebBd",
      "title": "Reference Pippenger's Algorithm to Speed up Multi-Exponentation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/433",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "When done naively, FROST signing is linear in the number of signers due to the requirement of computing the group commitment. However, algorithms like Pippenger's to speed up multi-exponentation can improve this result. We should document this option and the expected speed up. ",
      "createdAt": "2023-05-09T17:50:30Z",
      "updatedAt": "2023-09-05T19:27:24Z",
      "closedAt": "2023-09-05T19:27:24Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #457",
          "createdAt": "2023-09-05T19:27:24Z",
          "updatedAt": "2023-09-05T19:27:24Z"
        }
      ]
    },
    {
      "number": 434,
      "id": "I_kwDOEpUZs85lev3j",
      "title": "Update context strings and regenerate test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/434",
      "state": "CLOSED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The context strings are using `-v11` suffix.\r\n\r\nThey should be updated for the final version of the RFC, and the test vectors must be regenerated.\r\n\r\nProbably blocked on #432",
      "createdAt": "2023-05-09T18:36:54Z",
      "updatedAt": "2023-07-11T16:45:38Z",
      "closedAt": "2023-07-11T16:45:37Z",
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "done by @chris-wood ",
          "createdAt": "2023-07-11T16:45:37Z",
          "updatedAt": "2023-07-11T16:45:37Z"
        }
      ]
    },
    {
      "number": 436,
      "id": "I_kwDOEpUZs85mCvlS",
      "title": "Update keygen with trusted dealer to spit out identifiers per secret share",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/436",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "We depend on identifiers as NonZeroScalars throughout the body of the text but our only procedure in the document to generate shares does not mention these, and in the prose mentions integers instead of NonZeroScalars, which we should fix",
      "createdAt": "2023-05-16T13:07:44Z",
      "updatedAt": "2023-09-20T08:58:52Z",
      "closedAt": "2023-09-20T08:58:51Z",
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks like this has been fixed in the interim! Closing",
          "createdAt": "2023-09-20T08:58:51Z",
          "updatedAt": "2023-09-20T08:58:51Z"
        }
      ]
    },
    {
      "number": 440,
      "id": "I_kwDOEpUZs85py92T",
      "title": "IRSG review ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/440",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "From @britram:\r\n\r\n- Should Section 1.1 also have a note to the RFC Editor to remove before publication?\r\n\r\n- I was a little confused by the wording of \u201cwithout a distinguished Coordinator\u201d in section 5. after reading Section 7.5 I take this to mean \u201cwithout designating a Coordinator\u201d; is this a better wording?\r\n\r\n- In section 5.1: \"The outputs nonce and comm from participant P_i should both be stored locally and kept for use in the second round.: \u2014 8174 notwithstanding, isn\u2019t this just an s/should be stored/are stored/? I don\u2019t see how this would practically work otherwise. Same for section 5.3 \u201c the group_public_key and PK_i function arguments should come from that previously stored group info.\u201d",
      "createdAt": "2023-06-26T14:45:17Z",
      "updatedAt": "2023-09-14T19:42:50Z",
      "closedAt": "2023-09-14T19:42:50Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "I addressed all of these in #459, but I changed the terminology to a MUST for \u201c the group_public_key and PK_i function arguments should come from that previously stored group info.\u201d The \"must\" terminology ensures that verification is done correctly with respect to the correct designated public key. ",
          "createdAt": "2023-09-12T02:18:20Z",
          "updatedAt": "2023-09-12T02:18:51Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #459  and #460 ",
          "createdAt": "2023-09-14T19:42:50Z",
          "updatedAt": "2023-09-14T19:42:50Z"
        }
      ]
    },
    {
      "number": 444,
      "id": "I_kwDOEpUZs85rmc_1",
      "title": "Support BIP340 (bitcoin taproot)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/444",
      "state": "CLOSED",
      "author": "lucky1024",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Suggest to support [bip340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki) at standard level.\r\n",
      "createdAt": "2023-07-14T17:39:30Z",
      "updatedAt": "2023-07-19T15:55:14Z",
      "closedAt": "2023-07-19T15:55:14Z",
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "This document is moving towards finalization, taproot would have to go in a separate draft ",
          "createdAt": "2023-07-19T15:55:03Z",
          "updatedAt": "2023-07-19T15:55:03Z"
        }
      ]
    },
    {
      "number": 445,
      "id": "I_kwDOEpUZs85sBGbS",
      "title": "incorrect list is provided as\r\nargument to the call to derive_interpolating_value()",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/445",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "bug"
      ],
      "body": "Under section 5.3. Signature Share Aggregation, an incorrect list is provided as\r\nargument to the call to derive_interpolating_value() , see below.\r\nThe variable x_list should be replaced with participant_list .",
      "createdAt": "2023-07-19T15:43:53Z",
      "updatedAt": "2023-07-19T19:40:32Z",
      "closedAt": "2023-07-19T19:40:32Z",
      "comments": []
    },
    {
      "number": 446,
      "id": "I_kwDOEpUZs85sBG4n",
      "title": "typo: recommended ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/446",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "documentation"
      ],
      "body": "Under section 7.2. Optimizations, there is a typo in the spelling of RECOMENDED , which\r\nshould be spelled with two Ms; RECOMMENDED .",
      "createdAt": "2023-07-19T15:45:02Z",
      "updatedAt": "2023-07-19T15:56:46Z",
      "closedAt": "2023-07-19T15:56:46Z",
      "comments": []
    },
    {
      "number": 451,
      "id": "I_kwDOEpUZs85shkPc",
      "title": "Definitions of H3 differ from the FROST paper",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/451",
      "state": "CLOSED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "> Let H be a cryptographic hash function mapping to Z\u2217q \r\n\r\n> Sample single-use nonces (dij , eij ) $ \u2190 Z\u2217q \u00d7 Z\u2217q\r\n\r\n> Then, using m and B, all participants derive the \u201cbinding values\u201d \u03c1i, i \u2208 S such that \u03c1i = H1(i, m, B), where H1 is a hash function whose outputs are in Z\u2217q .\r\n\r\n> Let H1, H2 be hash functions whose outputs are in Z\u2217q .\r\n\r\nFROST states the nonces, binding factor hash, and challenge hash must be non-zero. The IETF draft does not require H1/H2/H3 map to the multiplicative group.\r\n\r\nWhile H2 potentially can't have that bound for compatibility reasons, `#dep-binding-factor` outputs `- binding_factor_list, a list of (NonZeroScalar, Scalar) tuples representing the binding factors.`, when this should technically be `(NonZeroScalar, NonZeroScalar)`. For H1, I believe an earlier revision did comment on rejecting zero, yet the current revision doesn't. I'm unsure how those discussions went.",
      "createdAt": "2023-07-25T16:53:12Z",
      "updatedAt": "2023-09-12T15:47:50Z",
      "closedAt": "2023-09-12T02:21:37Z",
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I just remembered point deserialization errors on identity, so a zero nonce being generated will cause an abort. That creates an effective equivalence for the draft's H1 and the paper. If we ignore H2 for compatibility reasons, that leaves H3.\r\n\r\nA simple fix may be if the binding factor is 0, pushing a 0 byte to the transcript and re-hashing.",
          "createdAt": "2023-07-25T17:59:18Z",
          "updatedAt": "2023-07-25T17:59:18Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Re-named to explicitly reference H3\r\n",
          "createdAt": "2023-08-15T21:38:13Z",
          "updatedAt": "2023-08-15T21:38:13Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @kayabaNerve - the one-bit difference here is negligible, so I think we can do what is simplest for the implementation, which is keeping H3 as defined in the spec. ",
          "createdAt": "2023-09-12T02:21:37Z",
          "updatedAt": "2023-09-12T02:21:37Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I made a mistake. I meant \"H1\", the binding factor hash. \"H3\" is the nonce, which is handled by my point deserialization note.\r\n\r\nI don't believe this changes the result, yet I wanted to clarify the singular hash I mean to call out in my prior message is H1, not H3.",
          "createdAt": "2023-09-12T15:47:50Z",
          "updatedAt": "2023-09-12T15:47:50Z"
        }
      ]
    },
    {
      "number": 452,
      "id": "I_kwDOEpUZs85spiYL",
      "title": "Guidance on removing the coordinator role does not reflect recent changes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/452",
      "state": "CLOSED",
      "author": "kevin-henry-ncc",
      "authorAssociation": "NONE",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "In draft 11 of FROST, Section 5.3 is titled \"Signature Share Verification and Aggregation\" and suggests that the intended sequence of operations is for the coordinator to verify each share using `verify_signature_share()` and then aggregate the signature using `aggregate()` to be sent to participants:\r\n\r\nDraft 11 approach:\r\n1. Verify individual shares\r\n2. Aggregate signature\r\n3. Distribute to Participants\r\n\r\nIn draft 14 of FROST, Section 5.3 is titled \"Signature Share Aggregation\" and suggests that the coordinator will aggregate the signature using `aggregate()` and SHOULD verify it using the group key. Share verification and identifying errors are left as an optional process if this step fails:\r\n\r\nDraft 14 approach:\r\n1. Aggregate signature\r\n2. Validate signature\r\n3. If success, distribute to Participants\r\n4. If fail, optionally verify individual shares\r\n\r\nDespite this change Section 7.5 \"Removing the Coordinator Role\" has not been revised and seems much more aligned with the previous approach in draft 11. It also suggests that participants should verify shares and aggregate but does not include the new SHOULD requirement to verify the signature.\r\n\r\n> All participants will then publish their signature shares to one another. After having received all signature shares from all other participants, each participant will then perform\u00a0`verify_signature_share`\u00a0and then\u00a0`aggregate`\u00a0directly.\r\n\r\nI think most implementers would make sensible decisions, but from a review/audit perspective I believe the current guidance in 7.5 is a little ambiguous, and I would anticipate different audiences to come to different conclusions on how a Coordinator-free implementation should behave. One may implement the process described in 7.5, and another may implement the process described in 5.3, and both may claim they're following the spec.\r\n\r\nI would recommend revising Section 7.5 to better reflect the intended/current approach, or to justify why the sequence of events might be different with or without a Coordinator. The preferred resolution would be to ensure the aggregate+validate process in Section 5.3 is clear, and simply suggest that each participant performs the aggregate+validate process as described in 5.3.",
      "createdAt": "2023-07-26T17:08:02Z",
      "updatedAt": "2023-09-21T20:50:48Z",
      "closedAt": "2023-09-21T20:50:48Z",
      "comments": []
    },
    {
      "number": 453,
      "id": "I_kwDOEpUZs85srzKU",
      "title": "Old MAX_PARTICIPANTS definition in Appendix",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/453",
      "state": "CLOSED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Reported by NCC.\r\n\r\nIn the Appendix, there is a reference to the old definition of MAX_PARTICIPANTS:\r\n\r\n> - MAX_PARTICIPANTS, the number of shares to generate, an integer less\r\n  than 2^16.",
      "createdAt": "2023-07-27T00:55:14Z",
      "updatedAt": "2023-08-21T14:09:10Z",
      "closedAt": "2023-08-21T14:09:10Z",
      "comments": [
        {
          "author": "mpguerra",
          "authorAssociation": "NONE",
          "body": "Should this be closed now after @chelseakomlo 's fix?",
          "createdAt": "2023-08-21T08:45:02Z",
          "updatedAt": "2023-08-21T08:45:02Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @mpguerra! Closing. ",
          "createdAt": "2023-08-21T14:09:10Z",
          "updatedAt": "2023-08-21T14:09:10Z"
        }
      ]
    },
    {
      "number": 455,
      "id": "I_kwDOEpUZs85tzqPy",
      "title": "Brian Trammell's Review",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/455",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "1. Should Section 1.1 also have a note to the RFC Editor to remove before publication?\r\n\r\n2. I was a little confused by the wording of \u201cwithout a distinguished Coordinator\u201d in section 5. after reading Section 7.5 I take this to mean \u201cwithout designating a Coordinator\u201d; is this a better wording?\r\n\r\n3. In section 5.1: \"The outputs nonce and comm from participant P_i should both be stored locally and kept for use in the second round.: \u2014 8174 notwithstanding, isn\u2019t this just an s/should be stored/are stored/? I don\u2019t see how this would practically work otherwise. Same for section 5.3 \u201c the group_public_key and PK_i function arguments should come from that previously stored group info.\u201d",
      "createdAt": "2023-08-09T00:09:23Z",
      "updatedAt": "2023-08-15T17:58:08Z",
      "closedAt": "2023-08-15T17:58:08Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Dup of #440 ",
          "createdAt": "2023-08-15T17:58:08Z",
          "updatedAt": "2023-08-15T17:58:08Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "MDExOlB1bGxSZXF1ZXN0NTcyMTQwMDEw",
      "title": "Begin detailing notation and primitives",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/1",
      "state": "MERGED",
      "author": "isislovecruft",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-11T22:00:49Z",
      "updatedAt": "2021-08-09T01:50:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b82f641a32d2e11f5954208d9a0dc6b0397077b6",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "feature/notation-and-primitives",
      "headRefOid": "7b996fc3a502dd42adfc9a653fc6d9bd8700c657",
      "closedAt": "2021-08-09T01:50:30Z",
      "mergedAt": "2021-08-09T01:50:30Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "4520453cd5671cfa47e863976fe2b1e292c6c6d9"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh wow, I completely missed seeing this. I'm going to merge this in today. Thank you! ",
          "createdAt": "2021-08-05T15:23:24Z",
          "updatedAt": "2021-08-05T15:23:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 2,
      "id": "MDExOlB1bGxSZXF1ZXN0NzAxODY5MzMw",
      "title": "Add POG dependency, and clean up overview.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/2",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is an imperfect start, but, hopefully it helps! I'm happy to take the secret sharing section(s) next, if that'd be useful.",
      "createdAt": "2021-08-03T00:39:16Z",
      "updatedAt": "2021-08-03T15:17:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3c859132fac5fabbe86150cd3598ea1fb81a4ace",
      "headRepository": null,
      "headRefName": "caw/overview-and-deps",
      "headRefOid": "69d06d3c8300770162d24a5015994931f556bd50",
      "closedAt": "2021-08-03T15:17:00Z",
      "mergedAt": "2021-08-03T15:17:00Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "6f4c2f70df048718490ad2efc53fa44939d3e3fa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIxMjI4ODQx",
          "commit": {
            "abbreviatedOid": "69d06d3"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-03T13:54:21Z",
          "updatedAt": "2021-08-03T13:54:21Z",
          "comments": [
            {
              "originalPosition": 172,
              "body": "This should actually be a VSS commitment, a Pedersen commitment is to a single value alpha, in the form C = g^alpha * h^beta, where beta is chosen uniformly at random.",
              "createdAt": "2021-08-03T13:54:21Z",
              "updatedAt": "2021-08-03T13:54:21Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIxMzMyMjIz",
          "commit": {
            "abbreviatedOid": "69d06d3"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-03T15:16:55Z",
          "updatedAt": "2021-08-03T15:16:56Z",
          "comments": [
            {
              "originalPosition": 172,
              "body": "I'll fix this up after merge! ",
              "createdAt": "2021-08-03T15:16:55Z",
              "updatedAt": "2021-08-03T15:16:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 3,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA1ODA3OTYx",
      "title": "Define secret-sharing in terms of polynomial operations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/3",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-07T00:39:30Z",
      "updatedAt": "2021-08-07T18:57:26Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e083e795cf123482feddb3b74e26e4a30a89efac",
      "headRepository": null,
      "headRefName": "caw/ss",
      "headRefOid": "326335f56b8ce6aaf52ce7c8f3d91eec4a1dce51",
      "closedAt": "2021-08-07T18:57:23Z",
      "mergedAt": "2021-08-07T18:57:23Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "6b40be2cc4e0fdff430a9f55b2808a86ddb5499f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 4,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA2MTI2MDg5",
      "title": "Serialization and whatnot",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/4",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-08T23:40:06Z",
      "updatedAt": "2021-08-09T00:41:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "95d23648d5855be9c3cf80d9950094e56eb9026a",
      "headRepository": null,
      "headRefName": "caw/ser",
      "headRefOid": "33afde6e3651151bb8b4cca32c95e17985ed58fb",
      "closedAt": "2021-08-09T00:41:30Z",
      "mergedAt": "2021-08-09T00:41:30Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "22477aeb53b1df0e9b69a0dbeed7073b7e667224"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 6,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA2NTMxNzA1",
      "title": "Add a protocol overview sketch.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/6",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "And also cleanup the Schnorr signature section, make algorithms appear \"prettier\", add the (ristretto255, SHA-512) suite, and remove some redundant text.",
      "createdAt": "2021-08-09T13:39:30Z",
      "updatedAt": "2021-08-09T14:12:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "afe879a95fe5e6a7d46f46cbecb60eae7ca37a2c",
      "headRepository": null,
      "headRefName": "caw/cleanup",
      "headRefOid": "de8f77410e8327af119d75a43a1405c458cca539",
      "closedAt": "2021-08-09T14:12:26Z",
      "mergedAt": "2021-08-09T14:12:26Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "c1653cc29d5259befc5da276b868486f82b2c01a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 7,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA2OTI3NDM5",
      "title": "Fix typos and formatting",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/7",
      "state": "MERGED",
      "author": "teor2345",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "teor2345"
      ],
      "labels": [],
      "body": "Minor fixes to typos and formatting",
      "createdAt": "2021-08-09T23:43:57Z",
      "updatedAt": "2021-08-10T04:59:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "1901da2a719a67ac7d9901711800b80e15523b8b",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "fix-typos",
      "headRefOid": "5ddda99f38adb768462e77fb06f788112dfb49de",
      "closedAt": "2021-08-10T04:59:52Z",
      "mergedAt": "2021-08-10T04:59:52Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "5366d3b901d67ac046391e477924f376131b8047"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI1ODk1MDc5",
          "commit": {
            "abbreviatedOid": "5ddda99"
          },
          "author": "teor2345",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-09T23:44:25Z",
          "updatedAt": "2021-08-09T23:44:25Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'm not sure about this function formatting",
              "createdAt": "2021-08-09T23:44:25Z",
              "updatedAt": "2021-08-09T23:44:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI1ODk1MzI5",
          "commit": {
            "abbreviatedOid": "5ddda99"
          },
          "author": "teor2345",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-09T23:45:02Z",
          "updatedAt": "2021-08-09T23:45:02Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "`SUM` and `PROD` are already specified 2 paragraphs above this one.",
              "createdAt": "2021-08-09T23:45:02Z",
              "updatedAt": "2021-08-09T23:45:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI2MDA3MDA2",
          "commit": {
            "abbreviatedOid": "5ddda99"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great, thanks @teor2345 ",
          "createdAt": "2021-08-10T04:59:40Z",
          "updatedAt": "2021-08-10T04:59:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOEpUZs84tg9xo",
      "title": "s/comitment/commitment/",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/8",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-21T19:59:11Z",
      "updatedAt": "2022-04-18T17:01:44Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "50588dac82f6d690a54fe6274fa89b5d61c4410a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "typo",
      "headRefOid": "e12fa39ace272bf50ebe6d4594cabd913d64fe4a",
      "closedAt": "2021-10-30T20:03:58Z",
      "mergedAt": "2021-10-30T20:03:58Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "59e909df9fa067091b6bbdc9a8914dd10534c89c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84vTWR3",
          "commit": {
            "abbreviatedOid": "e12fa39"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-30T20:03:53Z",
          "updatedAt": "2021-10-30T20:03:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 9,
      "id": "PR_kwDOEpUZs84uEeSY",
      "title": "Remove unused inputs",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/9",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-04T00:19:40Z",
      "updatedAt": "2022-04-18T17:01:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "59e909df9fa067091b6bbdc9a8914dd10534c89c",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "chris-wood-patch-1",
      "headRefOid": "e5fae627d622a657d0d5cf15aa256bd842047743",
      "closedAt": "2021-11-18T17:20:27Z",
      "mergedAt": "2021-11-18T17:20:27Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "482dd2dc09652725b57953f63b8d79fd4f05aa54"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 10,
      "id": "PR_kwDOEpUZs84uEfll",
      "title": "No let",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/10",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-04T00:30:12Z",
      "updatedAt": "2022-04-18T17:01:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "59e909df9fa067091b6bbdc9a8914dd10534c89c",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "chris-wood-patch-2",
      "headRefOid": "537cee8c30918d1f40fb3ce6d8cc191972ed14d8",
      "closedAt": "2021-11-18T17:20:18Z",
      "mergedAt": "2021-11-18T17:20:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "234ed7b4a82c260bb1bb1b29758135713c2be88e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 14,
      "id": "PR_kwDOEpUZs84uj1zH",
      "title": "Domain-separate H1 and H2 by parameter set  example",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/14",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-15T23:26:47Z",
      "updatedAt": "2021-11-30T21:13:12Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "59e909df9fa067091b6bbdc9a8914dd10534c89c",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "domain-separate",
      "headRefOid": "a8f69a65087e521bbf3ebf8f44aba3bb30cb1989",
      "closedAt": "2021-11-30T21:01:17Z",
      "mergedAt": "2021-11-30T21:01:17Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "3c9ff7c7f37472ebef601869b8d93097b297b839"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 27,
      "id": "PR_kwDOEpUZs84uvPWo",
      "title": "Fix some issues in the polynomial math section",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/27",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-18T21:32:24Z",
      "updatedAt": "2021-12-02T03:39:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "482dd2dc09652725b57953f63b8d79fd4f05aa54",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/poly-bug-fixes",
      "headRefOid": "292563a27f0781a08dd301a1a4805a322ad31113",
      "closedAt": "2021-12-02T03:39:17Z",
      "mergedAt": "2021-12-02T03:39:17Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "6ead3aa798352d220c18076200634463b694dba8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84w78Yg",
          "commit": {
            "abbreviatedOid": "292563a"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me, thanks! ",
          "createdAt": "2021-12-02T03:39:09Z",
          "updatedAt": "2021-12-02T03:39:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 28,
      "id": "PR_kwDOEpUZs84vNnbR",
      "title": "Specify FROST efficiency improvements",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/28",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Efficiency improvements to FROST were presented in https://eprint.iacr.org/2021/1375. This change ensures that rho is derived correctly, and cites this paper for reference. ",
      "createdAt": "2021-11-30T21:53:21Z",
      "updatedAt": "2021-12-06T23:26:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "744d2245a096b61340f6968f2684e8907f98137d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "efficient-variant",
      "headRefOid": "02926ae0ba4a2a7a7b3a9b0d4c9b7f3286a889bd",
      "closedAt": "2021-12-06T23:26:16Z",
      "mergedAt": "2021-12-06T23:26:16Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "db2a378d00c5393f908703641e8ba57fb62c3ab5"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Addresses issue #21 ",
          "createdAt": "2021-11-30T21:54:33Z",
          "updatedAt": "2021-11-30T21:54:33Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see how this is more efficient. If anything, it seems to be less efficient since it requires more cycles to compute `binding_factor`. Was there more to be done in this PR? Also, the build breaks, which we should fix before merging.",
          "createdAt": "2021-11-30T23:45:35Z",
          "updatedAt": "2021-11-30T23:45:35Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry, I should have been more clear in the comment. The binding factor *must* include the identifiers of all the participants. I could have included these in the `B` term, but since we already defined `L`, I thought it would be clearer to include `L` separately. Let me know which you prefer. ",
          "createdAt": "2021-12-01T05:18:12Z",
          "updatedAt": "2021-12-01T05:18:12Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The binding factor must include the identifiers of all the participants. I could have included these in the B term, but since we already defined L, I thought it would be clearer to include L separately. Let me know which you prefer.\r\n\r\nThe change is fine, but I'm just not seeing how this adds any efficiency improvement. To try and be a bit more clear: are the changes from Schnorr21 going to land in this PR, or another one?",
          "createdAt": "2021-12-01T16:09:25Z",
          "updatedAt": "2021-12-01T16:09:25Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "I just made the title more clear- these efficiency improvements are from Schnorr21; FROST20 requires computing different binding factors for each participant.",
          "createdAt": "2021-12-01T17:09:51Z",
          "updatedAt": "2021-12-01T17:09:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84w7QpP",
          "commit": {
            "abbreviatedOid": "b4e3e50"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83e\udd37 ",
          "createdAt": "2021-12-01T21:50:42Z",
          "updatedAt": "2021-12-01T21:50:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84xJj8T",
          "commit": {
            "abbreviatedOid": "17e788e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-06T23:12:46Z",
          "updatedAt": "2021-12-06T23:12:49Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n -  ins: C. A. Wood\r\n    name: Christopher A. Wood\r\n```",
              "createdAt": "2021-12-06T23:12:46Z",
              "updatedAt": "2021-12-06T23:12:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 29,
      "id": "PR_kwDOEpUZs84vttdy",
      "title": "Participants should never be assigned the zero identifier.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/29",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses issue #18 ",
      "createdAt": "2021-12-11T18:22:11Z",
      "updatedAt": "2022-04-18T17:01:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "db2a378d00c5393f908703641e8ba57fb62c3ab5",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "zero-identifier",
      "headRefOid": "1b24faa469b44aa271403b6756a9ab41e00edc11",
      "closedAt": "2021-12-11T18:47:22Z",
      "mergedAt": "2021-12-11T18:47:22Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2e377fe7a1b5d70098cc9d362f68fae085ad5613"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84xcf_o",
          "commit": {
            "abbreviatedOid": "1b24faa"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-11T18:45:55Z",
          "updatedAt": "2021-12-11T18:45:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOEpUZs84vtuOl",
      "title": "Start list of known implementations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/30",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It would be great to have a better distinguishes for implementations that are not complete but also not yet interoperable. Also how to specify the curves these different implementations are over, and which ones we should include here (i.e, should we include the redjubjub implementation). \r\n\r\nAddresses #16",
      "createdAt": "2021-12-11T18:43:19Z",
      "updatedAt": "2021-12-13T22:47:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "db2a378d00c5393f908703641e8ba57fb62c3ab5",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "implementations",
      "headRefOid": "69111dab6817bdcd3b0f923d00521d3023cbd3b5",
      "closedAt": "2021-12-13T22:47:47Z",
      "mergedAt": "2021-12-13T22:47:47Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "09758504e0732b16f865c5d80d2c69f3e0663d2d"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We should also add https://github.com/taurusgroup/multi-party-sig.",
          "createdAt": "2021-12-13T17:35:30Z",
          "updatedAt": "2021-12-13T17:35:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84xgTP2",
          "commit": {
            "abbreviatedOid": "135f73a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-13T17:35:34Z",
          "updatedAt": "2021-12-13T17:35:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 31,
      "id": "PR_kwDOEpUZs84vypY6",
      "title": "Add link to new frost-ristretto255 impl",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/31",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-13T23:27:53Z",
      "updatedAt": "2021-12-13T23:49:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "09758504e0732b16f865c5d80d2c69f3e0663d2d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "add-frost-ristretto255",
      "headRefOid": "6a5099e58fc6fe364453ea163f3d99381b313e9d",
      "closedAt": "2021-12-13T23:49:15Z",
      "mergedAt": "2021-12-13T23:49:15Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c9d58cf05154ecd3a5a94afed7820d12dab1c54e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84xhi9w",
          "commit": {
            "abbreviatedOid": "6a5099e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-13T23:49:12Z",
          "updatedAt": "2021-12-13T23:49:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 32,
      "id": "PR_kwDOEpUZs84vysgi",
      "title": "Add P256-SHA-256 ciphersuite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/32",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "To match the Ristretto ciphersuite as it exists",
      "createdAt": "2021-12-13T23:55:37Z",
      "updatedAt": "2021-12-14T19:55:38Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c9d58cf05154ecd3a5a94afed7820d12dab1c54e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "p256-sha-256",
      "headRefOid": "988686d23366f02f24440d3408f75450fb7276bd",
      "closedAt": "2021-12-14T14:56:00Z",
      "mergedAt": "2021-12-14T14:55:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d44e648edcd9f6b18d589c8058f600728b8d15da"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood where should I put this:\r\n\r\n```\r\nx9.62:\r\n    title: \"Public Key Cryptography for the Financial Services Industry: the Elliptic Curve Digital Signature Algorithm (ECDSA)\"\r\n    date: Sep, 1998\r\n    seriesinfo:\r\n      \"ANSI\": X9.62-1998\r\n    author:\r\n      -\r\n        org: ANSI\r\n\r\n```",
          "createdAt": "2021-12-14T00:03:13Z",
          "updatedAt": "2021-12-14T00:03:13Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly there's a section up at the top we need to add, so it'd look like so:\r\n\r\n```\r\nnormative:\r\n   x9.62:\r\n     title: \"Public Key Cryptography for the Financial Services Industry: the Elliptic Curve Digital Signature Algorithm (ECDSA)\"\r\n     date: Sep, 1998\r\n     seriesinfo:\r\n       \"ANSI\": X9.62-1998\r\n     author:\r\n       -\r\n         org: ANSI\r\n\r\ninformative:\r\n   FROST20:\r\n   ...\r\n```",
          "createdAt": "2021-12-14T00:05:11Z",
          "updatedAt": "2021-12-14T00:05:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84xhkFT",
          "commit": {
            "abbreviatedOid": "dfc5156"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Excellent!",
          "createdAt": "2021-12-13T23:58:05Z",
          "updatedAt": "2021-12-13T23:58:59Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n## FROST(P-256, SHA-256)\r\n```",
              "createdAt": "2021-12-13T23:58:05Z",
              "updatedAt": "2021-12-13T23:58:59Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\n- Hash: SHA-256, and Nh = 32.\r\n```",
              "createdAt": "2021-12-13T23:58:41Z",
              "updatedAt": "2021-12-13T23:58:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 33,
      "id": "PR_kwDOEpUZs84v1DOA",
      "title": "Add contextString variable",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/33",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "And add missing reference from #32.",
      "createdAt": "2021-12-14T15:00:46Z",
      "updatedAt": "2021-12-14T15:53:04Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d44e648edcd9f6b18d589c8058f600728b8d15da",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/add-context",
      "headRefOid": "f7e2eb42c6a2d729d0196a7ee21c77b238d19193",
      "closedAt": "2021-12-14T15:53:04Z",
      "mergedAt": "2021-12-14T15:53:04Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "97bd6c0017584b3593734b26f5be964e29d33916"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84xkqXF",
          "commit": {
            "abbreviatedOid": "c82b4ca"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-12-14T15:50:06Z",
          "updatedAt": "2021-12-14T15:50:25Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "```suggestion\nThe value of the contextString parameter is \"FROST-RISTRETTO255-SHA512\".\n```\n",
              "createdAt": "2021-12-14T15:50:06Z",
              "updatedAt": "2021-12-14T15:50:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 34,
      "id": "PR_kwDOEpUZs84v1Lgm",
      "title": "EdX interop",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/34",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This aligns signature generation and verification with that of [EdX from RFC8032](https://datatracker.ietf.org/doc/html/rfc8032). ",
      "createdAt": "2021-12-14T15:33:06Z",
      "updatedAt": "2021-12-14T19:56:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d44e648edcd9f6b18d589c8058f600728b8d15da",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/edx-alignment",
      "headRefOid": "d0d9c5bf2962f30c42f500df08ca08194e080fbb",
      "closedAt": "2021-12-14T19:56:12Z",
      "mergedAt": "2021-12-14T19:56:12Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "3bdaa22d7485cdc4adbfb947b530e56b639aa9d0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84xllyN",
          "commit": {
            "abbreviatedOid": "d0d9c5b"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great to me, thank you \ud83c\udf8a ",
          "createdAt": "2021-12-14T19:20:23Z",
          "updatedAt": "2021-12-14T19:20:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84xluYr",
          "commit": {
            "abbreviatedOid": "d0d9c5b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-14T19:56:05Z",
          "updatedAt": "2021-12-14T19:56:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 35,
      "id": "PR_kwDOEpUZs84v2Xne",
      "title": "Stop adding teor to every PR as a reviewer",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/35",
      "state": "MERGED",
      "author": "teor2345",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This removes teor from the CODEOWNERS file, so I don't get added as a reviewer to every PR.",
      "createdAt": "2021-12-14T21:12:11Z",
      "updatedAt": "2021-12-14T21:17:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3bdaa22d7485cdc4adbfb947b530e56b639aa9d0",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "stop-adding-teor-reviews",
      "headRefOid": "2f254ed7dd4b6fa118a43d9480640d68ed36d9df",
      "closedAt": "2021-12-14T21:17:44Z",
      "mergedAt": "2021-12-14T21:17:43Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "5bcf68714f4260149388d885f781f778a41fecb1"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @teor2345, sorry about that! ",
          "createdAt": "2021-12-14T21:17:39Z",
          "updatedAt": "2021-12-14T21:17:39Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 36,
      "id": "PR_kwDOEpUZs84w5CPT",
      "title": "Typo",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/36",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-01-13T01:07:09Z",
      "updatedAt": "2022-01-13T02:20:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "5bcf68714f4260149388d885f781f778a41fecb1",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-1",
      "headRefOid": "0a570ef7a244dd735c3202e5d52f9dbaaecfbd2e",
      "closedAt": "2022-01-13T02:20:25Z",
      "mergedAt": "2022-01-13T02:20:25Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "9c9b76280aa433b08f576760c6b81cfe83947d10"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84yvBlk",
          "commit": {
            "abbreviatedOid": "0a570ef"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-13T02:20:18Z",
          "updatedAt": "2022-01-13T02:20:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 39,
      "id": "PR_kwDOEpUZs84w5JWS",
      "title": "Rough description of performing the protocol without the aggregator",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/39",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #25",
      "createdAt": "2022-01-13T01:39:07Z",
      "updatedAt": "2022-01-18T20:00:26Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "5bcf68714f4260149388d885f781f778a41fecb1",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "no-aggregator",
      "headRefOid": "c58e4bf53fa5d30769034779b7f002c79803fe89",
      "closedAt": "2022-01-18T20:00:22Z",
      "mergedAt": "2022-01-18T20:00:22Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "38e8fa7a19f2778b4b2fd6c8a3eeb309dc7a8cfb"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed the comment from @chris-wood in the last commit, hopefully this description of the network channel requirements is clear. ",
          "createdAt": "2022-01-18T20:00:17Z",
          "updatedAt": "2022-01-18T20:00:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84yy_B3",
          "commit": {
            "abbreviatedOid": "e874521"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83d\udc4d",
          "createdAt": "2022-01-13T20:50:05Z",
          "updatedAt": "2022-01-13T20:50:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84yzbut",
          "commit": {
            "abbreviatedOid": "e874521"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This text looks good, though I wonder if we need to expand on the requirements for the broadcast channel? In particular, this is written such that it assumes the broadcast channel (obviously) delivers each message correctly, but I don't think we state that explicitly? (We can do this in a future PR so as to not block this.)",
          "createdAt": "2022-01-13T23:20:04Z",
          "updatedAt": "2022-01-13T23:20:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOEpUZs84w9sYu",
      "title": "Messages should be a fixed size when hashing",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "To ensure a fixed size message when calculating `rho` or the sig challenge, always hash the message into a fixed size first.\r\n\r\nAlso consistently use `msg`, and some tidy\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/issues/43",
      "createdAt": "2022-01-13T20:46:52Z",
      "updatedAt": "2022-01-28T21:55:44Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "6f15e3b8ea32696d6e4bca61615fc591283a63bf",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "msg-hashing",
      "headRefOid": "f741b1d10c77b215dba0ec7de09370fa58b72bde",
      "closedAt": "2022-01-28T21:55:41Z",
      "mergedAt": "2022-01-28T21:55:41Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "750a307a437d95418d640db824f444bdd1116279"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> We need to explicitely define what `H` is, similarly to `H1` and `H2`.\r\n> \r\n> See https://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#cryptographic-hash-function-dep-hash\r\n\r\nIs that not specified by each parameter set? ",
          "createdAt": "2022-01-13T22:39:40Z",
          "updatedAt": "2022-01-13T22:39:40Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "> > We need to explicitely define what `H` is, similarly to `H1` and `H2`.\r\n> > See https://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#cryptographic-hash-function-dep-hash\r\n> \r\n> Is that not specified by each parameter set?\r\n\r\nWe should have an explicit definition with a domain seperator, to be on the safe side. ",
          "createdAt": "2022-01-13T22:43:55Z",
          "updatedAt": "2022-01-13T22:43:55Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo it is explicitly defined as part of the ciphersuite, so I don't think further work is needed there.",
          "createdAt": "2022-01-13T22:54:40Z",
          "updatedAt": "2022-01-13T22:54:40Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed!\r\n",
          "createdAt": "2022-01-28T21:55:32Z",
          "updatedAt": "2022-01-28T21:55:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84yzMg4",
          "commit": {
            "abbreviatedOid": "801db01"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "We need to explicitely define what `H` is, similarly to `H1` and `H2`. \r\n\r\nSee https://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#cryptographic-hash-function-dep-hash",
          "createdAt": "2022-01-13T21:55:09Z",
          "updatedAt": "2022-01-13T21:55:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84zA7LP",
          "commit": {
            "abbreviatedOid": "272c75c"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-18T19:29:23Z",
          "updatedAt": "2022-01-18T19:29:24Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I would add a comment here that a domain seperator is omitted specifically for backwards compatibility and citation.",
              "createdAt": "2022-01-18T19:29:23Z",
              "updatedAt": "2022-01-18T19:29:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84zA7d5",
          "commit": {
            "abbreviatedOid": "272c75c"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Approved, with request for comment on backwards compatibility and choice of `H3`",
          "createdAt": "2022-01-18T19:29:56Z",
          "updatedAt": "2022-01-18T19:29:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84zqPVg",
          "commit": {
            "abbreviatedOid": "272c75c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T21:08:11Z",
          "updatedAt": "2022-01-28T21:08:12Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nH3(m) = H(m)\r\n\r\nNormally this would also include a domain separator, but for backwards compatibility with other Schnorr signatures, we omit it here.\r\n```",
              "createdAt": "2022-01-28T21:08:11Z",
              "updatedAt": "2022-01-28T21:08:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOEpUZs84xObFo",
      "title": "Update order of rho with regard to participant identifiers",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/52",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #17 ",
      "createdAt": "2022-01-18T20:48:05Z",
      "updatedAt": "2022-01-25T20:39:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "38e8fa7a19f2778b4b2fd6c8a3eeb309dc7a8cfb",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "order-rho",
      "headRefOid": "89e3a47efd2f8f0d9753853a90d7793368c20b26",
      "closedAt": "2022-01-25T20:38:19Z",
      "mergedAt": "2022-01-25T20:38:19Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "34dc444633489c8687440cc3e04edb408f1e1bcb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84zbdSy",
          "commit": {
            "abbreviatedOid": "89e3a47"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Good for now, if anyone runs into any confusion about the j, D_j, etc order, we can clarify further",
          "createdAt": "2022-01-25T20:36:15Z",
          "updatedAt": "2022-01-25T20:36:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 53,
      "id": "PR_kwDOEpUZs84xsnRP",
      "title": "Draft fixes and initial Sage implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/53",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The Sage implementation (in poc/frost.sage) is still a bit behind the spec, e.g., H1 and H2 are not correct. Test vectors are still TBD. We can either add them here or in a followup change. There's a couple general questions and comments that came up when making this change, including:\r\n\r\n- Why is signature share verification _optional_, as opposed to mandatory? It's pretty cheap, so I'm inclined to think we should make it mandatory.\r\n- Is the current blinding factor generation specification correct?\r\n- We currently say the upper bound on signing message limit is 2^16-1 -- is this sufficiently large?\r\n- What should be the maximum number of possible signers? 2^64-1?\r\n- We need to improve the vocabulary in the draft, e.g., `B` to denote the set of signer commitments. Can we come up with a better name?\r\n- ... and probably some others I forgot in the process.\r\n\r\n@dconnolly I suspect this won't interop with your ristretto255 implementation, but that's probably fine for now. I want to get. us to an initial place where we have test vectors from the Sage implementation that match the spec. Then we can change things as needed to converge (and work towards RFC8032 compatibility). ",
      "createdAt": "2022-01-27T18:41:00Z",
      "updatedAt": "2022-01-29T00:57:02Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "750a307a437d95418d640db824f444bdd1116279",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/fixes-and-poc",
      "headRefOid": "105c3aaf93261754965c9717d027f8d2455a35a3",
      "closedAt": "2022-01-29T00:57:01Z",
      "mergedAt": "2022-01-29T00:57:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b2a7d2eed48fec2afcd881c685231adf0c9056a0"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly I rebased on top of `master` and pulled in your change. I'll merge this now and focus on test vector capabilities next. Then I'll focus on RFC8032 compatibility. ",
          "createdAt": "2022-01-29T00:56:31Z",
          "updatedAt": "2022-01-29T00:56:31Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84zqZf-",
          "commit": {
            "abbreviatedOid": "3d7265f"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T22:07:31Z",
          "updatedAt": "2022-01-28T22:07:31Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Three, to be specific",
              "createdAt": "2022-01-28T22:07:31Z",
              "updatedAt": "2022-01-28T22:07:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84zqabu",
          "commit": {
            "abbreviatedOid": "3d7265f"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good! ",
          "createdAt": "2022-01-28T22:13:40Z",
          "updatedAt": "2022-01-28T22:13:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84zqqFd",
          "commit": {
            "abbreviatedOid": "105c3aa"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-29T00:56:41Z",
          "updatedAt": "2022-01-29T00:56:42Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Rebased and fixed.",
              "createdAt": "2022-01-29T00:56:41Z",
              "updatedAt": "2022-01-29T00:56:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 59,
      "id": "PR_kwDOEpUZs84xxBU-",
      "title": "Must verify signature shares",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/59",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "... and other editorial things.\r\n\r\nCloses #54.",
      "createdAt": "2022-01-29T01:07:56Z",
      "updatedAt": "2022-01-31T14:58:16Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b2a7d2eed48fec2afcd881c685231adf0c9056a0",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/must-verify-shares",
      "headRefOid": "af648871345eaaf281ed8818c546d9abc06926a1",
      "closedAt": "2022-01-31T14:58:11Z",
      "mergedAt": "2022-01-31T14:58:11Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "c650e456f649701b6e5947a170d30d100fb6e605"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84zqqp0",
          "commit": {
            "abbreviatedOid": "af64887"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-29T01:08:20Z",
          "updatedAt": "2022-01-29T01:08:20Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "@dconnolly @chelseakomlo this is the real change.",
              "createdAt": "2022-01-29T01:08:20Z",
              "updatedAt": "2022-01-29T01:08:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84zvAas",
          "commit": {
            "abbreviatedOid": "af64887"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great to me",
          "createdAt": "2022-01-31T14:58:03Z",
          "updatedAt": "2022-01-31T14:58:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 60,
      "id": "PR_kwDOEpUZs84xx1CW",
      "title": "Add bare test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/60",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "First part of #49. It adds test vector generation for ristretto255 with one (2,3) participant configuration. We can extend this in a followup change to iterate through more subsets. Of course, I'm open to renaming or restructuring anything differently!\r\n\r\nExample output:\r\n\r\n```\r\n{\r\n  \"config\": {\r\n    \"NUM_SIGNERS\": \"3\",\r\n    \"THRESHOLD_LIMIT\": \"2\",\r\n    \"group\": \"ristretto255\",\r\n    \"hash\": \"SHA512\"\r\n  },\r\n  \"inputs\": {\r\n    \"group_secret_key\": \"c604c785ada70d77a5256ae21767de8c3304115237d262134f5e46e512cf8e03\",\r\n    \"group_public_key\": \"0ca5c9fa211b6c240e4e7af6c6cf624c7b0fd1f8916eacbb6518267f332db951\",\r\n    \"message\": \"74657374\",\r\n    \"signers\": {\r\n      \"1\": {\r\n        \"signer_share\": \"24dd5ca618a461a81256e505fcd5aaf356b3c45aa479a49cf3744710f306740f\"\r\n      },\r\n      \"2\": {\r\n        \"signer_share\": \"95e1fc69693da381a9e96886014b98457a6278631121e625988b483bd33e590b\"\r\n      },\r\n      \"3\": {\r\n        \"signer_share\": \"06e69c2dbad6e45a407dec0607c085979d112c6c7ec827af3ca24966b3763e07\"\r\n      }\r\n    }\r\n  },\r\n  \"round_one_outputs\": {\r\n    \"participants\": [\r\n      \"1\",\r\n      \"2\"\r\n    ],\r\n    \"commitment_list\": \"000000018a9049503ade17c922b4ab93e0fd7802f8986ee4cdd25d7e2da2691139160c15eee7a9c7fec3460c27c160c683d46a4fd18f537c055c3998748b8e4cd8f29b3e00000002d88068bbb009b13a005e66b143d52591f4081f4b3b342ebc4035af868ba82f7b3647dbbc9e46bd45cd1fe21d6197971b84e3ae2a7a165aaade49ee2ebf1eba5a\",\r\n    \"group_blinding_factor\": \"675146437df1bbc42f8fa74673c2c6a5393bb469a02c1402d497428575b55900\",\r\n    \"outputs\": {\r\n      \"1\": {\r\n        \"hiding_nonce\": \"ed8366feb6b1d05d1f46acb727061e43aadfafe9c10e5a64e7518d63e3263503\",\r\n        \"blinding_nonce\": \"019cbd1d7420292528f8cdd62f339fdabb602f04a95dac9dbcec831b8c681a09\",\r\n        \"hiding_nonce_commitment\": \"8a9049503ade17c922b4ab93e0fd7802f8986ee4cdd25d7e2da2691139160c15\",\r\n        \"blinding_nonce_commitment\": \"eee7a9c7fec3460c27c160c683d46a4fd18f537c055c3998748b8e4cd8f29b3e\"\r\n      },\r\n      \"2\": {\r\n        \"hiding_nonce\": \"89c61a42c8191a5ca41f2fe959843d333bcf43173b7de4c5c119e0e0d8b0e707\",\r\n        \"blinding_nonce\": \"e6d0f1d89ad552e383d6c6f4e8598cc3037d6e274d22da3089e7afbd4171ea02\",\r\n        \"hiding_nonce_commitment\": \"d88068bbb009b13a005e66b143d52591f4081f4b3b342ebc4035af868ba82f7b\",\r\n        \"blinding_nonce_commitment\": \"3647dbbc9e46bd45cd1fe21d6197971b84e3ae2a7a165aaade49ee2ebf1eba5a\"\r\n      }\r\n    }\r\n  },\r\n  \"round_two_outputs\": {\r\n    \"participants\": [\r\n      \"1\",\r\n      \"2\"\r\n    ],\r\n    \"outputs\": {\r\n      \"1\": {\r\n        \"sig_share\": \"949f570b01bb3da189e1138fa4a1637ebaef75afb7ba97a0e1e147e204a3c800\",\r\n        \"group_commitment_share\": \"aad18ee8e1aa4e0a1fc5da36aab1ed0b138a503e14a2dba771b2c170efd00f34\"\r\n      },\r\n      \"2\": {\r\n        \"sig_share\": \"0bbfe9944fa5e6f9aefe5b663598719305e0aad0f9e438318bce9e9f281e7d01\",\r\n        \"group_commitment_share\": \"8613328b9f574fdf988f60593da63ad3d2645ab62010048dccf65b6c3504a60a\"\r\n      }\r\n    }\r\n  },\r\n  \"final_output\": {\r\n    \"sig\": {\r\n      \"R\": \"828e92dec234c47d60f9fc4b2bb6c794b06e83d0a6be9479dd8e3fc66c69cf3e\",\r\n      \"z\": \"9f5e41a05060249b38e06ff5d939d511c0cf2080b19fd0d16cb0e6812dc14502\"\r\n    }\r\n  }\r\n}\r\n```",
      "createdAt": "2022-01-29T14:57:44Z",
      "updatedAt": "2022-02-01T20:04:25Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c650e456f649701b6e5947a170d30d100fb6e605",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/bare-vectors",
      "headRefOid": "ddf19b14f5ec08d1b2e3e8962e2844e4d3bbe486",
      "closedAt": "2022-02-01T13:53:48Z",
      "mergedAt": "2022-02-01T13:53:48Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ea438bae97198bce95c247e0aa3183ef331d6937"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly are there any changes you'd like to see?",
          "createdAt": "2022-01-31T23:56:18Z",
          "updatedAt": "2022-01-31T23:56:18Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "In the example output, the message is the ascii bytes of \"test\" ?\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/pull/60/files#diff-b6283431df51877348499b43b450f92d66069e6e453423a3a35b949720801d3aR201",
          "createdAt": "2022-02-01T07:56:11Z",
          "updatedAt": "2022-02-01T07:56:11Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> In the example output, the message is the ascii bytes of \"test\" ?\n> \n> \n\nYep, that's right. I figured it was best to use a consistent encoding (hex) for all values. ",
          "createdAt": "2022-02-01T13:28:24Z",
          "updatedAt": "2022-02-01T13:28:24Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84zxEAf",
          "commit": {
            "abbreviatedOid": "ddf19b1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-31T22:40:41Z",
          "updatedAt": "2022-01-31T22:40:42Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-01-31T22:40:41Z",
              "updatedAt": "2022-01-31T22:40:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84zxECg",
          "commit": {
            "abbreviatedOid": "ddf19b1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-31T22:40:52Z",
          "updatedAt": "2022-01-31T22:40:53Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-01-31T22:40:52Z",
              "updatedAt": "2022-01-31T22:40:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84zxEFF",
          "commit": {
            "abbreviatedOid": "ddf19b1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-31T22:41:06Z",
          "updatedAt": "2022-01-31T22:41:07Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-01-31T22:41:06Z",
              "updatedAt": "2022-01-31T22:41:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84zyFmc",
          "commit": {
            "abbreviatedOid": "ddf19b1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks great, just one q about how we're representing the message in the vector outputs",
          "createdAt": "2022-02-01T07:58:37Z",
          "updatedAt": "2022-02-01T07:58:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 61,
      "id": "PR_kwDOEpUZs84x2ReU",
      "title": "Limit number of signers to 2^16-1.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/61",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #56.",
      "createdAt": "2022-01-31T16:09:04Z",
      "updatedAt": "2022-01-31T18:48:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c650e456f649701b6e5947a170d30d100fb6e605",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/signer-limit",
      "headRefOid": "b29cf8ad7d37f83a11b2414624103c79d6ee42d5",
      "closedAt": "2022-01-31T18:48:50Z",
      "mergedAt": "2022-01-31T18:48:50Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "67131ee827afe17c3e1fb385b07ed5d23cd2f8de"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84zwOhU",
          "commit": {
            "abbreviatedOid": "b29cf8a"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-31T18:48:41Z",
          "updatedAt": "2022-01-31T18:48:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 62,
      "id": "PR_kwDOEpUZs84x56R_",
      "title": "RFC8032 compat with some open questions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/62",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This demonstrates RFC8032 compliance (for vanilla Ed25519, not the ctx or ph variants). To do so, it creates a signature using the reference implementation, encodes the signature and public key as RFC8032 expects, and then calls the signature verification routine [from the RFC](https://datatracker.ietf.org/doc/html/rfc8032#section-6).\r\n\r\nThis change raises a couple of questions (to me), including:\r\n1. The pre-hash step introduced in [this PR](https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46), to address [this issue](https://github.com/cfrg/draft-irtf-cfrg-frost/issues/43), meant that the vanilla ed25519 interop wouldn't work. (Vanilla ed25519 doesn't pre-hash the message when computing the challenge.) I think we got the change in #46 wrong. [The audit](https://github.com/ZcashFoundation/redjubjub/blob/main/zcash-frost-audit-report-20210323.pdf) only recommends this pre-hashing step when computing the blinding factor, not when computing the challenge, so I _think_ we could revert the pre-hashing step for the challenge.\r\n1. Do we want to specify a pile of different variants like RFC8032 did, including \"vanilla\" mode (Ed25519), pre-hash (ph) mode (Ed25519ph), and context-specific (ctx) mode (Ed25519ctx)? It seems like a lot of complexity to do everything, and to be honest I'm not sure what variant is most useful in practice. Does anyone else know?\r\n1. What is our API abstraction boundary? EdDSA uses byte strings everywhere, including signing and verifying keys, as well as signatures. Currently, we operate on \"internal\" types, e.g., scalars and elements for signing and verifying keys, respectively, and our signatures are (element, scalar) tuples. Should we adopt a higher layer of abstraction?\r\n1. Signature verification in this change was updated to match the logic in RFC8032. That is, rather than re-derive the group commitment and check for equality, check that the relation holds `[8][S]B = [8]R + [8][k]A'`.\r\n1. How do we want to handle domain separation for H1 and H2 for ciphersuites that target groups outside of RFC8032? \r\n\r\nStarting as a draft for now until we figure out what to do about (1), since I commented out the pre-hashing step in the code. I don't think we need to block on any of the remaining questions.\r\n\r\ncc @veorq in case he has thoughts on (1)",
      "createdAt": "2022-02-01T14:11:08Z",
      "updatedAt": "2022-02-04T15:05:16Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "872a7082d9ea33596b72d47a2d9ce906df25af06",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/rfc8032-compat",
      "headRefOid": "36c2b9043000beccc6e4f2551963a3dd7ba66ccf",
      "closedAt": "2022-02-04T01:20:39Z",
      "mergedAt": "2022-02-04T01:20:39Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9cf547200e7a0c18f24a3a2a32a51c2a8167fda0"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> 1. The pre-hash step introduced in [this PR](https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46), to address [this issue](https://github.com/cfrg/draft-irtf-cfrg-frost/issues/43), meant that the vanilla ed25519 interop wouldn't work. (Vanilla ed25519 doesn't pre-hash the message when computing the challenge.) I think we got the change in [Messages should be a fixed size when hashing\u00a0#46](https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46) wrong. [The audit](https://github.com/ZcashFoundation/redjubjub/blob/main/zcash-frost-audit-report-20210323.pdf) only recommends this pre-hashing step when computing the blinding factor, not when computing the challenge, so I _think_ we could revert the pre-hashing step for the challenge.\r\n\r\nYes I think this is correct. @chelseakomlo can confirm\r\n\r\n\r\n",
          "createdAt": "2022-02-03T07:18:06Z",
          "updatedAt": "2022-02-03T07:18:06Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> 2\\. Do we want to specify a pile of different variants like RFC8032 did, including \"vanilla\" mode (Ed25519), pre-hash (ph) mode (Ed25519ph), and context-specific (ctx) mode (Ed25519ctx)? It seems like a lot of complexity to do everything, and to be honest I'm not sure what variant is most useful in practice. Does anyone else know?\r\n\r\nI don't think we want to go far with this. Looking at [ed25519-dalek](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/), and the [`RustCrypto/ed25519` API](https://github.com/RustCrypto/signatures/blob/master/ed25519/src/lib.rs), and the [`ring_compat` ed25519 API](https://docs.rs/ring-compat/latest/ring_compat/signature/trait.Signer.html#tymethod.try_sign), they just sign a message that is an arbitrary set of bytes, nothing explicit about prehashing, or ctx mode. Feels like we should keep it simple as possible while remaining compatible with APIs like those.\r\n\r\n",
          "createdAt": "2022-02-03T07:27:48Z",
          "updatedAt": "2022-02-03T07:27:48Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> 3\\. What is our API abstraction boundary? EdDSA uses byte strings everywhere, including signing and verifying keys, as well as signatures. Currently, we operate on \"internal\" types, e.g., scalars and elements for signing and verifying keys, respectively, and our signatures are (element, scalar) tuples. Should we adopt a higher layer of abstraction?\r\n\r\nThe `Signature` is parsed into algebraic structures from 64 bytes, similar for the `VerifyingKey`s, etc. Maybe we make the serialization \"pattern\" of these explicit like we do for the `SigningShare`, `SigningPackage`, etc message types, but not getting too deep because then we have to make them explicit per parameter set?",
          "createdAt": "2022-02-03T07:32:37Z",
          "updatedAt": "2022-02-03T07:32:37Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> 5\\. How do we want to handle domain separation for H1 and H2 for ciphersuites that target groups outside of RFC8032?\r\n\r\nNot sure I understand",
          "createdAt": "2022-02-03T07:37:55Z",
          "updatedAt": "2022-02-03T07:37:55Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> 4\\. Signature verification in this change was updated to match the logic in RFC8032. That is, rather than re-derive the group commitment and check for equality, check that the relation holds `[8][S]B = [8]R + [8][k]A'`.\r\n\r\nI think the code looks ok, @chelseakomlo may want to look at the verification tweak",
          "createdAt": "2022-02-03T07:47:55Z",
          "updatedAt": "2022-02-03T07:48:22Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The Signature is parsed into algebraic structures from 64 bytes, similar for the VerifyingKeys, etc. Maybe we make the serialization \"pattern\" of these explicit like we do for the SigningShare, SigningPackage, etc message types, but not getting too deep because then we have to make them explicit per parameter set?\r\n\r\nI'm not really sure I followed this. Having thought on this some more, I suggest we stick with the interface we have right now and then file a separate issue to further refine this down the road based on RG feedback.",
          "createdAt": "2022-02-03T14:08:18Z",
          "updatedAt": "2022-02-03T14:08:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> > 4. Signature verification in this change was updated to match the logic in RFC8032. That is, rather than re-derive the group commitment and check for equality, check that the relation holds `[8][S]B = [8]R + [8][k]A'`.\r\n> \r\n> I think the code looks ok, @chelseakomlo may want to look at the verification tweak\r\n\r\nMaybe @hdevalence has an opinion on which validation check is preferred? =)",
          "createdAt": "2022-02-03T14:09:12Z",
          "updatedAt": "2022-02-03T14:09:12Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> > 5. How do we want to handle domain separation for H1 and H2 for ciphersuites that target groups outside of RFC8032?\r\n>\r\n> Not sure I understand\r\n\r\nAh, sorry, I was basically asking if we wanted to keep the H1/H2 definitions we have in the draft, which fold in `contextString` and a string (`\"rho\"` or `\"chal\"`), for groups that are not targeting RFC8032. H2 is the hash we use for generating the challenge, so for RFC8032 compatibility, I don't think we can do as the draft currently describes. (Indeed, the code in this PR doesn't do it.) Does that clarify? ",
          "createdAt": "2022-02-03T14:11:03Z",
          "updatedAt": "2022-02-03T14:11:51Z"
        },
        {
          "author": "hdevalence",
          "authorAssociation": "NONE",
          "body": "> > > 4. Signature verification in this change was updated to match the logic in RFC8032. That is, rather than re-derive the group commitment and check for equality, check that the relation holds `[8][S]B = [8]R + [8][k]A'`.\r\n> \r\n> Maybe @hdevalence has an opinion on which validation check is preferred? =)\r\n\r\nHey, I don't have a lot of context, so discount this drive-by comment as appropriate, but I'm wondering to what extent it's actually important for a FROST specification to specify the verification check?  To me, one of the big benefits of FROST or other threshold signature constructions is that they produce signatures that look and act just like normal signatures (because they are just normal signatures) -- the part that is distinct and special is in the *creation* of those signatures.  So my assumption would be that it's better not to specify verification at all, except by reference to the method used by whatever signature scheme is in use (i.e., rather than trying to match RFC8032 exactly, just refer to it).\r\n\r\nOtherwise, my opinion would be to use the ZIP215-style validation checks, but again, this is a drive-by comment, so feel free to discount it as appropriate, it's certainly possible that there's context I'm missing.",
          "createdAt": "2022-02-03T18:06:17Z",
          "updatedAt": "2022-02-03T18:06:17Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "> > 1. The pre-hash step introduced in [this PR](https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46), to address [this issue](https://github.com/cfrg/draft-irtf-cfrg-frost/issues/43), meant that the vanilla ed25519 interop wouldn't work. (Vanilla ed25519 doesn't pre-hash the message when computing the challenge.) I think we got the change in [Messages should be a fixed size when hashing\u00a0#46](https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46) wrong. [The audit](https://github.com/ZcashFoundation/redjubjub/blob/main/zcash-frost-audit-report-20210323.pdf) only recommends this pre-hashing step when computing the blinding factor, not when computing the challenge, so I _think_ we could revert the pre-hashing step for the challenge.\r\n> \r\n> Yes I think this is correct. @chelseakomlo can confirm\r\n\r\nYes, I'm fine with this change.",
          "createdAt": "2022-02-03T19:27:12Z",
          "updatedAt": "2022-02-03T19:27:12Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Hey, I don't have a lot of context, so discount this drive-by comment as appropriate, but I'm wondering to what extent it's actually important for a FROST specification to specify the verification check? To me, one of the big benefits of FROST or other threshold signature constructions is that they produce signatures that look and act just like normal signatures (because they are just normal signatures) -- the part that is distinct and special is in the creation of those signatures. \r\n\r\nThanks for chiming in! This is a fair question. If we were only targeting RFC8032, then I agree that specifying verification would be redundant. However, one of the established goals -- which may certainly change -- is to support ciphersuites based on NIST curves (P-256) and ristretto255. As RFC8032 does not apply to these variants, we needed to include the verification algorithm.\r\n\r\nI'm not really familiar with the ZIP215-style validation checks, but I'll take a look. \ud83d\udc4d ",
          "createdAt": "2022-02-03T19:29:45Z",
          "updatedAt": "2022-02-03T19:29:45Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo addressed your comments -- thanks!",
          "createdAt": "2022-02-03T22:10:41Z",
          "updatedAt": "2022-02-03T22:10:41Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84z8V4c",
          "commit": {
            "abbreviatedOid": "af54557"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T07:33:54Z",
          "updatedAt": "2022-02-03T07:33:54Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Re: \r\n\r\n>The pre-hash step introduced in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46, to address https://github.com/cfrg/draft-irtf-cfrg-frost/issues/43, meant that the vanilla ed25519 interop wouldn't work. (Vanilla ed25519 doesn't pre-hash the message when computing the challenge.) I think we got the change in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46 wrong. [The audit](https://github.com/ZcashFoundation/redjubjub/blob/main/zcash-frost-audit-report-20210323.pdf) only recommends this pre-hashing step when computing the blinding factor, not when computing the challenge, so I think we could revert the pre-hashing step for the challenge.",
              "createdAt": "2022-02-03T07:33:54Z",
              "updatedAt": "2022-02-03T07:33:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84z8WBz",
          "commit": {
            "abbreviatedOid": "af54557"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T07:34:44Z",
          "updatedAt": "2022-02-03T07:34:44Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "\ud83d\udc40 ",
              "createdAt": "2022-02-03T07:34:44Z",
              "updatedAt": "2022-02-03T07:34:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84z8WJo",
          "commit": {
            "abbreviatedOid": "af54557"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T07:35:24Z",
          "updatedAt": "2022-02-03T07:35:25Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "re:\r\n\r\n> The pre-hash step introduced in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46, to address https://github.com/cfrg/draft-irtf-cfrg-frost/issues/43, meant that the vanilla ed25519 interop wouldn't work. (Vanilla ed25519 doesn't pre-hash the message when computing the challenge.) I think we got the change in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46 wrong. [The audit](https://github.com/ZcashFoundation/redjubjub/blob/main/zcash-frost-audit-report-20210323.pdf) only recommends this pre-hashing step when computing the blinding factor, not when computing the challenge, so I think we could revert the pre-hashing step for the challenge.",
              "createdAt": "2022-02-03T07:35:24Z",
              "updatedAt": "2022-02-03T07:35:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84z9_Nj",
          "commit": {
            "abbreviatedOid": "e1893d0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T14:06:50Z",
          "updatedAt": "2022-02-03T14:06:50Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Yeah, if we agree that we should revert this change, I'll tidy up this code and fix the main spec.",
              "createdAt": "2022-02-03T14:06:50Z",
              "updatedAt": "2022-02-03T14:06:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84z9_Yd",
          "commit": {
            "abbreviatedOid": "e1893d0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T14:07:21Z",
          "updatedAt": "2022-02-03T14:07:21Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "I'll tidy this up before I promote this PR for real review.",
              "createdAt": "2022-02-03T14:07:21Z",
              "updatedAt": "2022-02-03T14:07:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84z9_dm",
          "commit": {
            "abbreviatedOid": "e1893d0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T14:07:28Z",
          "updatedAt": "2022-02-03T14:07:29Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "(Same comment as above)",
              "createdAt": "2022-02-03T14:07:29Z",
              "updatedAt": "2022-02-03T14:07:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AF8u",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good with these changes. Thanks for this huge effort.",
          "createdAt": "2022-02-03T21:35:09Z",
          "updatedAt": "2022-02-03T21:59:36Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "The `x,y` need to have subscript `i`s on them",
              "createdAt": "2022-02-03T21:35:09Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 133,
              "body": "Need subscript `j`s on the `(x,y)` values; same for values below.",
              "createdAt": "2022-02-03T21:37:25Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 143,
              "body": "Shouldn't this be \"are Scalar and Element values respectively\", if I'm reading this correctly?",
              "createdAt": "2022-02-03T21:39:17Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 153,
              "body": "Swap out `B` for `commitment_list`, no?",
              "createdAt": "2022-02-03T21:39:42Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 163,
              "body": "We need this to be either `H1,H2,H3`",
              "createdAt": "2022-02-03T21:40:29Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 205,
              "body": "Needs to be `H1/H2/H3`",
              "createdAt": "2022-02-03T21:41:21Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 212,
              "body": "Capital R_i",
              "createdAt": "2022-02-03T21:42:03Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 59,
              "body": "`H3` is an alias for `H` due to backwards compatibility reasons with {{!RFC8032}}",
              "createdAt": "2022-02-03T21:50:02Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 85,
              "body": "If you are feeling up for it, `participant_index` is more accurate, as opposed to just the ordering of the list.",
              "createdAt": "2022-02-03T21:52:29Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 99,
              "body": "Do you need the \"for each signer\" specification again at the end of this sentence?",
              "createdAt": "2022-02-03T21:53:06Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 136,
              "body": "This list MUST be sorted in ascending order with respect to the participant identifier.",
              "createdAt": "2022-02-03T21:53:53Z",
              "updatedAt": "2022-02-03T21:59:37Z"
            },
            {
              "originalPosition": 236,
              "body": "Shouldn't you specify the input for `H2` as you did on line 672 for `H1`?",
              "createdAt": "2022-02-03T21:56:58Z",
              "updatedAt": "2022-02-03T21:59:37Z"
            },
            {
              "originalPosition": 236,
              "body": "Also, I seem to recall that the public key is also hashed into H2. Double checking that is not the case here.",
              "createdAt": "2022-02-03T21:58:33Z",
              "updatedAt": "2022-02-03T21:59:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840ALh9",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:00:53Z",
          "updatedAt": "2022-02-03T22:00:53Z",
          "comments": [
            {
              "originalPosition": 143,
              "body": "Oh, yes, duh.",
              "createdAt": "2022-02-03T22:00:53Z",
              "updatedAt": "2022-02-03T22:00:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840ALjQ",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:01:00Z",
          "updatedAt": "2022-02-03T22:01:00Z",
          "comments": [
            {
              "originalPosition": 153,
              "body": "Yep, thanks, missed this one.",
              "createdAt": "2022-02-03T22:01:00Z",
              "updatedAt": "2022-02-03T22:01:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AMDF",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:03:15Z",
          "updatedAt": "2022-02-03T22:03:15Z",
          "comments": [
            {
              "originalPosition": 236,
              "body": "No -- this is specifically done for compatibility with RFC8032.",
              "createdAt": "2022-02-03T22:03:15Z",
              "updatedAt": "2022-02-03T22:03:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AMOR",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:04:04Z",
          "updatedAt": "2022-02-03T22:04:04Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "What do we want H3 to be for non-RFC8032 suites?",
              "createdAt": "2022-02-03T22:04:04Z",
              "updatedAt": "2022-02-03T22:04:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AMqf",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:06:06Z",
          "updatedAt": "2022-02-03T22:06:07Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "`index` is the notation used in the parameter description, so I'll leave this as-is for now.",
              "createdAt": "2022-02-03T22:06:07Z",
              "updatedAt": "2022-02-03T22:06:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AMtX",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:06:21Z",
          "updatedAt": "2022-02-03T22:06:21Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "I picked something arbitrary for domain separation of H3 with these suites.",
              "createdAt": "2022-02-03T22:06:21Z",
              "updatedAt": "2022-02-03T22:06:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AOBC",
          "commit": {
            "abbreviatedOid": "a7a36b4"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:12:54Z",
          "updatedAt": "2022-02-03T22:12:54Z",
          "comments": [
            {
              "originalPosition": 205,
              "body": "Thanks, yeah, I forgot to undo this change!",
              "createdAt": "2022-02-03T22:12:54Z",
              "updatedAt": "2022-02-03T22:12:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AODO",
          "commit": {
            "abbreviatedOid": "a7a36b4"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:13:06Z",
          "updatedAt": "2022-02-03T22:13:06Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "(See below)",
              "createdAt": "2022-02-03T22:13:06Z",
              "updatedAt": "2022-02-03T22:13:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Am5K",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:00:45Z",
          "updatedAt": "2022-02-04T01:00:46Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "I worry a little about the use of `x` and `y` because that may be confused with `x`-coordinates / `y`-coordinates of curve group elements (points) in affine coordinates",
              "createdAt": "2022-02-04T01:00:45Z",
              "updatedAt": "2022-02-04T01:00:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Am7f",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:01:05Z",
          "updatedAt": "2022-02-04T01:01:05Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-02-04T01:01:05Z",
              "updatedAt": "2022-02-04T01:01:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Am_M",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:01:31Z",
          "updatedAt": "2022-02-04T01:01:32Z",
          "comments": [
            {
              "originalPosition": 125,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-02-04T01:01:31Z",
              "updatedAt": "2022-02-04T01:01:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnBb",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:01:47Z",
          "updatedAt": "2022-02-04T01:01:47Z",
          "comments": [
            {
              "originalPosition": 138,
              "body": "Same here",
              "createdAt": "2022-02-04T01:01:47Z",
              "updatedAt": "2022-02-04T01:01:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnDe",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:02:00Z",
          "updatedAt": "2022-02-04T01:02:01Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-02-04T01:02:01Z",
              "updatedAt": "2022-02-04T01:02:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnDl",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:02:01Z",
          "updatedAt": "2022-02-04T01:02:02Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Yeah, I didn't want to use D/E though, since we dropped that notation. Happy to take suggestions!",
              "createdAt": "2022-02-04T01:02:01Z",
              "updatedAt": "2022-02-04T01:02:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnGD",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:02:22Z",
          "updatedAt": "2022-02-04T01:02:22Z",
          "comments": [
            {
              "originalPosition": 171,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-02-04T01:02:22Z",
              "updatedAt": "2022-02-04T01:02:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnJs",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:02:50Z",
          "updatedAt": "2022-02-04T01:02:51Z",
          "comments": [
            {
              "originalPosition": 224,
              "body": "Cool, this helps",
              "createdAt": "2022-02-04T01:02:50Z",
              "updatedAt": "2022-02-04T01:02:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnNH",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:03:19Z",
          "updatedAt": "2022-02-04T01:03:20Z",
          "comments": [
            {
              "originalPosition": 243,
              "body": "Very good",
              "createdAt": "2022-02-04T01:03:19Z",
              "updatedAt": "2022-02-04T01:03:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnS9",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Tiny q, non-blocking. Yay!",
          "createdAt": "2022-02-04T01:04:02Z",
          "updatedAt": "2022-02-04T01:04:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 63,
      "id": "PR_kwDOEpUZs84x-not",
      "title": "Hash in message into rho",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/63",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-02T16:40:01Z",
      "updatedAt": "2022-02-03T03:37:35Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ea438bae97198bce95c247e0aa3183ef331d6937",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "rho",
      "headRefOid": "18b05359e4be282686d4f60cf5e9629821ed41a7",
      "closedAt": "2022-02-03T03:37:35Z",
      "mergedAt": "2022-02-03T03:37:35Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "872a7082d9ea33596b72d47a2d9ce906df25af06"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84z5-e4",
          "commit": {
            "abbreviatedOid": "a9381d1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-02T16:51:33Z",
          "updatedAt": "2022-02-02T16:51:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84z5_wN",
          "commit": {
            "abbreviatedOid": "a9381d1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "@chelseakomlo please also update the reference implementation!",
          "createdAt": "2022-02-02T16:55:28Z",
          "updatedAt": "2022-02-02T16:55:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84z74QG",
          "commit": {
            "abbreviatedOid": "6f1147d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-03T03:36:57Z",
          "updatedAt": "2022-02-03T03:37:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\n        msg_hash = self.H3(message)\n```\n",
              "createdAt": "2022-02-03T03:36:57Z",
              "updatedAt": "2022-02-03T03:37:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 65,
      "id": "PR_kwDOEpUZs84yDgPg",
      "title": "Add automation to run poc make test",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/65",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-03T23:02:17Z",
      "updatedAt": "2022-02-03T23:15:11Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "872a7082d9ea33596b72d47a2d9ce906df25af06",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "ci",
      "headRefOid": "c89789165aebc71d05cc066672c3e63fa5012fe7",
      "closedAt": "2022-02-03T23:15:09Z",
      "mergedAt": "2022-02-03T23:15:09Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "af8c9651702c14ad8c3b15e40ae72b530110fa7b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 66,
      "id": "PR_kwDOEpUZs84yDkQC",
      "title": "Use sagemath:latest docker image to run make test",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/66",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-03T23:32:18Z",
      "updatedAt": "2022-02-04T22:15:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "af8c9651702c14ad8c3b15e40ae72b530110fa7b",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "docker-sage",
      "headRefOid": "91766afb598f124680bdffc18361e5b1851cabf4",
      "closedAt": "2022-02-04T22:15:42Z",
      "mergedAt": "2022-02-04T22:15:42Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "21471bbd339579da93ba14c0b1a4a79e6279c45a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 67,
      "id": "PR_kwDOEpUZs84yFxqg",
      "title": "Format test vectors and include them in the draft",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/67",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #49.",
      "createdAt": "2022-02-04T15:38:44Z",
      "updatedAt": "2022-02-12T01:38:57Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "21471bbd339579da93ba14c0b1a4a79e6279c45a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/format-vectors",
      "headRefOid": "9cd6bf88fba6f7b2197a971124130eafc4e096ca",
      "closedAt": "2022-02-12T01:38:54Z",
      "mergedAt": "2022-02-12T01:38:54Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "e6767854decbe72ea4b9e9838f7056dd21d795d9"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Rebased.",
          "createdAt": "2022-02-04T22:22:02Z",
          "updatedAt": "2022-02-04T22:22:02Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly I made your suggested name change in this PR. Please have a look!",
          "createdAt": "2022-02-10T14:42:48Z",
          "updatedAt": "2022-02-10T14:42:48Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Is this name change also happening here?\n\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/pull/67#discussion_r803715421",
          "createdAt": "2022-02-10T15:16:21Z",
          "updatedAt": "2022-02-10T15:16:21Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly yep -- see the latest changes! (I pushed locally but didn't see that I had a conflict, so the commits you see just now are me resolving those conflicts.)",
          "createdAt": "2022-02-10T16:19:40Z",
          "updatedAt": "2022-02-10T16:26:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840Pvkn",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:21:47Z",
          "updatedAt": "2022-02-08T19:21:48Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Should we include these here if we're not using them rn? Maybe if we expand the defined ciphersuites we can bring them back",
              "createdAt": "2022-02-08T19:21:48Z",
              "updatedAt": "2022-02-08T19:21:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840PvsJ",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:22:14Z",
          "updatedAt": "2022-02-08T19:22:14Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-02-08T19:22:14Z",
              "updatedAt": "2022-02-08T19:22:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Pvvs",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:22:27Z",
          "updatedAt": "2022-02-08T19:22:27Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-02-08T19:22:27Z",
              "updatedAt": "2022-02-08T19:22:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840PwNp",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:24:16Z",
          "updatedAt": "2022-02-08T19:24:17Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "Should this go after the Signer round one outputs?",
              "createdAt": "2022-02-08T19:24:17Z",
              "updatedAt": "2022-02-08T19:24:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840PxLQ",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:27:58Z",
          "updatedAt": "2022-02-08T19:27:59Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "I think this needs a better name as it's different than just the public commitments being used",
              "createdAt": "2022-02-08T19:27:59Z",
              "updatedAt": "2022-02-08T19:27:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Py9b",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:34:57Z",
          "updatedAt": "2022-02-08T19:34:58Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n  output signature share and group commitment share as produced in {{frost-round-two}}.\r\n```",
              "createdAt": "2022-02-08T19:34:57Z",
              "updatedAt": "2022-02-08T19:34:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P6S6",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T20:03:21Z",
          "updatedAt": "2022-02-08T20:03:21Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Yeah, probably. But let's do that in a separate PR.",
              "createdAt": "2022-02-08T20:03:21Z",
              "updatedAt": "2022-02-08T20:03:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P63V",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T20:05:36Z",
          "updatedAt": "2022-02-08T20:05:37Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "Eh, I don't feel strongly. It could.",
              "createdAt": "2022-02-08T20:05:37Z",
              "updatedAt": "2022-02-08T20:05:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P692",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T20:06:00Z",
          "updatedAt": "2022-02-08T20:06:00Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "What is \"this\"? Are you referring to `commitment_list` or `participants`?",
              "createdAt": "2022-02-08T20:06:00Z",
              "updatedAt": "2022-02-08T20:06:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Vx38",
          "commit": {
            "abbreviatedOid": "dc3e2d2"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks good to me",
          "createdAt": "2022-02-09T22:23:44Z",
          "updatedAt": "2022-02-09T22:30:42Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I would say \"compatible with\" here.",
              "createdAt": "2022-02-09T22:23:44Z",
              "updatedAt": "2022-02-09T22:30:42Z"
            },
            {
              "originalPosition": 92,
              "body": "Why is this value needed? If it is purely for testing, you might add something about how this value is obtained by performing Shamir.Recover with the participant's secrets. ",
              "createdAt": "2022-02-09T22:26:53Z",
              "updatedAt": "2022-02-09T22:30:42Z"
            },
            {
              "originalPosition": 307,
              "body": "Should we have a test for a different number of signers, just in case? ",
              "createdAt": "2022-02-09T22:27:55Z",
              "updatedAt": "2022-02-09T22:30:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840V1be",
          "commit": {
            "abbreviatedOid": "dc3e2d2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T22:42:19Z",
          "updatedAt": "2022-02-09T22:42:19Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nmeant to produce signatures compatible with Ed448 as specified in {{!RFC8032}}.\r\n```",
              "createdAt": "2022-02-09T22:42:19Z",
              "updatedAt": "2022-02-09T22:42:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840V1lV",
          "commit": {
            "abbreviatedOid": "47f24f7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T22:43:08Z",
          "updatedAt": "2022-02-09T22:43:08Z",
          "comments": [
            {
              "originalPosition": 307,
              "body": "Do you mean a different number for `MAX_SIGNERS`, or `NUM_SIGNERS`? I don't think changing `MAX_SIGNERS` increases test coverage. Changing `NUM_SIGNERS` might, however. I would prefer to do that in a separate PR.",
              "createdAt": "2022-02-09T22:43:08Z",
              "updatedAt": "2022-02-09T22:43:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840V1r6",
          "commit": {
            "abbreviatedOid": "47f24f7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T22:43:40Z",
          "updatedAt": "2022-02-09T22:43:40Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "Right -- one can test that Shamir recovery yields this group secret. ",
              "createdAt": "2022-02-09T22:43:40Z",
              "updatedAt": "2022-02-09T22:43:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Wg35",
          "commit": {
            "abbreviatedOid": "47f24f7"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-10T04:30:38Z",
          "updatedAt": "2022-02-10T04:30:38Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Sorry, `commitment_list`",
              "createdAt": "2022-02-10T04:30:38Z",
              "updatedAt": "2022-02-10T04:30:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Yume",
          "commit": {
            "abbreviatedOid": "47f24f7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-10T14:13:06Z",
          "updatedAt": "2022-02-10T14:13:07Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "True -- it's the encoded group commitment list plus the message hash. I'll change the name to `binding_factor_input`.",
              "createdAt": "2022-02-10T14:13:06Z",
              "updatedAt": "2022-02-10T14:13:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840f_xd",
          "commit": {
            "abbreviatedOid": "9cd6bf8"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks fantastic, thanks @chris-wood ",
          "createdAt": "2022-02-12T01:38:46Z",
          "updatedAt": "2022-02-12T01:38:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 71,
      "id": "PR_kwDOEpUZs84yLokI",
      "title": "Add Ed448 suite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/71",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #69.",
      "createdAt": "2022-02-07T16:13:49Z",
      "updatedAt": "2022-02-08T23:44:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "caw/format-vectors",
      "baseRefOid": "3f4b408327cf8d4aabf299da41ac80941f10f3dd",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/add-ed448",
      "headRefOid": "5353338acc3e464275b6fcb136cb5fa8177ec70a",
      "closedAt": "2022-02-08T23:44:55Z",
      "mergedAt": "2022-02-08T23:44:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "dc3e2d258ff1c9cd51f48a06e067b2ceaf6cd42d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840PDVl",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks good to me, thank you!",
          "createdAt": "2022-02-08T17:03:06Z",
          "updatedAt": "2022-02-08T17:03:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs840PzeN",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:37:00Z",
          "updatedAt": "2022-02-08T19:37:00Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This is `edwards448` here and `ed448` below, should we pick one?",
              "createdAt": "2022-02-08T19:37:00Z",
              "updatedAt": "2022-02-08T19:37:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P0yq",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:41:50Z",
          "updatedAt": "2022-02-08T19:41:51Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "So Edwards448 by definition has a cofactor. Should we clarify that we are still trying to do these Schnorr signatures in the prime order subgroup, not 'just' the composite-order group defined by the whole elliptic curve?",
              "createdAt": "2022-02-08T19:41:51Z",
              "updatedAt": "2022-02-08T19:41:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P2dp",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:48:23Z",
          "updatedAt": "2022-02-08T19:48:23Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "This is also to retain compat with Ed448 signatures? EDIT: hah yes as mentioned below \ud83d\ude48",
              "createdAt": "2022-02-08T19:48:23Z",
              "updatedAt": "2022-02-08T19:48:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P3rx",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Non-blocking q's, looks good",
          "createdAt": "2022-02-08T19:53:13Z",
          "updatedAt": "2022-02-08T19:53:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs840P7dU",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T20:07:52Z",
          "updatedAt": "2022-02-08T20:07:52Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Heh, yeah. Do you have a preference? \ud83e\udd37 ",
              "createdAt": "2022-02-08T20:07:52Z",
              "updatedAt": "2022-02-08T20:07:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P7kA",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T20:08:17Z",
          "updatedAt": "2022-02-08T20:08:17Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "That's not a bad idea. Can we do this in a followup PR? (And would you be willing to do that?)",
              "createdAt": "2022-02-08T20:08:17Z",
              "updatedAt": "2022-02-08T20:08:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P7lS",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T20:08:21Z",
          "updatedAt": "2022-02-08T20:08:21Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": ":) ",
              "createdAt": "2022-02-08T20:08:21Z",
              "updatedAt": "2022-02-08T20:08:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 73,
      "id": "PR_kwDOEpUZs84yQ4cJ",
      "title": "Update single-signer Schnorr signature operations names",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/73",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "They were talking about 'group' commitments and keys ",
      "createdAt": "2022-02-08T22:07:21Z",
      "updatedAt": "2022-02-08T22:08:30Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "21471bbd339579da93ba14c0b1a4a79e6279c45a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-1",
      "headRefOid": "81b6b3cd8e34516470f9289755e9835bb80a8d26",
      "closedAt": "2022-02-08T22:08:01Z",
      "mergedAt": "2022-02-08T22:08:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "890f446ba5d1be1ab3ff01b8ac542205c9d3a91a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840QXd3",
          "commit": {
            "abbreviatedOid": "81b6b3c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-08T22:07:48Z",
          "updatedAt": "2022-02-08T22:07:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 74,
      "id": "PR_kwDOEpUZs84yRZes",
      "title": "fix output documentation for secret_share_combine",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/74",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-09T02:25:01Z",
      "updatedAt": "2022-02-09T12:40:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "890f446ba5d1be1ab3ff01b8ac542205c9d3a91a",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "doc-fix",
      "headRefOid": "174d537271401add1ddb5004609f12bafe298c8c",
      "closedAt": "2022-02-09T03:04:20Z",
      "mergedAt": "2022-02-09T03:04:19Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b4fedc870e3b07055db9f9086972ef2981b8609a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840RA9e",
          "commit": {
            "abbreviatedOid": "174d537"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you! \ud83d\ude4f",
          "createdAt": "2022-02-09T03:04:16Z",
          "updatedAt": "2022-02-09T03:04:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 75,
      "id": "PR_kwDOEpUZs84yb8Aq",
      "title": "Refactor the document for better flow",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/75",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There was a bit of redundant information, so I cleaned that up and (I think) improved the flow.\r\n\r\nI think we still need to do a pass over variable names in the main protocol doc, but that can happen later.",
      "createdAt": "2022-02-10T21:52:46Z",
      "updatedAt": "2022-02-12T17:48:06Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "623333798381a5be5ed65381e860119f8023ca1f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/refactor-doc",
      "headRefOid": "0f66b72ee658ac4d3436c9bf11d33025557c68f6",
      "closedAt": "2022-02-12T17:48:06Z",
      "mergedAt": "2022-02-12T17:48:06Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b4e659166de32ff18632ddfdb3d81471ca36a73e"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks! @chelseakomlo, please review and merge when convenient.",
          "createdAt": "2022-02-11T21:16:44Z",
          "updatedAt": "2022-02-11T21:16:44Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840fhiO",
          "commit": {
            "abbreviatedOid": "b8d7f3f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-11T21:06:54Z",
          "updatedAt": "2022-02-11T21:06:54Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "```suggestion\r\n- Participant `i`s signing key, which is the i-th secret share of `s`.\r\n```",
              "createdAt": "2022-02-11T21:06:54Z",
              "updatedAt": "2022-02-11T21:06:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840fipi",
          "commit": {
            "abbreviatedOid": "843fa42"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-11T21:13:02Z",
          "updatedAt": "2022-02-11T21:13:03Z",
          "comments": [
            {
              "originalPosition": 266,
              "body": "```suggestion\r\nThe protocol as specified in this document does not target the following goals:\r\n```",
              "createdAt": "2022-02-11T21:13:02Z",
              "updatedAt": "2022-02-11T21:13:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840fi3x",
          "commit": {
            "abbreviatedOid": "843fa42"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-11T21:13:48Z",
          "updatedAt": "2022-02-11T21:13:48Z",
          "comments": [
            {
              "originalPosition": 268,
              "body": "```suggestion\r\n* Post quantum security. FROST, like generic Schnorr signatures, requires the hardness of the Discrete Logarithm Problem.\r\n```",
              "createdAt": "2022-02-11T21:13:48Z",
              "updatedAt": "2022-02-11T21:13:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840fjF0",
          "commit": {
            "abbreviatedOid": "843fa42"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-11T21:15:01Z",
          "updatedAt": "2022-02-11T21:15:01Z",
          "comments": [
            {
              "originalPosition": 268,
              "body": "I only make this comment because the Shamir secret sharing is in fact quantum resilient, but the group actions like the additive group stuff to generate the group Schnorr signature, is not ",
              "createdAt": "2022-02-11T21:15:01Z",
              "updatedAt": "2022-02-11T21:15:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840fjQK",
          "commit": {
            "abbreviatedOid": "315832b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM!",
          "createdAt": "2022-02-11T21:15:56Z",
          "updatedAt": "2022-02-11T21:15:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs840gRk6",
          "commit": {
            "abbreviatedOid": "315832b"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great, and added a few nitpicky changes. Thanks @chris-wood ",
          "createdAt": "2022-02-12T17:38:36Z",
          "updatedAt": "2022-02-12T17:43:24Z",
          "comments": [
            {
              "originalPosition": 187,
              "body": "I wouldn't call this a round, it is more of an aggregation step.",
              "createdAt": "2022-02-12T17:38:36Z",
              "updatedAt": "2022-02-12T17:43:24Z"
            },
            {
              "originalPosition": 194,
              "body": "This is `signing key share`",
              "createdAt": "2022-02-12T17:39:06Z",
              "updatedAt": "2022-02-12T17:43:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gRsw",
          "commit": {
            "abbreviatedOid": "6068fac"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:44:04Z",
          "updatedAt": "2022-02-12T17:44:04Z",
          "comments": [
            {
              "originalPosition": 194,
              "body": "Copy-pasted from existing text. We can update it.",
              "createdAt": "2022-02-12T17:44:04Z",
              "updatedAt": "2022-02-12T17:44:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gRxR",
          "commit": {
            "abbreviatedOid": "a400482"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:47:33Z",
          "updatedAt": "2022-02-12T17:47:33Z",
          "comments": [
            {
              "originalPosition": 234,
              "body": "```suggestion\r\n{{frost-aggregation}}.\r\n```",
              "createdAt": "2022-02-12T17:47:33Z",
              "updatedAt": "2022-02-12T17:47:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gRxe",
          "commit": {
            "abbreviatedOid": "a400482"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:47:41Z",
          "updatedAt": "2022-02-12T17:47:41Z",
          "comments": [
            {
              "originalPosition": 256,
              "body": "```suggestion\r\n## Signature Share Aggregation {#frost-aggregation}\r\n```",
              "createdAt": "2022-02-12T17:47:41Z",
              "updatedAt": "2022-02-12T17:47:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 76,
      "id": "PR_kwDOEpUZs84ydf7E",
      "title": "improved pseudo code for derive_lagrange_coefficient",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/76",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "the rationale is that in order to understand \"index\", you need to read the whole document. This change makes `derive_lagrange_coefficient` more self-contained.",
      "createdAt": "2022-02-11T02:18:59Z",
      "updatedAt": "2022-02-11T14:08:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b4fedc870e3b07055db9f9086972ef2981b8609a",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "doc-lagrange",
      "headRefOid": "d63dc8dcdd4373a13e763ee7c28248018817d47c",
      "closedAt": "2022-02-11T03:15:25Z",
      "mergedAt": "2022-02-11T03:15:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "bc2a318d4d5f713bae6d68dafd7fdb6014017aaf"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Another solid improvement :) keep them coming, @aldenml!",
          "createdAt": "2022-02-11T03:15:20Z",
          "updatedAt": "2022-02-11T03:15:20Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "thanks :)",
          "createdAt": "2022-02-11T14:08:28Z",
          "updatedAt": "2022-02-11T14:08:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840b9Fi",
          "commit": {
            "abbreviatedOid": "d63dc8d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-11T03:15:02Z",
          "updatedAt": "2022-02-11T03:15:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 77,
      "id": "PR_kwDOEpUZs84yjJye",
      "title": "Add Schnorr to the title",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/77",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "So as to distinguish it from solutions for RSA or ECDSA signatures, which can be dealt with separately.",
      "createdAt": "2022-02-11T21:09:30Z",
      "updatedAt": "2022-02-11T21:17:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "bc2a318d4d5f713bae6d68dafd7fdb6014017aaf",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/add-schnorr-to-title",
      "headRefOid": "4531a2d86041039a8b66d6de50a0e26e0f532bde",
      "closedAt": "2022-02-11T21:17:13Z",
      "mergedAt": "2022-02-11T21:17:13Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "51664a77b0e02b86fa2cddccacc13fb5055c4d5d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840fjXh",
          "commit": {
            "abbreviatedOid": "4531a2d"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83d\udcaf",
          "createdAt": "2022-02-11T21:16:37Z",
          "updatedAt": "2022-02-11T21:16:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDOEpUZs84yjLrv",
      "title": "Only trigger Sage workflow when the poc/ files change",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/78",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-11T21:19:37Z",
      "updatedAt": "2022-02-11T21:20:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "51664a77b0e02b86fa2cddccacc13fb5055c4d5d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-1",
      "headRefOid": "f2d75123d4abb18dd119636f7160751d1117d940",
      "closedAt": "2022-02-11T21:20:13Z",
      "mergedAt": "2022-02-11T21:20:13Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b494082f0ebc6726f081548265f1be165a911dca"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840fkAW",
          "commit": {
            "abbreviatedOid": "f2d7512"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-11T21:20:09Z",
          "updatedAt": "2022-02-11T21:20:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 79,
      "id": "PR_kwDOEpUZs84ykUDT",
      "title": "Add change log",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/79",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-12T00:54:48Z",
      "updatedAt": "2022-02-12T19:39:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b494082f0ebc6726f081548265f1be165a911dca",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/change-log",
      "headRefOid": "6dd537fcf2d0d38ff57c214f9dcb436819341de3",
      "closedAt": "2022-02-12T19:39:33Z",
      "mergedAt": "2022-02-12T19:39:33Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "c7308703401a26953881f08af2a855618f625ebe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840gT1n",
          "commit": {
            "abbreviatedOid": "6dd537f"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks @chris-wood, looks great to me.",
          "createdAt": "2022-02-12T19:39:25Z",
          "updatedAt": "2022-02-12T19:39:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOEpUZs84ynWnu",
      "title": "some fixes in pseudo code for sign",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/80",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- the statement `msg_hash = H3(msg)` was repeated, it's done near the beginning.",
      "createdAt": "2022-02-12T16:31:52Z",
      "updatedAt": "2022-02-12T17:53:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e6767854decbe72ea4b9e9838f7056dd21d795d9",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "doc-sign",
      "headRefOid": "b5555cfd086902f7ae9f17a8e86f43056868a461",
      "closedAt": "2022-02-12T17:44:37Z",
      "mergedAt": "2022-02-12T17:44:37Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "623333798381a5be5ed65381e860119f8023ca1f"
      },
      "comments": [
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood I made the changes, waiting for the next review",
          "createdAt": "2022-02-12T17:08:24Z",
          "updatedAt": "2022-02-12T17:08:24Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Can you please also update the description used in `encode_group_commitment_list`?",
          "createdAt": "2022-02-12T17:08:56Z",
          "updatedAt": "2022-02-12T17:08:56Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "yes, and also\r\n```\r\n- nonce_i, pair of Scalar values (d, e) generated in round one.\r\n- comm_i, pair of Element values (D, E) generated in round one\r\n```",
          "createdAt": "2022-02-12T17:09:50Z",
          "updatedAt": "2022-02-12T17:09:50Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "done, waiting for next review",
          "createdAt": "2022-02-12T17:17:24Z",
          "updatedAt": "2022-02-12T17:17:24Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840gQXa",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T16:39:33Z",
          "updatedAt": "2022-02-12T16:45:01Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "This is noted in the inputs of `derive_lagrange_coefficients()`",
              "createdAt": "2022-02-12T16:39:34Z",
              "updatedAt": "2022-02-12T16:45:01Z"
            },
            {
              "originalPosition": 8,
              "body": "I think your branch is behind, we renamed these",
              "createdAt": "2022-02-12T16:40:17Z",
              "updatedAt": "2022-02-12T16:45:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gQuj",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T16:57:13Z",
          "updatedAt": "2022-02-12T16:57:13Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I just checked again, and it's `(x_j, y_j)` in `master`, and my branch is `1` commit ahead of `cfrg:master`. Let me know if I'm missing something, thanks.",
              "createdAt": "2022-02-12T16:57:13Z",
              "updatedAt": "2022-02-12T16:57:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gQyP",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:00:29Z",
          "updatedAt": "2022-02-12T17:00:30Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "We're referring to these as `hiding_nonce_commitment` and `binding_nonce_commitment` -- I'd prefer we use those names.",
              "createdAt": "2022-02-12T17:00:29Z",
              "updatedAt": "2022-02-12T17:00:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gQye",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:00:37Z",
          "updatedAt": "2022-02-12T17:00:37Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Yeah, I'd prefer we drop this comment.",
              "createdAt": "2022-02-12T17:00:37Z",
              "updatedAt": "2022-02-12T17:00:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gQzE",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks for dropping the redundant `msg_hash` computation! I'd like to see some other changes before we land this, though.",
          "createdAt": "2022-02-12T17:01:01Z",
          "updatedAt": "2022-02-12T17:01:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs840gQ05",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:02:17Z",
          "updatedAt": "2022-02-12T17:02:17Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "OK, I will change to those names",
              "createdAt": "2022-02-12T17:02:17Z",
              "updatedAt": "2022-02-12T17:02:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gQ2w",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:03:59Z",
          "updatedAt": "2022-02-12T17:04:00Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "OK, I will drop this comment",
              "createdAt": "2022-02-12T17:04:00Z",
              "updatedAt": "2022-02-12T17:04:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gRkZ",
          "commit": {
            "abbreviatedOid": "87a0433"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:38:11Z",
          "updatedAt": "2022-02-12T17:38:12Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\n  def sign(index, sk_i, group_public_key, nonce_i, comm_i, msg, commitment_list, participant_list):\r\n```",
              "createdAt": "2022-02-12T17:38:12Z",
              "updatedAt": "2022-02-12T17:38:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gRku",
          "commit": {
            "abbreviatedOid": "87a0433"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-12T17:38:28Z",
          "updatedAt": "2022-02-12T17:38:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 81,
      "id": "PR_kwDOEpUZs84yvwEI",
      "title": "removed PK input from schnorr_signature_generate, renamed r var to k",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/81",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "this change matches the POC code and the rename from `r` to `k` is an improvement code-wise IMO",
      "createdAt": "2022-02-13T23:51:26Z",
      "updatedAt": "2022-02-15T00:08:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c7308703401a26953881f08af2a855618f625ebe",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "code-schnorr",
      "headRefOid": "73e1645ffc1d0f0433cb763413c087b1170b9537",
      "closedAt": "2022-02-14T22:58:30Z",
      "mergedAt": "2022-02-14T22:58:30Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5c4bb72a084656c153a2b37b12051c8339af8fb5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840g_vC",
          "commit": {
            "abbreviatedOid": "308dc0f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-02-14T00:03:02Z",
          "updatedAt": "2022-02-14T00:03:10Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "`s` is not defined",
              "createdAt": "2022-02-14T00:03:02Z",
              "updatedAt": "2022-02-14T00:03:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840g_yd",
          "commit": {
            "abbreviatedOid": "308dc0f"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-14T00:04:10Z",
          "updatedAt": "2022-02-14T00:04:10Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "right, was a copy&paste from POC code, fixing it right now",
              "createdAt": "2022-02-14T00:04:10Z",
              "updatedAt": "2022-02-14T00:04:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840ljF7",
          "commit": {
            "abbreviatedOid": "73e1645"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-14T22:25:08Z",
          "updatedAt": "2022-02-14T22:25:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDOEpUZs84y0tBm",
      "title": "remove trailing space in context string in H1, H2 and H3 (test vectors update)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/83",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "an attempt to fix #82",
      "createdAt": "2022-02-15T00:42:07Z",
      "updatedAt": "2022-02-15T00:50:11Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "5c4bb72a084656c153a2b37b12051c8339af8fb5",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "fix-h-ctx-str",
      "headRefOid": "5085f5c14ce5b46f13a81f71447e744cd195ac94",
      "closedAt": "2022-02-15T00:42:54Z",
      "mergedAt": "2022-02-15T00:42:54Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e4996bcfced76748206f4bdfd1032832f0f227cc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840l4Hz",
          "commit": {
            "abbreviatedOid": "5085f5c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-15T00:42:49Z",
          "updatedAt": "2022-02-15T00:42:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 84,
      "id": "PR_kwDOEpUZs84y5CSi",
      "title": "minor fixes in secret_share_split pseudo code",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/84",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-16T00:12:08Z",
      "updatedAt": "2022-02-16T18:57:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e4996bcfced76748206f4bdfd1032832f0f227cc",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "fix-sss",
      "headRefOid": "7a6a70a911a192ab0d20859ffc255f48a9f418c6",
      "closedAt": "2022-02-16T18:50:45Z",
      "mergedAt": "2022-02-16T18:50:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "83184ef84efd7c277ec7d63a9e40640abec14546"
      },
      "comments": [
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "done, waiting for next review",
          "createdAt": "2022-02-16T18:29:38Z",
          "updatedAt": "2022-02-16T18:29:38Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840vLP6",
          "commit": {
            "abbreviatedOid": "7a7b996"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "One minor nit, otherwise thanks!",
          "createdAt": "2022-02-16T16:11:29Z",
          "updatedAt": "2022-02-16T16:12:04Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  def secret_share_shard(s, n, t):\r\n```\r\n\r\nCan we also update the Sage code to match? The \"shard\" terminology comes from the [VDAF spec](https://cjpatton.github.io/vdaf/draft-patton-cfrg-vdaf.html#name-sharding), which I quite like.",
              "createdAt": "2022-02-16T16:11:29Z",
              "updatedAt": "2022-02-16T16:12:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840v0Wq",
          "commit": {
            "abbreviatedOid": "7a7b996"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-16T18:19:36Z",
          "updatedAt": "2022-02-16T18:19:36Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Sure, I will also change one more minor thing in `trusted_dealer_keygen`",
              "createdAt": "2022-02-16T18:19:36Z",
              "updatedAt": "2022-02-16T18:19:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840v1j1",
          "commit": {
            "abbreviatedOid": "7a7b996"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-16T18:24:05Z",
          "updatedAt": "2022-02-16T18:24:05Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "and thanks for linking `VDAFs`, in my list of TODO to read :)",
              "createdAt": "2022-02-16T18:24:05Z",
              "updatedAt": "2022-02-16T18:24:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840v8vs",
          "commit": {
            "abbreviatedOid": "7a6a70a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-16T18:50:40Z",
          "updatedAt": "2022-02-16T18:50:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 85,
      "id": "PR_kwDOEpUZs84y9Jmc",
      "title": "Specify signature encoding based on group Element and Scalar serialization",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/85",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Let's address the cofactor verification check in #12.\r\n\r\nCloses #72.\r\nCloses #70.",
      "createdAt": "2022-02-16T22:32:48Z",
      "updatedAt": "2022-02-24T21:29:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "83184ef84efd7c277ec7d63a9e40640abec14546",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/signature-encoding",
      "headRefOid": "25f4a086ff6ae5c4a0b5ab069d0b26068ee3d696",
      "closedAt": "2022-02-19T03:11:33Z",
      "mergedAt": "2022-02-19T03:11:33Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6093adc7d9e3ea507ffb124db532261db2cd484e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840680S",
          "commit": {
            "abbreviatedOid": "962edfe"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-19T01:13:12Z",
          "updatedAt": "2022-02-19T01:13:12Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "Should we say all commitments in general? ",
              "createdAt": "2022-02-19T01:13:12Z",
              "updatedAt": "2022-02-19T01:13:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840681z",
          "commit": {
            "abbreviatedOid": "962edfe"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-19T01:13:45Z",
          "updatedAt": "2022-02-19T01:13:45Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "```suggestion\r\nUpon receipt from each Signer, the Coordinator MUST validate the input\r\n```",
              "createdAt": "2022-02-19T01:13:45Z",
              "updatedAt": "2022-02-19T01:13:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84068_v",
          "commit": {
            "abbreviatedOid": "962edfe"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-19T01:17:47Z",
          "updatedAt": "2022-02-19T01:17:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs8407AFa",
          "commit": {
            "abbreviatedOid": "25f4a08"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-19T03:10:58Z",
          "updatedAt": "2022-02-19T03:10:59Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I think that's implied by validating the list.",
              "createdAt": "2022-02-19T03:10:59Z",
              "updatedAt": "2022-02-19T03:10:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8407AF6",
          "commit": {
            "abbreviatedOid": "25f4a08"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-19T03:11:28Z",
          "updatedAt": "2022-02-19T03:11:28Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Thanks!",
              "createdAt": "2022-02-19T03:11:28Z",
              "updatedAt": "2022-02-19T03:11:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 86,
      "id": "PR_kwDOEpUZs84zFNTl",
      "title": "remove non-pre-hash message in pseudo-code",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/86",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-18T13:02:31Z",
      "updatedAt": "2022-02-23T13:32:31Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "08087b582ffc94bb0b5fb8ff486f13c9204dbd34",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "poc-msg-hash",
      "headRefOid": "0d2c75821e732e3e3a9acfd671cc96d4e392f8d0",
      "closedAt": "2022-02-23T13:10:41Z",
      "mergedAt": "2022-02-23T13:10:41Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4dde4866b9ec2226726ab15e5be42a9f73a926a5"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Good catch, but I think we want to switch this around. In particular, I think the code is correct, but the pseudocode is wrong. @dconnolly, please correct me if I'm mistaken, but I thought we concluded that the \"non-pre-hash\" variant of EdDSA is most common.",
          "createdAt": "2022-02-22T16:34:40Z",
          "updatedAt": "2022-02-22T16:34:40Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, I can tell you that there is a benefit to having the pre-hash variant of the pseudo-code, in terms of not allocating memory, but maybe there is a way around it. Either way, I'm waiting for your decision, since I need it to match the vectors \ud83d\ude09, thanks for the review",
          "createdAt": "2022-02-22T18:16:40Z",
          "updatedAt": "2022-02-22T18:16:40Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Well, I can tell you that there is a benefit to having the pre-hash variant of the pseudo-code, in terms of not allocating memory, but maybe there is a way around it\r\n\r\nI don't think this is true. In fact, I would claim the opposite is true! The application _has_ to allocate memory for the message in either case, and since the hash incrementally folds the message into its internal state, there's no benefit to be gained from pre-hashing the message before computing the challenge. In contrast, pre-hashing means you now need to allocate memory for the message digest somewhere. ",
          "createdAt": "2022-02-22T18:19:09Z",
          "updatedAt": "2022-02-22T18:19:09Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "right, I meant to say _dynamically_ allocate in a line-by-line replication of the pseudo-code (In hindsight I shouldn't even mention that). Actually, I was already thinking of using the hash fold variant if you decide to use the \"non-pre-hash\" variant.\r\n\r\nI'm willing to work on the changes to this PR.",
          "createdAt": "2022-02-22T18:30:07Z",
          "updatedAt": "2022-02-22T18:30:07Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> right, I meant to say dynamically allocate in a line-by-line replication of the pseudo-code (In hindsight I shouldn't even mention that)\r\n\r\nWell, I would hope that implementations that are memory pressured would do the sensible thing here =) Let's use this PR to make the pseudocode changes per the comment above.",
          "createdAt": "2022-02-22T19:28:35Z",
          "updatedAt": "2022-02-22T19:28:35Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @chris-wood , I made the changes, rebased and squashed, waiting for your review",
          "createdAt": "2022-02-23T13:04:30Z",
          "updatedAt": "2022-02-23T13:04:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841HHXi",
          "commit": {
            "abbreviatedOid": "0d2c758"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-23T13:10:33Z",
          "updatedAt": "2022-02-23T13:10:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 87,
      "id": "PR_kwDOEpUZs84zTCod",
      "title": "Fix verify_signature_share",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/87",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-22T16:48:59Z",
      "updatedAt": "2022-02-22T17:03:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "6093adc7d9e3ea507ffb124db532261db2cd484e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/fix-verify-sig-share",
      "headRefOid": "a8cddf0811de3d084095613e79adf43d537f935e",
      "closedAt": "2022-02-22T17:03:51Z",
      "mergedAt": "2022-02-22T17:03:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "08087b582ffc94bb0b5fb8ff486f13c9204dbd34"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841DYxo",
          "commit": {
            "abbreviatedOid": "a8cddf0"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-22T16:50:30Z",
          "updatedAt": "2022-02-22T16:50:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 88,
      "id": "PR_kwDOEpUZs84zTF1g",
      "title": "Drop I2OSP",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/88",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-22T17:03:59Z",
      "updatedAt": "2022-02-28T19:23:21Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "08087b582ffc94bb0b5fb8ff486f13c9204dbd34",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/drop-I2OSP",
      "headRefOid": "d62e340a46b36d4090fa8d133db5787dbdfd3dda",
      "closedAt": "2022-02-28T19:23:21Z",
      "mergedAt": "2022-02-28T19:23:21Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "713001785bcdbe46c02369a071b1192ce55c4617"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly can we merge this?",
          "createdAt": "2022-02-25T20:37:12Z",
          "updatedAt": "2022-02-25T20:37:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841DeW8",
          "commit": {
            "abbreviatedOid": "99b228d"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-22T17:07:08Z",
          "updatedAt": "2022-02-22T17:07:16Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Does this need to be defined further in the spec or link to such a description? ",
              "createdAt": "2022-02-22T17:07:09Z",
              "updatedAt": "2022-02-22T17:07:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841Def1",
          "commit": {
            "abbreviatedOid": "99b228d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-22T17:07:35Z",
          "updatedAt": "2022-02-22T17:07:35Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Is it not clearly defined already as-is? ",
              "createdAt": "2022-02-22T17:07:35Z",
              "updatedAt": "2022-02-22T17:07:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841Ei13",
          "commit": {
            "abbreviatedOid": "99b228d"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-22T21:29:06Z",
          "updatedAt": "2022-02-22T21:29:07Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "In the POC code it is, in the spec pseudocode it's a bit fuzzy",
              "createdAt": "2022-02-22T21:29:07Z",
              "updatedAt": "2022-02-22T21:29:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841EjEH",
          "commit": {
            "abbreviatedOid": "99b228d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-22T21:30:01Z",
          "updatedAt": "2022-02-22T21:30:01Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Can you elaborate on how it's fuzzy, or offer a suggestion to clarify?",
              "createdAt": "2022-02-22T21:30:01Z",
              "updatedAt": "2022-02-22T21:30:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YBYm",
          "commit": {
            "abbreviatedOid": "99b228d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T19:10:30Z",
          "updatedAt": "2022-02-28T19:10:35Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n  big-endian byte string. For example, `encode_uint16(310) = [0x01, 0x36]`.\r\n```",
              "createdAt": "2022-02-28T19:10:30Z",
              "updatedAt": "2022-02-28T19:10:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YBeG",
          "commit": {
            "abbreviatedOid": "99b228d"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T19:10:55Z",
          "updatedAt": "2022-02-28T19:10:55Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Resolved, thanks!",
              "createdAt": "2022-02-28T19:10:55Z",
              "updatedAt": "2022-02-28T19:10:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YBhn",
          "commit": {
            "abbreviatedOid": "d62e340"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2022-02-28T19:11:11Z",
          "updatedAt": "2022-02-28T19:11:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 89,
      "id": "PR_kwDOEpUZs84zTocc",
      "title": "Add note about applications needing to verify the message before signing",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/89",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We assume that messages to be signed are in fact valid for the higher-level application. This PR adds this as a note as a reminder to implementors. \r\n\r\nAddresses #47",
      "createdAt": "2022-02-22T20:10:43Z",
      "updatedAt": "2022-02-23T16:08:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "08087b582ffc94bb0b5fb8ff486f13c9204dbd34",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "verify-msg",
      "headRefOid": "a80ddbc70e6ad5566cd817d28d44f913a3d76108",
      "closedAt": "2022-02-23T16:08:27Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841EQyF",
          "commit": {
            "abbreviatedOid": "76d9eb3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-02-22T20:12:18Z",
          "updatedAt": "2022-02-22T20:12:28Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"Valid\" isn't really well-defined, so I would either remove it entirely, or put it in the security considerations.",
              "createdAt": "2022-02-22T20:12:18Z",
              "updatedAt": "2022-02-22T20:12:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841ESyQ",
          "commit": {
            "abbreviatedOid": "a80ddbc"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-02-22T20:20:58Z",
          "updatedAt": "2022-02-22T20:21:00Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Sorry, but I don't think my prior comment was clear. I don't think this is an appropriate MUST for the main protocol. It's not enforceable. This text belongs in the security considerations section.",
              "createdAt": "2022-02-22T20:20:58Z",
              "updatedAt": "2022-02-22T20:21:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841EYft",
          "commit": {
            "abbreviatedOid": "a80ddbc"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-22T20:44:57Z",
          "updatedAt": "2022-02-22T20:44:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 90,
      "id": "PR_kwDOEpUZs84zUQDw",
      "title": "Message validation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/90",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Alternative to #89.",
      "createdAt": "2022-02-23T00:44:02Z",
      "updatedAt": "2022-02-23T23:24:03Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "08087b582ffc94bb0b5fb8ff486f13c9204dbd34",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/input-validation",
      "headRefOid": "d8b2eb367a33c3b31d0b2c242386561e0e74d650",
      "closedAt": "2022-02-23T16:08:18Z",
      "mergedAt": "2022-02-23T16:08:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2a2861e3ca1112cbd58496799c6e082837c846fb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841FT6i",
          "commit": {
            "abbreviatedOid": "d8b2eb3"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great! Thanks @chris-wood ",
          "createdAt": "2022-02-23T03:23:41Z",
          "updatedAt": "2022-02-23T03:23:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs841KAm_",
          "commit": {
            "abbreviatedOid": "d8b2eb3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-23T23:24:03Z",
          "updatedAt": "2022-02-23T23:24:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 91,
      "id": "PR_kwDOEpUZs84zWF6U",
      "title": "minor fixes in pseudo-code",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/91",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-23T13:43:01Z",
      "updatedAt": "2022-02-23T16:09:42Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4dde4866b9ec2226726ab15e5be42a9f73a926a5",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "fix-verify-share",
      "headRefOid": "f64910818addbb98211fe35fbe46ac0c7c9ea1a9",
      "closedAt": "2022-02-23T16:09:04Z",
      "mergedAt": "2022-02-23T16:09:04Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "02107d776ac2be1ebcf369151428f3f4c4cd8997"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841IGoO",
          "commit": {
            "abbreviatedOid": "f649108"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-23T16:08:59Z",
          "updatedAt": "2022-02-23T16:08:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 92,
      "id": "PR_kwDOEpUZs84zX-4x",
      "title": "Describe commitment_share in the SignatureShare struct",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/92",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-23T23:26:18Z",
      "updatedAt": "2022-02-23T23:28:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "02107d776ac2be1ebcf369151428f3f4c4cd8997",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-1",
      "headRefOid": "5dc84beda47a4350c0dbcbf07cfe3506b48642a0",
      "closedAt": "2022-02-23T23:26:58Z",
      "mergedAt": "2022-02-23T23:26:58Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0a9947deafb9de2aac85db747c7e4e63f46f57d3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841KBCh",
          "commit": {
            "abbreviatedOid": "5dc84be"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-23T23:26:53Z",
          "updatedAt": "2022-02-23T23:26:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 93,
      "id": "PR_kwDOEpUZs84zX_Xn",
      "title": "Missing underscore",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/93",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-23T23:29:47Z",
      "updatedAt": "2022-02-23T23:32:10Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "0a9947deafb9de2aac85db747c7e4e63f46f57d3",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-1",
      "headRefOid": "872834ae49f9b7ba60ff6a6fc6399ab08334199d",
      "closedAt": "2022-02-23T23:32:10Z",
      "mergedAt": "2022-02-23T23:32:10Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e66d26c670e245c7117529d842884c1c856d796e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 94,
      "id": "PR_kwDOEpUZs84zfFKr",
      "title": "Breakout commitment share generation to an aggregate subroutine",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/94",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "And remove R_share as an output from round two. This also decomposes `sign` and `verify_signature_share` into smaller, reusable subroutines. ",
      "createdAt": "2022-02-25T20:32:29Z",
      "updatedAt": "2022-03-02T15:05:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "320cb6dbb5ffd79bc13413097dffeb5395f47866",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/breakout-comm-share",
      "headRefOid": "cfc2614bab933ae561a9460020219892be4f1ffc",
      "closedAt": "2022-03-02T15:05:20Z",
      "mergedAt": "2022-03-02T15:05:20Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6d98736ab4afb7fdcd10a914a65d5f8118f66010"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly any followup changes you'd like to see here?",
          "createdAt": "2022-02-28T21:34:32Z",
          "updatedAt": "2022-02-28T21:34:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841X3-U",
          "commit": {
            "abbreviatedOid": "9205e4f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T18:31:11Z",
          "updatedAt": "2022-02-28T18:31:12Z",
          "comments": [
            {
              "originalPosition": 167,
              "body": "```suggestion\r\n    issued in Round 1 by each signer, where each element in the list indicates the signer index j and their\r\n```",
              "createdAt": "2022-02-28T18:31:11Z",
              "updatedAt": "2022-02-28T18:31:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841X4Bd",
          "commit": {
            "abbreviatedOid": "9205e4f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T18:31:23Z",
          "updatedAt": "2022-02-28T18:31:24Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "```suggestion\r\n    list of commitments issued in Round 1 by each signer, where each element in the list indicates the signer index j and their\r\n```",
              "createdAt": "2022-02-28T18:31:23Z",
              "updatedAt": "2022-02-28T18:31:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841X_kW",
          "commit": {
            "abbreviatedOid": "9205e4f"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good, thanks for this change. ",
          "createdAt": "2022-02-28T19:02:21Z",
          "updatedAt": "2022-02-28T20:09:31Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "Lagrange coefficient",
              "createdAt": "2022-02-28T19:02:21Z",
              "updatedAt": "2022-02-28T20:09:31Z"
            },
            {
              "originalPosition": 187,
              "body": "I don't think `comm_i` needs to be an input anymore?",
              "createdAt": "2022-02-28T19:05:32Z",
              "updatedAt": "2022-02-28T20:09:31Z"
            },
            {
              "originalPosition": 156,
              "body": "to check that the signature share is valid",
              "createdAt": "2022-02-28T19:46:47Z",
              "updatedAt": "2022-02-28T20:09:31Z"
            },
            {
              "originalPosition": 161,
              "body": "We should probably have a \"the index MUST NOT equal `0`\"?",
              "createdAt": "2022-02-28T19:47:36Z",
              "updatedAt": "2022-02-28T20:09:31Z"
            },
            {
              "originalPosition": 206,
              "body": "Lagrange coefficient",
              "createdAt": "2022-02-28T19:51:29Z",
              "updatedAt": "2022-02-28T20:09:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841Yf8p",
          "commit": {
            "abbreviatedOid": "9ddb8a9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T21:31:25Z",
          "updatedAt": "2022-02-28T21:31:25Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "```suggestion\r\n    # Compute Lagrange coefficient\r\n```",
              "createdAt": "2022-02-28T21:31:25Z",
              "updatedAt": "2022-02-28T21:31:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YgEL",
          "commit": {
            "abbreviatedOid": "9ddb8a9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T21:31:58Z",
          "updatedAt": "2022-02-28T21:31:59Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "Not new text, so leaving this as-is. Let's file a separate issue if we want to change it?",
              "createdAt": "2022-02-28T21:31:59Z",
              "updatedAt": "2022-02-28T21:31:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YgZW",
          "commit": {
            "abbreviatedOid": "9ddb8a9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T21:33:38Z",
          "updatedAt": "2022-02-28T21:33:39Z",
          "comments": [
            {
              "originalPosition": 187,
              "body": "It's currently used directly, rather than being extracted from the commitment list, so I'm leaving this as-is for now. In a followup change, we should go through and implement helpers for mapping the commitment list to individual commitment values and participant lists.",
              "createdAt": "2022-02-28T21:33:38Z",
              "updatedAt": "2022-02-28T21:33:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841Yga3",
          "commit": {
            "abbreviatedOid": "9ddb8a9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T21:33:44Z",
          "updatedAt": "2022-02-28T21:33:45Z",
          "comments": [
            {
              "originalPosition": 206,
              "body": "```suggestion\r\n    # Compute Lagrange coefficient\r\n```",
              "createdAt": "2022-02-28T21:33:45Z",
              "updatedAt": "2022-02-28T21:33:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841Ygf4",
          "commit": {
            "abbreviatedOid": "8ec6d74"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T21:34:05Z",
          "updatedAt": "2022-02-28T21:34:05Z",
          "comments": [
            {
              "originalPosition": 156,
              "body": "```suggestion\r\nparameters, to check that the signature share is valid using the following procedure.\r\n```",
              "createdAt": "2022-02-28T21:34:05Z",
              "updatedAt": "2022-02-28T21:34:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YghT",
          "commit": {
            "abbreviatedOid": "8ec6d74"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T21:34:12Z",
          "updatedAt": "2022-02-28T21:34:12Z",
          "comments": [
            {
              "originalPosition": 156,
              "body": "Applied via suggestion.",
              "createdAt": "2022-02-28T21:34:12Z",
              "updatedAt": "2022-02-28T21:34:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841eSg0",
          "commit": {
            "abbreviatedOid": "9205e4f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-02T06:07:18Z",
          "updatedAt": "2022-03-02T06:07:18Z",
          "comments": [
            {
              "originalPosition": 156,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-03-02T06:07:18Z",
              "updatedAt": "2022-03-02T06:07:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841eS8j",
          "commit": {
            "abbreviatedOid": "9205e4f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-02T06:10:41Z",
          "updatedAt": "2022-03-02T06:10:41Z",
          "comments": [
            {
              "originalPosition": 232,
              "body": "```suggestion\r\n  - group_commitment, the group commitment returned by compute_group_commitment\r\n```",
              "createdAt": "2022-03-02T06:10:41Z",
              "updatedAt": "2022-03-02T06:10:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841eVs3",
          "commit": {
            "abbreviatedOid": "af73848"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-02T06:30:04Z",
          "updatedAt": "2022-03-02T06:30:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 95,
      "id": "PR_kwDOEpUZs84zqXmm",
      "title": "Bump actions/setup-python from 2 to 3.0.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/95",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 2 to 3.0.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Update default runtime to node16 (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/340\">actions/setup-python#340</a>)</li>\n<li>Update <code>package-lock.json</code> file version to 2, <code>@types/node</code> to 16.11.25 and <code>typescript</code> to 4.2.3 (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/341\">actions/setup-python#341</a>)</li>\n<li>Remove legacy <code>pypy2</code> and <code>pypy3</code> keywords (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/342\">actions/setup-python#342</a>)</li>\n</ul>\n<h3>Breaking Changes</h3>\n<p>With the update to Node 16, all scripts will now be run with Node 16 rather than Node 12.</p>\n<p>This new major release removes support of legacy <code>pypy2</code> and <code>pypy3</code> keywords. Please use more specific and flexible syntax to specify a PyPy version:</p>\n<pre lang=\"yaml\"><code>jobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version:\n        - 'pypy-2.7' # the latest available version of PyPy that supports Python 2.7\n        - 'pypy-3.8' # the latest available version of PyPy that supports Python 3.8\n        - 'pypy-3.8-v7.3.8' # Python 3.8 and PyPy 7.3.8\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}\n</code></pre>\n<p>See more usage examples in the <a href=\"https://github.com/actions/setup-python#specifying-a-pypy-version\">documentation</a></p>\n<h2>Update primary and restore keys for pip</h2>\n<p>In scope of this release we <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/303\">include a version of python in restore and primary cache keys for pip</a>. Besides, we add temporary fix for Windows caching <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/332\">issue</a>, that the <code>pip cache dir</code> command returns non zero exit code or writes to stderr. Moreover we updated <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/327\">node-fetch dependency</a>.</p>\n<h2>Update\u00a0actions/cache\u00a0version to 1.0.8</h2>\n<p>We have updated\u00a0<a href=\"https://github.com/actions/toolkit/blob/main/packages/cache/RELEASES.md#108\">actions/cache</a>\u00a0dependency version to 1.0.8 to support 10GB cache upload</p>\n<h2>Support caching dependencies</h2>\n<p>This release introduces dependency caching support (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/266\">actions/setup-python#266</a>)</p>\n<h2>Caching dependencies.</h2>\n<p>The action has a built-in functionality for caching and restoring pip/pipenv dependencies. The <code>cache</code> input is optional, and caching is turned off by default.</p>\n<p>Besides, this release introduces dependency caching support for mono repos and repositories with complex structure.</p>\n<p>By default, the action searches for the dependency file (requirements.txt for pip or Pipfile.lock for pipenv) in the whole repository. Use the <code>cache-dependency-path</code> input for cases when you want to override current behaviour and use different file for hash generation (for example requirements-dev.txt). This input supports wildcards or a list of file names for caching multiple dependencies.</p>\n<h3>Caching pip dependencies:</h3>\n<pre><code>steps:\n- uses: actions/checkout@v2\n- uses: actions/setup-python@v2\n  with:\n    python-version: '3.9'\n&lt;/tr&gt;&lt;/table&gt; \n</code></pre>\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/0ebf233433c08fb9061af664d501c3f3ff0e9e20\"><code>0ebf233</code></a> Remove legacy PyPy input (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/342\">#342</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/665cd78205d9937a51af8cdb754840e2bc95c2d5\"><code>665cd78</code></a> Update lockfileversion (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/341\">#341</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/93cb78f17ba30b733a6c17d0f21183bdc0140887\"><code>93cb78f</code></a> Update to node16 (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/340\">#340</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/setup-python/compare/v2...v3.0.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=2&new-version=3.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-02-28T12:34:09Z",
      "updatedAt": "2022-02-28T19:27:24Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "edaeb3f0584dbc1159c1a64ed684273b500c1b28",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-3.0.0",
      "headRefOid": "797a5cd4e8549757b169f0a34a49ccbf0bf11c2f",
      "closedAt": "2022-02-28T19:27:21Z",
      "mergedAt": "2022-02-28T19:27:21Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "dc6372ee542fe530be3cb0d89f92ac9848b260d5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841YFBn",
          "commit": {
            "abbreviatedOid": "797a5cd"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-28T19:27:13Z",
          "updatedAt": "2022-02-28T19:27:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 96,
      "id": "PR_kwDOEpUZs84zrv6i",
      "title": "Add `frost-ristretto255` to the existing implementations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/96",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-28T19:20:12Z",
      "updatedAt": "2022-04-18T17:01:38Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "edaeb3f0584dbc1159c1a64ed684273b500c1b28",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-2",
      "headRefOid": "f294b19127840ae8ba7f330dc41274c79bb45cc1",
      "closedAt": "2022-02-28T19:21:40Z",
      "mergedAt": "2022-02-28T19:21:40Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0f86b1918dc6216c3995178fedb20784c0fcd545"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 97,
      "id": "PR_kwDOEpUZs84zrwPc",
      "title": "Delete secrets when done",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/97",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #44.",
      "createdAt": "2022-02-28T19:21:50Z",
      "updatedAt": "2022-02-28T19:41:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "0f86b1918dc6216c3995178fedb20784c0fcd545",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/delete-secret-things",
      "headRefOid": "39f5807b3f397657916e6add98399e7f6e0309b3",
      "closedAt": "2022-02-28T19:41:36Z",
      "mergedAt": "2022-02-28T19:41:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a8f9c346c7f9b387374afd7b6b96959a2d982ba5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841YEKz",
          "commit": {
            "abbreviatedOid": "39f5807"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-28T19:23:15Z",
          "updatedAt": "2022-02-28T19:23:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs841YELi",
          "commit": {
            "abbreviatedOid": "39f5807"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-28T19:23:19Z",
          "updatedAt": "2022-02-28T19:23:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs841YEt9",
          "commit": {
            "abbreviatedOid": "39f5807"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T19:25:50Z",
          "updatedAt": "2022-02-28T19:25:50Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nthe nonce and SHOULD delete the corresponding commitment after this round completes.\r\n```",
              "createdAt": "2022-02-28T19:25:50Z",
              "updatedAt": "2022-02-28T19:25:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YFke",
          "commit": {
            "abbreviatedOid": "39f5807"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T19:29:41Z",
          "updatedAt": "2022-02-28T19:29:41Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Clarify to ensure that nonces are used only once. ",
              "createdAt": "2022-02-28T19:29:41Z",
              "updatedAt": "2022-02-28T19:29:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YIIp",
          "commit": {
            "abbreviatedOid": "39f5807"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T19:41:32Z",
          "updatedAt": "2022-02-28T19:41:33Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Done in #98.",
              "createdAt": "2022-02-28T19:41:32Z",
              "updatedAt": "2022-02-28T19:41:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 98,
      "id": "PR_kwDOEpUZs84zrymh",
      "title": "Require that nonces MUST NOT be used more than once",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/98",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-28T19:36:39Z",
      "updatedAt": "2022-02-28T19:41:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "dc6372ee542fe530be3cb0d89f92ac9848b260d5",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "chris-wood-patch-3",
      "headRefOid": "8aaf199ca6383979714904a09ad21c9ba8e582bd",
      "closedAt": "2022-02-28T19:41:46Z",
      "mergedAt": "2022-02-28T19:41:46Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "320cb6dbb5ffd79bc13413097dffeb5395f47866"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841YH0g",
          "commit": {
            "abbreviatedOid": "8aaf199"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good!",
          "createdAt": "2022-02-28T19:39:59Z",
          "updatedAt": "2022-02-28T19:39:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 100,
      "id": "PR_kwDOEpUZs84z02u7",
      "title": "Bump actions/checkout from 2 to 3",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/100",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/checkout](https://github.com/actions/checkout) from 2 to 3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/releases\">actions/checkout's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<ul>\n<li>Update default runtime to node16</li>\n</ul>\n<h2>v2.4.0</h2>\n<ul>\n<li>Convert SSH URLs like <code>org-&lt;ORG_ID&gt;@github.com:</code> to <code>https://github.com/</code> - <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/621\">pr</a></li>\n</ul>\n<h2>v2.3.5</h2>\n<p>Update dependencies</p>\n<h2>v2.3.4</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/379\">Add missing <code>await</code>s</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/360\">Swap to Environment Files</a></li>\n</ul>\n<h2>v2.3.3</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/345\">Remove Unneeded commit information from build logs</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/326\">Add Licensed to verify third party dependencies</a></li>\n</ul>\n<h2>v2.3.2</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/320\">Add Third Party License Information to Dist Files</a></p>\n<h2>v2.3.1</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></p>\n<h2>v2.3.0</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></p>\n<h2>v2.2.0</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></p>\n<h2>v2.1.1</h2>\n<p>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</p>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/157\">Add submodule support</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/144\">Follow proxy settings</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/141\">Fix ref for pr closed event when a pr is merged</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/128\">Fix issue checking detached when git less than 2.22</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/blob/main/CHANGELOG.md\">actions/checkout's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>v2.3.1</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></li>\n</ul>\n<h2>v2.3.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></li>\n</ul>\n<h2>v2.2.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/157\">Add submodule support</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/144\">Follow proxy settings</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/141\">Fix ref for pr closed event when a pr is merged</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/128\">Fix issue checking detached when git less than 2.22</a></li>\n</ul>\n<h2>v2.0.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/108\">Do not pass cred on command line</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/107\">Add input persist-credentials</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/104\">Fallback to REST API to download repo</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/checkout/commit/a12a3943b4bdde767164f792f33f40b04645d846\"><code>a12a394</code></a> update readme for v3 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/708\">#708</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/8f9e05e482293f862823fcca12d9eddfb3723131\"><code>8f9e05e</code></a> Update to node 16 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/689\">#689</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/230611dbd0eb52da1e1f4f7bc8bb0c3a339fc8b7\"><code>230611d</code></a> Change secret name for PAT to not start with GITHUB_ (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/623\">#623</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/checkout/compare/v2...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/checkout&package-manager=github_actions&previous-version=2&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-03-02T12:33:58Z",
      "updatedAt": "2022-03-02T19:01:30Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "320cb6dbb5ffd79bc13413097dffeb5395f47866",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/checkout-3",
      "headRefOid": "e509c8a9b9fac07444f204622e4de91a1780fdd6",
      "closedAt": "2022-03-02T19:01:27Z",
      "mergedAt": "2022-03-02T19:01:27Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "42e400b70f340dc527a9820f3e6c0ad321befd6c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841htOa",
          "commit": {
            "abbreviatedOid": "e509c8a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-02T19:01:22Z",
          "updatedAt": "2022-03-02T19:01:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 101,
      "id": "PR_kwDOEpUZs84z3QoO",
      "title": "minor fix in verify_signature_share pseudo code",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/101",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-03T01:22:49Z",
      "updatedAt": "2022-03-03T02:27:30Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "42e400b70f340dc527a9820f3e6c0ad321befd6c",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "minor-fix",
      "headRefOid": "aed60f95e1b8b59eda33c53a58c0aa9dc5f13fd4",
      "closedAt": "2022-03-03T01:58:45Z",
      "mergedAt": "2022-03-03T01:58:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e3bf48984f01a6330e23f843c3a6a9e8500854bb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841jAek",
          "commit": {
            "abbreviatedOid": "aed60f9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-03T01:58:41Z",
          "updatedAt": "2022-03-03T01:58:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 102,
      "id": "PR_kwDOEpUZs84z3dLw",
      "title": "add a c implementation to readme",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/102",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hello, for your consideration (relevant files):\r\n\r\nhttps://github.com/aldenml/ecc/blob/master/src/frost.h\r\nhttps://github.com/aldenml/ecc/blob/master/src/frost.c\r\nhttps://github.com/aldenml/ecc/blob/master/test/test_frost.c",
      "createdAt": "2022-03-03T03:27:56Z",
      "updatedAt": "2022-03-03T19:50:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e3bf48984f01a6330e23f843c3a6a9e8500854bb",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "add-c-impl",
      "headRefOid": "d7b732c75383b2c01bbe2a7eed7be95872d554b5",
      "closedAt": "2022-03-03T19:49:25Z",
      "mergedAt": "2022-03-03T19:49:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "def80a0a85c12ff95fb88f38d84f7f616a9a3ecf"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Excellent work!",
          "createdAt": "2022-03-03T19:49:21Z",
          "updatedAt": "2022-03-03T19:49:21Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "thanks for your feedback!",
          "createdAt": "2022-03-03T19:50:40Z",
          "updatedAt": "2022-03-03T19:50:40Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 103,
      "id": "PR_kwDOEpUZs84z5yHW",
      "title": "Add additional check for t",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/103",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We additionally require that t > 1",
      "createdAt": "2022-03-03T16:36:05Z",
      "updatedAt": "2022-03-03T16:38:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e3bf48984f01a6330e23f843c3a6a9e8500854bb",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "verify-t",
      "headRefOid": "0d27a1b6ff424ebaa593f2363c3e9091ea3bd2b0",
      "closedAt": "2022-03-03T16:38:00Z",
      "mergedAt": "2022-03-03T16:38:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "183f36429a674b42bc96f6474b4d616d11e8c454"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841mIy2",
          "commit": {
            "abbreviatedOid": "0d27a1b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-03T16:37:55Z",
          "updatedAt": "2022-03-03T16:37:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 104,
      "id": "PR_kwDOEpUZs84z54RN",
      "title": "Make trusted_dealer_keygen deterministic and clarify description",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/104",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-03T17:01:40Z",
      "updatedAt": "2022-03-03T19:58:04Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "183f36429a674b42bc96f6474b4d616d11e8c454",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "deterministic-keygen-and-language",
      "headRefOid": "188e4e37cf74e958ebbfde84086c513736c6d123",
      "closedAt": "2022-03-03T19:58:01Z",
      "mergedAt": "2022-03-03T19:58:01Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "8a804a0ce2fffcbda2b756dfe87739a5bbf31489"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841nAIf",
          "commit": {
            "abbreviatedOid": "3be4f7a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:23:59Z",
          "updatedAt": "2022-03-03T19:23:59Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Assigning it to this variable does spit out the group secret as a test vector correctly",
              "createdAt": "2022-03-03T19:23:59Z",
              "updatedAt": "2022-03-03T19:24:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841nAKA",
          "commit": {
            "abbreviatedOid": "3be4f7a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83d\udc4d",
          "createdAt": "2022-03-03T19:24:04Z",
          "updatedAt": "2022-03-03T19:24:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs841nAwB",
          "commit": {
            "abbreviatedOid": "3be4f7a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM pending suggestions -- thanks!",
          "createdAt": "2022-03-03T19:26:27Z",
          "updatedAt": "2022-03-03T19:28:19Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\n    group_secret_key = G.random_scalar()\r\n```",
              "createdAt": "2022-03-03T19:26:28Z",
              "updatedAt": "2022-03-03T19:28:19Z"
            },
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n  - s, a group secret that MUST be derived from at least `Ns` bytes of entropy\r\n```",
              "createdAt": "2022-03-03T19:28:10Z",
              "updatedAt": "2022-03-03T19:28:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841nF3a",
          "commit": {
            "abbreviatedOid": "f96295e"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:47:24Z",
          "updatedAt": "2022-03-03T19:47:24Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Where is 'Ns' defined? ",
              "createdAt": "2022-03-03T19:47:24Z",
              "updatedAt": "2022-03-03T19:47:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841nGSX",
          "commit": {
            "abbreviatedOid": "f96295e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:49:05Z",
          "updatedAt": "2022-03-03T19:49:05Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "It's the length of a serialized scalar, defined as part of the group.",
              "createdAt": "2022-03-03T19:49:05Z",
              "updatedAt": "2022-03-03T19:49:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 105,
      "id": "PR_kwDOEpUZs84z6gWi",
      "title": "Raise an error if participant index is ever 0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/105",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Because identifiers are provided externally, signers should check that they are non-zero. This is more to prevent doing things like dividing by zero or outputting an invalid signature than an actual security break. ",
      "createdAt": "2022-03-03T20:12:14Z",
      "updatedAt": "2022-03-03T20:40:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "8a804a0ce2fffcbda2b756dfe87739a5bbf31489",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "check-invalid-indices",
      "headRefOid": "e3be54d0cb4bfe9a7d038ffa813a5e6c12c268fb",
      "closedAt": "2022-03-03T20:39:39Z",
      "mergedAt": "2022-03-03T20:39:39Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "4ccc0371f15a930a7b03837da9c016f2af9879df"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841nMkm",
          "commit": {
            "abbreviatedOid": "b25b65c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-03T20:14:54Z",
          "updatedAt": "2022-03-03T20:15:08Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n    for x_j in L:\r\n      if x_j <= 0:\r\n        raise \"invalid parameters\"\r\n```",
              "createdAt": "2022-03-03T20:14:54Z",
              "updatedAt": "2022-03-03T20:15:08Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n`i` MUST never equal `0`; recall that `f(0) = s`, where `f` is the polynomial defined in a Shamir secret sharing operation.\r\n```",
              "createdAt": "2022-03-03T20:15:04Z",
              "updatedAt": "2022-03-03T20:15:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841nSKn",
          "commit": {
            "abbreviatedOid": "57ccc5e"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-03T20:39:21Z",
          "updatedAt": "2022-03-03T20:39:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 107,
      "id": "PR_kwDOEpUZs840A1oO",
      "title": "Add -03 change log",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/107",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-07T02:44:20Z",
      "updatedAt": "2022-03-07T13:23:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "210f4a44f273ab8da8811d79370f987ec81204d7",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/draft-03",
      "headRefOid": "f377a56655e88abc21151764d3a01a7222c09600",
      "closedAt": "2022-03-07T13:22:59Z",
      "mergedAt": "2022-03-07T13:22:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "47e27d07c67a6aed3b7a1dc5abf3eb5fac6ab044"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841tw1x",
          "commit": {
            "abbreviatedOid": "f6d1762"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T02:49:55Z",
          "updatedAt": "2022-03-07T02:49:56Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "typo in `verifiation`",
              "createdAt": "2022-03-07T02:49:55Z",
              "updatedAt": "2022-03-07T02:49:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841txAz",
          "commit": {
            "abbreviatedOid": "f6d1762"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T02:51:56Z",
          "updatedAt": "2022-03-07T02:51:56Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n- Ensure that verificaftion of signature shares from the second round uses commitments from the first round (#94).\r\n```",
              "createdAt": "2022-03-07T02:51:56Z",
              "updatedAt": "2022-03-07T02:51:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841tyyn",
          "commit": {
            "abbreviatedOid": "f377a56"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T03:11:48Z",
          "updatedAt": "2022-03-07T03:11:48Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "well, now there is another typo `verificaftion` :)",
              "createdAt": "2022-03-07T03:11:48Z",
              "updatedAt": "2022-03-07T03:11:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 109,
      "id": "PR_kwDOEpUZs840CsQI",
      "title": "fixed a few typos",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/109",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-07T13:30:24Z",
      "updatedAt": "2022-03-07T13:52:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "47e27d07c67a6aed3b7a1dc5abf3eb5fac6ab044",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "fix-typos",
      "headRefOid": "83839b9e0d6387984c602aa23260772fc80ff5f8",
      "closedAt": "2022-03-07T13:49:05Z",
      "mergedAt": "2022-03-07T13:49:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "50a57138ca7f805ef90398fd5143a7a7f5c09ff2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 113,
      "id": "PR_kwDOEpUZs840Id1S",
      "title": "Add Alden as a draft contributor",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/113",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Thanks for all of your help @aldenml ! ",
      "createdAt": "2022-03-08T21:44:24Z",
      "updatedAt": "2022-03-09T02:36:39Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "50a57138ca7f805ef90398fd5143a7a7f5c09ff2",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "update-contributors",
      "headRefOid": "55d1571982f9b332f54d985fe7dc689db4c9ee0e",
      "closedAt": "2022-03-08T21:46:00Z",
      "mergedAt": "2022-03-08T21:46:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "1ffe85f5b151c63a7bdc3dbfb9495ffbc6aba3c2"
      },
      "comments": [
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "thank you!! \ud83c\udf89",
          "createdAt": "2022-03-09T02:36:39Z",
          "updatedAt": "2022-03-09T02:36:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8413Q5j",
          "commit": {
            "abbreviatedOid": "55d1571"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "\ud83d\udc4d ",
          "createdAt": "2022-03-08T22:52:59Z",
          "updatedAt": "2022-03-08T22:52:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 116,
      "id": "PR_kwDOEpUZs840aePX",
      "title": "Remove extraneous comma",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/116",
      "state": "MERGED",
      "author": "isislovecruft",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Commas are required when a subordinate clause comes before the main body of a sentence, but are not to be used when the subordinate clause occurs afterwards.",
      "createdAt": "2022-03-14T17:52:47Z",
      "updatedAt": "2022-03-14T20:53:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "1ffe85f5b151c63a7bdc3dbfb9495ffbc6aba3c2",
      "headRepository": "isislovecruft/draft-irtf-cfrg-frost",
      "headRefName": "fix/comma-typo",
      "headRefOid": "c63a4efdd1319bd1740c68b25a5ed2bbc378da99",
      "closedAt": "2022-03-14T20:53:51Z",
      "mergedAt": "2022-03-14T20:53:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "21b92d115f0318e44c7c7389d1ad26570861246e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842MhuM",
          "commit": {
            "abbreviatedOid": "c63a4ef"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T18:49:22Z",
          "updatedAt": "2022-03-14T18:49:22Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Unrelated to this PR, but this sentence in general is even a bit broad - deriving nonces deterministically is insecure for FROST, but not necessarily for any multi-party signature scheme. ",
              "createdAt": "2022-03-14T18:49:22Z",
              "updatedAt": "2022-03-14T18:49:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs842M3vh",
          "commit": {
            "abbreviatedOid": "c63a4ef"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-14T20:16:54Z",
          "updatedAt": "2022-03-14T20:16:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 118,
      "id": "PR_kwDOEpUZs840bVUY",
      "title": "Define cofactor checks for verification",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/118",
      "state": "MERGED",
      "author": "isislovecruft",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "* CLOSES #68 \r\n\r\nI also went over the matrice of malleability issues in https://eprint.iacr.org/2020/1244.pdf again to double check compatibility versus malleability issues.",
      "createdAt": "2022-03-14T22:23:10Z",
      "updatedAt": "2022-03-28T17:18:14Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "21b92d115f0318e44c7c7389d1ad26570861246e",
      "headRepository": "isislovecruft/draft-irtf-cfrg-frost",
      "headRefName": "feature/verification-cofactor-checks",
      "headRefOid": "bc52c90e83ff4017508521fbca7cf98452f5a090",
      "closedAt": "2022-03-28T17:18:14Z",
      "mergedAt": "2022-03-28T17:18:14Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6133239eec31a808427f8c5b2cf0c5edbaff61cb"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "I added the cofactor values for each ciphersuite in a commit (GitHub wouldn't let me make them as suggestions). These commits together fully close #68.\r\n\r\n// @chris-wood @chelseakomlo ",
          "createdAt": "2022-03-15T00:29:52Z",
          "updatedAt": "2022-03-15T00:29:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842N2rt",
          "commit": {
            "abbreviatedOid": "bc52c90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-15T02:48:00Z",
          "updatedAt": "2022-03-15T02:48:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs842Pp5_",
          "commit": {
            "abbreviatedOid": "bc52c90"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This looks great! We should also update the reference implementation to match. (If we don't want to do that in this PR, let's file an issue to track it separately.)",
          "createdAt": "2022-03-15T11:44:24Z",
          "updatedAt": "2022-03-15T11:44:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs843C0oG",
          "commit": {
            "abbreviatedOid": "bc52c90"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "On call, merging and will update PoC in a followup change.",
          "createdAt": "2022-03-28T17:18:09Z",
          "updatedAt": "2022-03-28T17:18:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 119,
      "id": "PR_kwDOEpUZs840bsqM",
      "title": "Add specific sentence regarding security in a deterministic setting",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/119",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #117",
      "createdAt": "2022-03-15T01:44:14Z",
      "updatedAt": "2022-03-15T04:23:16Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "21b92d115f0318e44c7c7389d1ad26570861246e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "determinism",
      "headRefOid": "8099aaf60ab58382b8382d24170f1cfc585f9b70",
      "closedAt": "2022-03-15T04:23:14Z",
      "mergedAt": "2022-03-15T04:23:14Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "f9712b28353a679a35f4878a48c8f7123446eade"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842N2uN",
          "commit": {
            "abbreviatedOid": "8099aaf"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-15T02:48:19Z",
          "updatedAt": "2022-03-15T02:48:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 120,
      "id": "PR_kwDOEpUZs840btMC",
      "title": "Consistent notation and denote where PK comes from",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/120",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #114",
      "createdAt": "2022-03-15T01:50:19Z",
      "updatedAt": "2022-03-15T04:22:43Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "21b92d115f0318e44c7c7389d1ad26570861246e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "pk-notation",
      "headRefOid": "3adb045723b8ff6c42a5e70afe0dbda372f7feab",
      "closedAt": "2022-03-15T04:22:40Z",
      "mergedAt": "2022-03-15T04:22:40Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "736ced4f69d78715cc7edaeeec4755e2b0d220e2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842N3Ws",
          "commit": {
            "abbreviatedOid": "3adb045"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-15T02:52:23Z",
          "updatedAt": "2022-03-15T02:52:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 121,
      "id": "PR_kwDOEpUZs840fVFP",
      "title": "Update group info, consistent notation for secret keys",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/121",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses  #112 and #115, and also makes the notation for participant secret keys consistent.",
      "createdAt": "2022-03-15T20:17:03Z",
      "updatedAt": "2022-03-16T16:17:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "f9712b28353a679a35f4878a48c8f7123446eade",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "group-info",
      "headRefOid": "c4c330a49649e5adea6fdc55e9932b3f19eb6f54",
      "closedAt": "2022-03-16T16:16:11Z",
      "mergedAt": "2022-03-16T16:16:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2b957521ea88f2d5d4152a1ffb7c7822f2e9ef87"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "The implementation's notation is already out of date with the spec, so I think bringing the two into alignment is a larger change than this PR. I'll start on this in https://github.com/cfrg/draft-irtf-cfrg-frost/issues/106",
          "createdAt": "2022-03-16T16:05:04Z",
          "updatedAt": "2022-03-16T16:05:04Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds good! Let's leave a note in that issue then.",
          "createdAt": "2022-03-16T16:15:28Z",
          "updatedAt": "2022-03-16T16:15:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842S9-J",
          "commit": {
            "abbreviatedOid": "c4c330a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This is a good change, but please also update the notation in the reference implementation (if necessary!) so the two are in sync.",
          "createdAt": "2022-03-15T23:39:58Z",
          "updatedAt": "2022-03-15T23:39:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs842Wsx-",
          "commit": {
            "abbreviatedOid": "c4c330a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-16T16:16:05Z",
          "updatedAt": "2022-03-16T16:16:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 122,
      "id": "PR_kwDOEpUZs840vEBv",
      "title": "Bump actions/cache from 2 to 3",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/122",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/cache](https://github.com/actions/cache) from 2 to 3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/cache/releases\">actions/cache's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<ul>\n<li>\n<p>This change adds a minimum runner version(node12 -&gt; node16), which can break users using an out-of-date/fork of the runner. This would be most commonly affecting users on GHES 3.3 or before, as those runners do not support node16 actions and they can use actions from github.com via <a href=\"https://docs.github.com/en/enterprise-server@3.0/admin/github-actions/managing-access-to-actions-from-githubcom/enabling-automatic-access-to-githubcom-actions-using-github-connect\">github connect</a> or manually copying the repo to their GHES instance.</p>\n</li>\n<li>\n<p>Few dependencies and cache action usage examples have also been updated.</p>\n</li>\n</ul>\n<h2>v2.1.7</h2>\n<p>Support 10GB cache upload using the latest version <code>1.0.8</code> of <a href=\"https://www.npmjs.com/package/@actions/cache\"><code>@actions/cache</code> </a></p>\n<h2>v2.1.6</h2>\n<ul>\n<li>Catch unhandled &quot;bad file descriptor&quot; errors that sometimes occurs when the cache server returns non-successful response (<a href=\"https://github-redirect.dependabot.com/actions/cache/pull/596\">actions/cache#596</a>)</li>\n</ul>\n<h2>v2.1.5</h2>\n<ul>\n<li>Fix permissions error seen when extracting caches with GNU tar that were previously created using BSD tar (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/527\">actions/cache#527</a>)</li>\n</ul>\n<h2>v2.1.4</h2>\n<ul>\n<li>Make caching more verbose <a href=\"https://github-redirect.dependabot.com/actions/toolkit/pull/650\">#650</a></li>\n<li>Use GNU tar on macOS if available <a href=\"https://github-redirect.dependabot.com/actions/toolkit/pull/701\">#701</a></li>\n</ul>\n<h2>v2.1.3</h2>\n<ul>\n<li>Upgrades <code>@actions/core</code> to v1.2.6 for <a href=\"https://github.com/advisories/GHSA-mfwh-5m23-j46w\">CVE-2020-15228</a>. This action was not using the affected methods.</li>\n<li>Fix error handling in <code>uploadChunk</code> where 400-level errors were not being detected and handled correctly</li>\n</ul>\n<h2>v2.1.2</h2>\n<ul>\n<li>Adds input to limit the chunk upload size, useful for self-hosted runners with slower upload speeds</li>\n<li>No-op when executing on GHES</li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Update <code>@actions/cache</code> package to <code>v1.0.2</code> which allows cache action to use posix format when taring files.</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li>Replaces the <code>http-client</code> with the Azure Storage SDK for NodeJS when downloading cache content from Azure.  This should help improve download performance and reliability as the SDK downloads files in 4 MB chunks, which can be parallelized and retried independently</li>\n<li>Display download progress and speed</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/cache/commit/4b0cf6cc4619e737324ddfcec08fff2413359514\"><code>4b0cf6c</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/769\">#769</a> from actions/users/ashwinsangem/bump_major_version</li>\n<li><a href=\"https://github.com/actions/cache/commit/60c606a2b4c5358e11c2ca7b4694e59049d008d1\"><code>60c606a</code></a> Update licensed files</li>\n<li><a href=\"https://github.com/actions/cache/commit/b6e9a919a7da3606e9b2db756823ee1c39c7b48d\"><code>b6e9a91</code></a> Revert &quot;Updated to the latest version.&quot;</li>\n<li><a href=\"https://github.com/actions/cache/commit/c8425035834f98c304ecf92f5d50f41d433885c1\"><code>c842503</code></a> Updated to the latest version.</li>\n<li><a href=\"https://github.com/actions/cache/commit/2b7da2a62c3af9fa2692cd8d2d117da76faf31ac\"><code>2b7da2a</code></a> Bumped up to a major version.</li>\n<li><a href=\"https://github.com/actions/cache/commit/deae296ab340574da1ec86242984dfc91f0a7b81\"><code>deae296</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/651\">#651</a> from magnetikonline/fix-golang-windows-example</li>\n<li><a href=\"https://github.com/actions/cache/commit/c7c46bcb6db3c571021a3a2dc2d2557b512ecace\"><code>c7c46bc</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/707\">#707</a> from duxtland/main</li>\n<li><a href=\"https://github.com/actions/cache/commit/6535c5fb5fe2870754afba7bd4e514867ac9cb98\"><code>6535c5f</code></a> Regenerated <code>examples.md</code> TOC</li>\n<li><a href=\"https://github.com/actions/cache/commit/3fdafa472e0db16435add384585aa138ffdd16d3\"><code>3fdafa4</code></a> Update GitHub Actions status badge markdown in <code>README.md</code></li>\n<li><a href=\"https://github.com/actions/cache/commit/341e6d75d9826beb2fa659263d862f6aec63a064\"><code>341e6d7</code></a> Merge branch 'actions:main' into fix-golang-windows-example</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/cache/compare/v2...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/cache&package-manager=github_actions&previous-version=2&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-03-21T12:12:39Z",
      "updatedAt": "2022-03-21T23:28:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2b957521ea88f2d5d4152a1ffb7c7822f2e9ef87",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/cache-3",
      "headRefOid": "e0fbe5697fe311cdcb64a6e666337d7f127ffad2",
      "closedAt": "2022-03-21T23:27:58Z",
      "mergedAt": "2022-03-21T23:27:58Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "86612c7d8e584bb94e00a373d0b1e4e9feb814c1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842oBAJ",
          "commit": {
            "abbreviatedOid": "e0fbe56"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-21T23:27:53Z",
          "updatedAt": "2022-03-21T23:27:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 123,
      "id": "PR_kwDOEpUZs840xlOk",
      "title": "Specify distinction between single and two round, and FROST keygen",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/123",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR explains why single-round FROST is out of scope, and also clarifies between the variant presented in this draft, and the paper. Some people might get confused because the FROST paper also presents a new-ish DKG and so is not just signing. ",
      "createdAt": "2022-03-21T23:14:23Z",
      "updatedAt": "2022-03-21T23:39:42Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2b957521ea88f2d5d4152a1ffb7c7822f2e9ef87",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "single-round",
      "headRefOid": "70ce56fc8030ef6cc485f970e53b493201bb5a5d",
      "closedAt": "2022-03-21T23:31:01Z",
      "mergedAt": "2022-03-21T23:31:01Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "c8b29a74dcced94416c4a5df4cf22a64d3e84d16"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842oAA_",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T23:20:25Z",
          "updatedAt": "2022-03-21T23:20:25Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "\ud83d\udc4d ",
              "createdAt": "2022-03-21T23:20:25Z",
              "updatedAt": "2022-03-21T23:20:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs842oAC3",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T23:20:37Z",
          "updatedAt": "2022-03-21T23:20:38Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-03-21T23:20:37Z",
              "updatedAt": "2022-03-21T23:20:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs842oAJJ",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T23:21:21Z",
          "updatedAt": "2022-03-21T23:21:22Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-03-21T23:21:21Z",
              "updatedAt": "2022-03-21T23:21:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs842oAWV",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T23:22:59Z",
          "updatedAt": "2022-03-21T23:22:59Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Nit: FROST (flexible round-optimized schnorr-based threshold) threshold signature protocol?\r\n\r\nmaybe: \r\n```suggestion\r\nWe now present the two-round variant of the FROST signature protocol for producing Schnorr signatures in the threshold setting.\r\n```",
              "createdAt": "2022-03-21T23:22:59Z",
              "updatedAt": "2022-03-21T23:22:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs842oAfI",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T23:24:06Z",
          "updatedAt": "2022-03-21T23:24:06Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "\ud83d\udc4d ",
              "createdAt": "2022-03-21T23:24:06Z",
              "updatedAt": "2022-03-21T23:24:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs842oA8H",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Approved, I left a possible suggestion, you can take it or leave it \ud83d\udc4d",
          "createdAt": "2022-03-21T23:27:23Z",
          "updatedAt": "2022-03-21T23:27:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs842oBNX",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T23:29:35Z",
          "updatedAt": "2022-03-21T23:29:36Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "FROST is a threshold signature protocol, so going with the original language. ",
              "createdAt": "2022-03-21T23:29:35Z",
              "updatedAt": "2022-03-21T23:29:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 124,
      "id": "PR_kwDOEpUZs840xvyj",
      "title": "Intro refactor",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/124",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "While reviewing #123 I noticed one thing I wanted to fix, but got carried away and refactored and simplified some of the intro. I think it had irrelevant information for the purposes of this document.",
      "createdAt": "2022-03-22T00:05:16Z",
      "updatedAt": "2022-03-22T11:58:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c8b29a74dcced94416c4a5df4cf22a64d3e84d16",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "chris-wood-patch-4",
      "headRefOid": "b3854900111d5fe918097d426540f3c30e24d753",
      "closedAt": "2022-03-22T11:58:55Z",
      "mergedAt": "2022-03-22T11:58:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e970a9ab82f478c43608f67324efc16e94ea8809"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842oUGL",
          "commit": {
            "abbreviatedOid": "b385490"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "lgtm, but I'll let @chelseakomlo look also",
          "createdAt": "2022-03-22T00:42:55Z",
          "updatedAt": "2022-03-22T00:42:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs842oh1S",
          "commit": {
            "abbreviatedOid": "b385490"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great! Thanks @chris-wood ",
          "createdAt": "2022-03-22T02:40:17Z",
          "updatedAt": "2022-03-22T02:40:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 126,
      "id": "PR_kwDOEpUZs84015Jo",
      "title": "Add VSS commitments to trusted_dealer_keygen",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/126",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Also implements `vss_commit` and `vss_verify` in the POC code and adds these checks to the test. ",
      "createdAt": "2022-03-22T21:47:50Z",
      "updatedAt": "2022-03-28T17:48:48Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e970a9ab82f478c43608f67324efc16e94ea8809",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "vss-commit",
      "headRefOid": "41553d8ea9080005aabfa3de2b1eba47f14cab30",
      "closedAt": "2022-03-28T17:48:45Z",
      "mergedAt": "2022-03-28T17:48:45Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "f1b35fe7f0f74291968f6aaacd1df8d704d68587"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8422h6W",
          "commit": {
            "abbreviatedOid": "9f9be26"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Excellent \ud83c\udf89 Thanks for updating both spec and code. This all looks good. I only have style nits, so approved pending those changes. =)",
          "createdAt": "2022-03-24T13:26:53Z",
          "updatedAt": "2022-03-24T13:29:03Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "```suggestion\r\n      A_i = G.ScalarBaseMult(coeff)\r\n```\r\n(Just noticing this now)",
              "createdAt": "2022-03-24T13:26:53Z",
              "updatedAt": "2022-03-24T13:29:03Z"
            },
            {
              "originalPosition": 32,
              "body": "Style nit: can we unify indentation for `vss_commit` and `vss_verify`? (4 spaces instead of 2)",
              "createdAt": "2022-03-24T13:28:08Z",
              "updatedAt": "2022-03-24T13:29:03Z"
            },
            {
              "originalPosition": 80,
              "body": "Same style nit here",
              "createdAt": "2022-03-24T13:28:32Z",
              "updatedAt": "2022-03-24T13:29:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 127,
      "id": "PR_kwDOEpUZs84018HR",
      "title": "Add additional failure check",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/127",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Last check to address #48",
      "createdAt": "2022-03-22T22:07:14Z",
      "updatedAt": "2022-04-18T17:01:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e970a9ab82f478c43608f67324efc16e94ea8809",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "error-abort",
      "headRefOid": "d1301d161b1fe1619e86c5b9912c5fb900e0fa8d",
      "closedAt": "2022-03-28T17:17:23Z",
      "mergedAt": "2022-03-28T17:17:23Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "01f74a250215848b4cf8b4964f4f3c17ad664cde"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8422jEp",
          "commit": {
            "abbreviatedOid": "401e605"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-03-24T13:30:05Z",
          "updatedAt": "2022-03-24T13:30:09Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This seems like text that already exists above:\r\n\r\n> If the validation fails, the participant can issue a complaint\r\n> against the dealer, and take actions such as broadcasting this complaint to all\r\n> other participants. We do not specify the complaint procedure in this draft, as\r\n> it will be implementation-specific.\r\n\r\nCan we update the text there instead?",
              "createdAt": "2022-03-24T13:30:05Z",
              "updatedAt": "2022-03-24T13:30:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84232FW",
          "commit": {
            "abbreviatedOid": "401e605"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-24T17:14:05Z",
          "updatedAt": "2022-03-24T17:14:05Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Yeah agreed",
              "createdAt": "2022-03-24T17:14:05Z",
              "updatedAt": "2022-03-24T17:14:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843CsAz",
          "commit": {
            "abbreviatedOid": "401e605"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-28T16:48:44Z",
          "updatedAt": "2022-03-28T16:48:44Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Removed the other text as broadcast rounds/complaints/etc is 1) hard to get right, and 2) very out of scope for this draft. We now only specify that if this check fails, the participant MUST abort and failure should be investigated out of band.",
              "createdAt": "2022-03-28T16:48:44Z",
              "updatedAt": "2022-03-28T16:48:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843Cz0M",
          "commit": {
            "abbreviatedOid": "d1301d1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T17:16:10Z",
          "updatedAt": "2022-03-28T17:16:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs843C0N3",
          "commit": {
            "abbreviatedOid": "d1301d1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T17:17:16Z",
          "updatedAt": "2022-03-28T17:17:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 128,
      "id": "PR_kwDOEpUZs841Ils4",
      "title": "The commitment share is only computed as part of aggregate",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/128",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "bug"
      ],
      "body": "We still had commitment share in some wire structs and mentions.",
      "createdAt": "2022-03-28T07:31:23Z",
      "updatedAt": "2022-04-18T17:01:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e970a9ab82f478c43608f67324efc16e94ea8809",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "commitment-shares",
      "headRefOid": "8a153f8ab20a2d33452ae24bc7e1771deacc357a",
      "closedAt": "2022-03-28T13:37:29Z",
      "mergedAt": "2022-03-28T13:37:29Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c3522f0e4cb6003769be64882d0a06b523076963"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843Blsf",
          "commit": {
            "abbreviatedOid": "8a153f8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T13:37:24Z",
          "updatedAt": "2022-03-28T13:37:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 129,
      "id": "PR_kwDOEpUZs841KxMc",
      "title": "Split up test vectors into separate files",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/129",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #99.",
      "createdAt": "2022-03-28T16:22:10Z",
      "updatedAt": "2022-03-28T18:36:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c3522f0e4cb6003769be64882d0a06b523076963",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/split-vector-files",
      "headRefOid": "fcf94964a843986096f3ed59dd9c3d1c2f4392b7",
      "closedAt": "2022-03-28T18:36:04Z",
      "mergedAt": "2022-03-28T18:36:04Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "3eb87b6e2f3c7070a3ff5e67133620bac50eea57"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843DMHu",
          "commit": {
            "abbreviatedOid": "fcf9496"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm! Thank you!",
          "createdAt": "2022-03-28T18:35:55Z",
          "updatedAt": "2022-03-28T18:35:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 130,
      "id": "PR_kwDOEpUZs841KzWl",
      "title": "Allow some secrets to be zero.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/130",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #110.",
      "createdAt": "2022-03-28T16:28:43Z",
      "updatedAt": "2022-03-28T18:21:18Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c3522f0e4cb6003769be64882d0a06b523076963",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/zero-scalars",
      "headRefOid": "ab1a21a5b6ec9a9111c270e4f4a9088ced6bacba",
      "closedAt": "2022-03-28T18:21:15Z",
      "mergedAt": "2022-03-28T18:21:14Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "638dbd0287b112a6f11f7828990aa3f141530962"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843C-vj",
          "commit": {
            "abbreviatedOid": "ab1a21a"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me, and the naming is very clear. ",
          "createdAt": "2022-03-28T17:51:04Z",
          "updatedAt": "2022-03-28T17:51:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs843DHXA",
          "commit": {
            "abbreviatedOid": "ab1a21a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T18:21:01Z",
          "updatedAt": "2022-03-28T18:21:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 132,
      "id": "PR_kwDOEpUZs841LZ7k",
      "title": "Add function to derive group info in trusted dealer setting",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/132",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-28T19:08:33Z",
      "updatedAt": "2022-03-29T14:16:30Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3eb87b6e2f3c7070a3ff5e67133620bac50eea57",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "group-info-derive",
      "headRefOid": "3d52452b6ef5800d6f79dc8db8adaea6c9cf177a",
      "closedAt": "2022-03-29T14:16:26Z",
      "mergedAt": "2022-03-29T14:16:26Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "aae023316479185fa32d5c1780f66c720f7e3402"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR also clarifies naming around signer private and public keys.",
          "createdAt": "2022-03-28T19:08:54Z",
          "updatedAt": "2022-03-28T19:08:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843D3Ie",
          "commit": {
            "abbreviatedOid": "bbb80ec"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-28T21:11:42Z",
          "updatedAt": "2022-03-28T21:11:59Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "This is the signing group? As opposed to the algebraic structure?",
              "createdAt": "2022-03-28T21:11:43Z",
              "updatedAt": "2022-03-28T21:11:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843D9Kq",
          "commit": {
            "abbreviatedOid": "bbb80ec"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-28T21:40:06Z",
          "updatedAt": "2022-03-28T21:40:06Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "We use group info earlier in the document as an input to each signer and the coordinator with these keys. ",
              "createdAt": "2022-03-28T21:40:06Z",
              "updatedAt": "2022-03-28T21:40:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843D1FZ",
          "commit": {
            "abbreviatedOid": "bbb80ec"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-03-28T21:02:51Z",
          "updatedAt": "2022-03-28T21:41:33Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "```suggestion\r\n    derive_group_info(MAX_SIGNERS, THRESHOLD_LIMIT, vss_commitment):\r\n```\r\n\r\nWe now use MAX_SIGNERS and THRESHOLD_LIMIT instead of n and t, respectively. (Side bar: maybe we should rename THRESHOLD_LIMIT to MIN_SIGNERS?)",
              "createdAt": "2022-03-28T21:02:51Z",
              "updatedAt": "2022-03-28T21:41:33Z"
            },
            {
              "originalPosition": 73,
              "body": "```suggestion\r\n    - signer_public_keys, a list of MAX_SIGNERS public keys PK_i for i=1,...,n, where PK_i is the public key for participant i.\r\n```",
              "createdAt": "2022-03-28T21:03:23Z",
              "updatedAt": "2022-03-28T21:41:33Z"
            },
            {
              "originalPosition": 67,
              "body": "```suggestion\r\n    - MAX_SIGNERS, the number of shares to generate, an integer\r\n```",
              "createdAt": "2022-03-28T21:03:39Z",
              "updatedAt": "2022-03-28T21:41:33Z"
            },
            {
              "originalPosition": 68,
              "body": "```suggestion\r\n    - THRESHOLD_LIMIT, the threshold of the secret sharing scheme, an integer\r\n```",
              "createdAt": "2022-03-28T21:03:46Z",
              "updatedAt": "2022-03-28T21:41:33Z"
            },
            {
              "originalPosition": 77,
              "body": "```suggestion\r\n      signer_public_keys = []\r\n```",
              "createdAt": "2022-03-28T21:40:36Z",
              "updatedAt": "2022-03-28T21:41:34Z"
            },
            {
              "originalPosition": 80,
              "body": "```suggestion\r\n        signer_public_keys.append(PK_i)\r\n```",
              "createdAt": "2022-03-28T21:41:17Z",
              "updatedAt": "2022-03-28T21:41:34Z"
            },
            {
              "originalPosition": 79,
              "body": "We don't use this notation anymore -- can you please rewrite it using a loop?",
              "createdAt": "2022-03-28T21:41:31Z",
              "updatedAt": "2022-03-28T21:41:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843EEDE",
          "commit": {
            "abbreviatedOid": "bbb80ec"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-28T22:13:08Z",
          "updatedAt": "2022-03-28T22:13:08Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "I would prefer keeping threshold in the name, to keep in line with existing terminology. ",
              "createdAt": "2022-03-28T22:13:08Z",
              "updatedAt": "2022-03-28T22:13:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843EJBU",
          "commit": {
            "abbreviatedOid": "bbb80ec"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-28T22:40:00Z",
          "updatedAt": "2022-03-28T22:40:01Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Addressed this and the loop in verify share.",
              "createdAt": "2022-03-28T22:40:00Z",
              "updatedAt": "2022-03-28T22:40:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843HVOy",
          "commit": {
            "abbreviatedOid": "40b0b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-29T13:56:22Z",
          "updatedAt": "2022-03-29T13:57:48Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "```suggestion\r\n    derive_group_info(MAX_SIGNERS, THRESHOLD_LIMIT, vss_commitment)\r\n```",
              "createdAt": "2022-03-29T13:56:22Z",
              "updatedAt": "2022-03-29T13:57:49Z"
            },
            {
              "originalPosition": 82,
              "body": "```suggestion\r\n    - signer_public_keys, a list of MAX_SIGNERS public keys PK_i for i=1,...,MAX_SIGNERS, where PK_i is the public key for participant i.\r\n```",
              "createdAt": "2022-03-29T13:56:32Z",
              "updatedAt": "2022-03-29T13:57:49Z"
            },
            {
              "originalPosition": 87,
              "body": "```suggestion\r\n      for i in range(1, MAX_SIGNERS):\r\n```",
              "createdAt": "2022-03-29T13:56:43Z",
              "updatedAt": "2022-03-29T13:57:49Z"
            },
            {
              "originalPosition": 89,
              "body": "```suggestion\r\n        for j in range(0, THRESHOLD_LIMIT-1):\r\n```",
              "createdAt": "2022-03-29T13:56:55Z",
              "updatedAt": "2022-03-29T13:57:49Z"
            },
            {
              "originalPosition": 63,
              "body": "```suggestion\r\n      for j in range(0, THRESHOLD_LIMIT-1):\r\n```",
              "createdAt": "2022-03-29T13:57:45Z",
              "updatedAt": "2022-03-29T13:57:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 133,
      "id": "PR_kwDOEpUZs841Lctv",
      "title": "Elements in a field with prime modulus are positive",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/133",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-28T19:20:28Z",
      "updatedAt": "2022-03-28T19:29:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3eb87b6e2f3c7070a3ff5e67133620bac50eea57",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "threshold-min",
      "headRefOid": "3a6d516719000c0336d306cb5226a665cbf0a4ab",
      "closedAt": "2022-03-28T19:29:02Z",
      "mergedAt": "2022-03-28T19:29:02Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "867517b6afc64436a1ddb926eeb6dec6a49c23f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843DYNF",
          "commit": {
            "abbreviatedOid": "3a6d516"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83d\udc4d",
          "createdAt": "2022-03-28T19:20:58Z",
          "updatedAt": "2022-03-28T19:20:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 134,
      "id": "PR_kwDOEpUZs841PTMw",
      "title": "Add -04 change log",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/134",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-29T15:23:04Z",
      "updatedAt": "2022-03-29T15:29:48Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "aae023316479185fa32d5c1780f66c720f7e3402",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "changelog-v4",
      "headRefOid": "133d4e58b9bdef18a2aa888f9f0975703e3fe0f2",
      "closedAt": "2022-03-29T15:29:45Z",
      "mergedAt": "2022-03-29T15:29:45Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "a3e36bf183a217df6c09346928d0f9fd8ed6e151"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843H5Es",
          "commit": {
            "abbreviatedOid": "9624b65"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-29T15:23:33Z",
          "updatedAt": "2022-03-29T15:23:49Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n- Added methods to verify VSS commitments and derive group info (#126, #132).\r\n```",
              "createdAt": "2022-03-29T15:23:33Z",
              "updatedAt": "2022-03-29T15:23:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 135,
      "id": "PR_kwDOEpUZs841PmXJ",
      "title": "Update style and vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/135",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-29T16:33:58Z",
      "updatedAt": "2022-03-29T17:06:12Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "a3e36bf183a217df6c09346928d0f9fd8ed6e151",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/update-poc",
      "headRefOid": "342be1976dc29c1088a9fbcf60c5d90c206fd4a5",
      "closedAt": "2022-03-29T17:04:32Z",
      "mergedAt": "2022-03-29T17:04:32Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2f2dff76e44c2cedea27dc7e465935efebad5f0d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843ISwp",
          "commit": {
            "abbreviatedOid": "2cd86af"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-29T16:35:58Z",
          "updatedAt": "2022-03-29T16:35:58Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-03-29T16:35:58Z",
              "updatedAt": "2022-03-29T16:35:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843IS2G",
          "commit": {
            "abbreviatedOid": "2cd86af"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-29T16:36:13Z",
          "updatedAt": "2022-03-29T16:36:13Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "This was the bug.",
              "createdAt": "2022-03-29T16:36:13Z",
              "updatedAt": "2022-03-29T16:36:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843IbKo",
          "commit": {
            "abbreviatedOid": "342be19"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-29T17:03:23Z",
          "updatedAt": "2022-03-29T17:03:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 136,
      "id": "PR_kwDOEpUZs841bj25",
      "title": "Update existing implementations table",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/136",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "documentation"
      ],
      "body": "",
      "createdAt": "2022-03-31T20:17:38Z",
      "updatedAt": "2022-04-18T17:01:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2f2dff76e44c2cedea27dc7e465935efebad5f0d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-3",
      "headRefOid": "c6d52c7d8fec331ed8b182e5c183212bca90efd9",
      "closedAt": "2022-04-01T21:48:30Z",
      "mergedAt": "2022-04-01T21:48:30Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e65e141afb68a96ebc108f445c9522cd7390bb4d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843X3Qb",
          "commit": {
            "abbreviatedOid": "c6d52c7"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, looks good! ",
          "createdAt": "2022-04-01T14:19:24Z",
          "updatedAt": "2022-04-01T14:19:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs843ZjhS",
          "commit": {
            "abbreviatedOid": "c6d52c7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-01T21:48:26Z",
          "updatedAt": "2022-04-01T21:48:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 137,
      "id": "PR_kwDOEpUZs841e19y",
      "title": "Bump actions/setup-python from 3.0.0 to 3.1.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/137",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 3.0.0 to 3.1.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>Support caching poetry dependencies and caching on GHES 3.5</h2>\n<ul>\n<li>In the scope of this release, we added <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/362\">support for caching from GHES 3.5</a> and fixed the download issue for files &gt; 2GB during restore.</li>\n<li>Caching poetry dependencies</li>\n</ul>\n<pre lang=\"yaml\"><code>steps:\n- uses: actions/checkout@v3\n- name: Install poetry\n  run: pipx install poetry\n- uses: actions/setup-python@v3\n  with:\n    python-version: '3.9'\n    cache: 'poetry'\n- run: poetry install\n- run: poetry run pytest\n</code></pre>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/9c644ca2ab8e57ea0a487b5ec2f8290740378bfd\"><code>9c644ca</code></a> Update README.md to fix setup-python version  in example (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/368\">#368</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/3e8e90edf01accdf7b76addef61eac60c478e3a7\"><code>3e8e90e</code></a> dist fix (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/367\">#367</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/05fb98de9ae200fbc898ddcaa011ef774ac3837f\"><code>05fb98d</code></a> Cache on ghes (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/363\">#363</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/6c566026c0404efac87e650f7de19f11a9406300\"><code>6c56602</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/281\">#281</a> from patrick91/feature/poetry-caching</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/9516be869fd78eb4feec5395859f8dd36d3c8b75\"><code>9516be8</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/358\">#358</a> from actions/brcrista/codeql-main</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7aa3e95001ed5078678a8bf348e8d617387daed8\"><code>7aa3e95</code></a> Update dist</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/6c31eb3fc78f87d417c5590abb7825859b6ae048\"><code>6c31eb3</code></a> Use <code>\\n</code> instead of <code>os.EOL</code></li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7a37d78806d29e4ee010fb549fb611760e8f5330\"><code>7a37d78</code></a> Update dist</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/e4be7a40b0903c3448f9e9894753fc18e781fee2\"><code>e4be7a4</code></a> Initialise pyproject.toml</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/aac0ef93ba652dc2a23d1c1c6f2b44c3c5bef498\"><code>aac0ef9</code></a> Build and format</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v3.0.0...v3.1.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=3.0.0&new-version=3.1.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-04-01T11:27:33Z",
      "updatedAt": "2022-04-07T11:40:38Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2f2dff76e44c2cedea27dc7e465935efebad5f0d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-3.1.0",
      "headRefOid": "a1bf595ca8266c0892515ec5dd822bd6997a0251",
      "closedAt": "2022-04-07T11:40:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Superseded by #138.",
          "createdAt": "2022-04-07T11:40:36Z",
          "updatedAt": "2022-04-07T11:40:36Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 138,
      "id": "PR_kwDOEpUZs841zSl0",
      "title": "Bump actions/setup-python from 3.0.0 to 3.1.1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/138",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 3.0.0 to 3.1.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>Add &quot;cache-hit&quot; output and fix &quot;python-version&quot; output for PyPy</h2>\n<p>This release introduces new output cache-hit (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/373\">actions/setup-python#373</a>) and fix python-version output for PyPy (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/365\">actions/setup-python#365</a>)</p>\n<p>The cache-hit output contains boolean value indicating that an exact match was found for the key. It shows that the action uses already existing cache or not. The output is available only if cache is enabled.</p>\n<p>The python-version contains version of Python or PyPy.</p>\n<h2>Support caching poetry dependencies and caching on GHES 3.5</h2>\n<ul>\n<li>In the scope of this release, we added <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/362\">support for caching from GHES 3.5</a> and fixed the download issue for files &gt; 2GB during restore.</li>\n<li>Caching poetry dependencies</li>\n</ul>\n<pre lang=\"yaml\"><code>steps:\n- uses: actions/checkout@v3\n- name: Install poetry\n  run: pipx install poetry\n- uses: actions/setup-python@v3\n  with:\n    python-version: '3.9'\n    cache: 'poetry'\n- run: poetry install\n- run: poetry run pytest\n</code></pre>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/21c0493ecfd34b1217f0a90ec19a327f3cc0a048\"><code>21c0493</code></a> Cache hit output (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/373\">#373</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7933d5a3dd7112211f44c3c6d4c1156a64d3f5bf\"><code>7933d5a</code></a> Add pyton-version to setup PyPy output (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/365\">#365</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7885ec3539f8a6278aa15a514b195c3b3e10dd32\"><code>7885ec3</code></a> Rework pipenv caching test (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/375\">#375</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/9c644ca2ab8e57ea0a487b5ec2f8290740378bfd\"><code>9c644ca</code></a> Update README.md to fix setup-python version  in example (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/368\">#368</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/3e8e90edf01accdf7b76addef61eac60c478e3a7\"><code>3e8e90e</code></a> dist fix (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/367\">#367</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/05fb98de9ae200fbc898ddcaa011ef774ac3837f\"><code>05fb98d</code></a> Cache on ghes (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/363\">#363</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/6c566026c0404efac87e650f7de19f11a9406300\"><code>6c56602</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/281\">#281</a> from patrick91/feature/poetry-caching</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/9516be869fd78eb4feec5395859f8dd36d3c8b75\"><code>9516be8</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/358\">#358</a> from actions/brcrista/codeql-main</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7aa3e95001ed5078678a8bf348e8d617387daed8\"><code>7aa3e95</code></a> Update dist</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/6c31eb3fc78f87d417c5590abb7825859b6ae048\"><code>6c31eb3</code></a> Use <code>\\n</code> instead of <code>os.EOL</code></li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v3.0.0...v3.1.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=3.0.0&new-version=3.1.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-04-07T11:40:32Z",
      "updatedAt": "2022-04-12T14:02:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e65e141afb68a96ebc108f445c9522cd7390bb4d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-3.1.1",
      "headRefOid": "240da73707c7c9a2dab6416be1030111d7a5e684",
      "closedAt": "2022-04-12T14:02:33Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Superseded by #140.",
          "createdAt": "2022-04-12T14:02:32Z",
          "updatedAt": "2022-04-12T14:02:32Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 139,
      "id": "PR_kwDOEpUZs841_s0I",
      "title": "Bump actions/upload-artifact from 2 to 3",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/139",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/upload-artifact](https://github.com/actions/upload-artifact) from 2 to 3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/upload-artifact/releases\">actions/upload-artifact's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Update default runtime to node16 (<a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/293\">#293</a>)</li>\n<li>Update package-lock.json file version to 2 (<a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/302\">#302</a>)</li>\n</ul>\n<h3>Breaking Changes</h3>\n<p>With the update to Node 16, all scripts will now be run with Node 16 rather than Node 12.</p>\n<h2>v2.3.1</h2>\n<p>Fix for empty fails on Windows failing on upload <a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/281\">#281</a></p>\n<h2>v2.3.0 Upload Artifact</h2>\n<ul>\n<li>Optimizations for faster uploads of larger files that are already compressed</li>\n<li>Significantly improved logging when there are chunked uploads</li>\n<li>Clarifications in logs around the upload size and prohibited characters that aren't allowed in the artifact name or any uploaded files</li>\n<li>Various other small bugfixes &amp; optimizations</li>\n</ul>\n<h2>v2.2.4</h2>\n<ul>\n<li>Retry on HTTP 500 responses from the service</li>\n</ul>\n<h2>v2.2.3</h2>\n<ul>\n<li>Fixes for proxy related issues</li>\n</ul>\n<h2>v2.2.2</h2>\n<ul>\n<li>Improved retryability and error handling</li>\n</ul>\n<h2>v2.2.1</h2>\n<ul>\n<li>Update used actions/core package to the latest version</li>\n</ul>\n<h2>v2.2.0</h2>\n<ul>\n<li>Support for artifact retention</li>\n</ul>\n<h2>v2.1.4</h2>\n<ul>\n<li>Add Third Party License Information</li>\n</ul>\n<h2>v2.1.3</h2>\n<ul>\n<li>Use updated version of the <code>@action/artifact</code> NPM package</li>\n</ul>\n<h2>v2.1.2</h2>\n<ul>\n<li>Increase upload chunk size from 4MB to 8MB</li>\n<li>Detect case insensitive file uploads</li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Fix for certain symlinks not correctly being identified as directories before starting uploads</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li>Support for uploading artifacts with multiple paths</li>\n<li>Support for using exclude paths</li>\n<li>Updates to dependencies</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/6673cd052c4cd6fcf4b4e6e60ea986c889389535\"><code>6673cd0</code></a> Update <code>lockfileVersion</code> in <code>package-lock.json</code> (<a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/302\">#302</a>)</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/2244c8200304ec9588bf9399eac622d9fadc28c4\"><code>2244c82</code></a> Update to node16 (<a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/293\">#293</a>)</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/87348cee5fefa95e42e9b4804b4d68e130304158\"><code>87348ce</code></a> Add 503 warning when uploading to the same artifact</li>\n<li>See full diff in <a href=\"https://github.com/actions/upload-artifact/compare/v2...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/upload-artifact&package-manager=github_actions&previous-version=2&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-04-11T11:37:43Z",
      "updatedAt": "2022-04-12T15:56:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e65e141afb68a96ebc108f445c9522cd7390bb4d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/upload-artifact-3",
      "headRefOid": "8cd59a2e3a2a7d9abe730eece436c0cc4a3fe7a3",
      "closedAt": "2022-04-12T15:56:42Z",
      "mergedAt": "2022-04-12T15:56:42Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "1d023cebff21ab48465963754ea009de76d8d712"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844BBOX",
          "commit": {
            "abbreviatedOid": "8cd59a2"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-12T15:56:37Z",
          "updatedAt": "2022-04-12T15:56:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 140,
      "id": "PR_kwDOEpUZs842GtiU",
      "title": "Bump actions/setup-python from 3.0.0 to 3.1.2",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/140",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 3.0.0 to 3.1.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>Update actions/cache version to 2.0.2</h2>\n<p>In scope of this release we updated <code>actions/cache</code> package as the new version contains fixes related to GHES 3.5 (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/382\">actions/setup-python#382</a>)</p>\n<h2>Add &quot;cache-hit&quot; output and fix &quot;python-version&quot; output for PyPy</h2>\n<p>This release introduces new output cache-hit (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/373\">actions/setup-python#373</a>) and fix python-version output for PyPy (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/365\">actions/setup-python#365</a>)</p>\n<p>The cache-hit output contains boolean value indicating that an exact match was found for the key. It shows that the action uses already existing cache or not. The output is available only if cache is enabled.</p>\n<p>The python-version contains version of Python or PyPy.</p>\n<h2>Support caching poetry dependencies and caching on GHES 3.5</h2>\n<ul>\n<li>In the scope of this release, we added <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/362\">support for caching from GHES 3.5</a> and fixed the download issue for files &gt; 2GB during restore.</li>\n<li>Caching poetry dependencies</li>\n</ul>\n<pre lang=\"yaml\"><code>steps:\n- uses: actions/checkout@v3\n- name: Install poetry\n  run: pipx install poetry\n- uses: actions/setup-python@v3\n  with:\n    python-version: '3.9'\n    cache: 'poetry'\n- run: poetry install\n- run: poetry run pytest\n</code></pre>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/98f2ad02fd48d057ee3b4d4f66525b231c3e52b6\"><code>98f2ad0</code></a> Updated <code>@\u200bactions/cache</code> (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/382\">#382</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/5d6f0c8a87d930c1f9308457abe4c4568399410a\"><code>5d6f0c8</code></a> ci(workflow): add 'npm' cache for actions/setup-node in .github/workflows (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/379\">#379</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/21c0493ecfd34b1217f0a90ec19a327f3cc0a048\"><code>21c0493</code></a> Cache hit output (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/373\">#373</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7933d5a3dd7112211f44c3c6d4c1156a64d3f5bf\"><code>7933d5a</code></a> Add pyton-version to setup PyPy output (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/365\">#365</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7885ec3539f8a6278aa15a514b195c3b3e10dd32\"><code>7885ec3</code></a> Rework pipenv caching test (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/375\">#375</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/9c644ca2ab8e57ea0a487b5ec2f8290740378bfd\"><code>9c644ca</code></a> Update README.md to fix setup-python version  in example (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/368\">#368</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/3e8e90edf01accdf7b76addef61eac60c478e3a7\"><code>3e8e90e</code></a> dist fix (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/367\">#367</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/05fb98de9ae200fbc898ddcaa011ef774ac3837f\"><code>05fb98d</code></a> Cache on ghes (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/363\">#363</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/6c566026c0404efac87e650f7de19f11a9406300\"><code>6c56602</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/281\">#281</a> from patrick91/feature/poetry-caching</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/9516be869fd78eb4feec5395859f8dd36d3c8b75\"><code>9516be8</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/358\">#358</a> from actions/brcrista/codeql-main</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v3.0.0...v3.1.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=3.0.0&new-version=3.1.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-04-12T14:02:28Z",
      "updatedAt": "2022-04-12T15:57:14Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e65e141afb68a96ebc108f445c9522cd7390bb4d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-3.1.2",
      "headRefOid": "ddde04f4412975e9e3f16872ff2824c2ca7165ba",
      "closedAt": "2022-04-12T15:57:02Z",
      "mergedAt": "2022-04-12T15:57:02Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "b1f1af682671af5e83f5a2f066b6e219e85e45fc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844BBVd",
          "commit": {
            "abbreviatedOid": "ddde04f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-12T15:56:55Z",
          "updatedAt": "2022-04-12T15:56:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 143,
      "id": "PR_kwDOEpUZs842XrM_",
      "title": "Updates per review",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/143",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "This may be super redundant in places, but we can pare it back to being minimally redundant but explicit about typing.",
      "createdAt": "2022-04-18T16:20:40Z",
      "updatedAt": "2022-04-18T17:13:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b1f1af682671af5e83f5a2f066b6e219e85e45fc",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "notes",
      "headRefOid": "9ad7fefaf13078878e1025837af64d9edb1cbbad",
      "closedAt": "2022-04-18T17:13:52Z",
      "mergedAt": "2022-04-18T17:13:52Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "b774465289d84aa1838698d4b40bdb47ece7adbe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844TXz-",
          "commit": {
            "abbreviatedOid": "b4c03c6"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-18T16:56:09Z",
          "updatedAt": "2022-04-18T17:00:39Z",
          "comments": [
            {
              "originalPosition": 203,
              "body": "```suggestion\r\n  Outputs: The resulting secret s, a `Scalar` in `GF(p)`, that was previously split into shares\r\n```",
              "createdAt": "2022-04-18T16:56:09Z",
              "updatedAt": "2022-04-18T17:00:39Z"
            },
            {
              "originalPosition": 223,
              "body": "```suggestion\r\n    identifier, and sk_i the participant's secret key, a secret share of the constant term of f, where sk_i is in `GF(p)`.\r\n```",
              "createdAt": "2022-04-18T16:57:33Z",
              "updatedAt": "2022-04-18T17:00:39Z"
            },
            {
              "originalPosition": 223,
              "body": "```suggestion\r\n    identifier, and sk_i the participant's secret key, a secret share of the constant term of f, where sk_i is a `Scalar` of `F`, the scalar field `GF(p)` of `G`.\r\n```",
              "createdAt": "2022-04-18T16:59:07Z",
              "updatedAt": "2022-04-18T17:00:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 145,
      "id": "PR_kwDOEpUZs842X2W_",
      "title": "Fix group notation and clarify member functions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/145",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR does two things: \r\n1. Uses consistent notation for the group `G`\r\n2. Specifies the member functions on `G`",
      "createdAt": "2022-04-18T17:23:23Z",
      "updatedAt": "2022-04-20T15:24:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b774465289d84aa1838698d4b40bdb47ece7adbe",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "fix-gg",
      "headRefOid": "e010fa7a3a24a78269dae699710129856c2d120b",
      "closedAt": "2022-04-18T17:47:22Z",
      "mergedAt": "2022-04-18T17:47:22Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "e25c30eaa3d8aad8cf3596382d93ff03afc625ad"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think this addresses the concern? I'll propose an alternate change.",
          "createdAt": "2022-04-20T15:24:54Z",
          "updatedAt": "2022-04-20T15:24:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844ThTa",
          "commit": {
            "abbreviatedOid": "e010fa7"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2022-04-18T17:37:27Z",
          "updatedAt": "2022-04-18T17:37:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 146,
      "id": "PR_kwDOEpUZs842X6CB",
      "title": "checkout@3.0.1 for fix",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/146",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "dependencies"
      ],
      "body": "",
      "createdAt": "2022-04-18T17:43:29Z",
      "updatedAt": "2022-04-18T18:28:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b774465289d84aa1838698d4b40bdb47ece7adbe",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-2",
      "headRefOid": "7ce19d43db185a877811fa8130acc59e6357b369",
      "closedAt": "2022-04-18T18:28:45Z",
      "mergedAt": "2022-04-18T18:28:45Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "6b5456d8088f0da972e1fe941024d4649bdc38c4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 147,
      "id": "PR_kwDOEpUZs842X72D",
      "title": "Consistent terminology for byte string",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/147",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-04-18T17:54:22Z",
      "updatedAt": "2022-04-18T18:13:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e25c30eaa3d8aad8cf3596382d93ff03afc625ad",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "bytes",
      "headRefOid": "a83942cd310f5696b1a1a00f71d325cb4836b09f",
      "closedAt": "2022-04-18T18:13:50Z",
      "mergedAt": "2022-04-18T18:13:50Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "c22acf55a3643eda935e741a1164aa3929f8fb55"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844TpWb",
          "commit": {
            "abbreviatedOid": "a83942c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-18T18:13:41Z",
          "updatedAt": "2022-04-18T18:13:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 148,
      "id": "PR_kwDOEpUZs842X74U",
      "title": "Use RandomNonzeroScalar for single-party Schnorr example",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/148",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-04-18T17:54:35Z",
      "updatedAt": "2022-04-18T18:12:58Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e25c30eaa3d8aad8cf3596382d93ff03afc625ad",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "random-nonzero-scalar",
      "headRefOid": "2fb31ac076178685537b0d3a4da2c2a7f48227ac",
      "closedAt": "2022-04-18T18:12:55Z",
      "mergedAt": "2022-04-18T18:12:55Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "dbcc270571bf260b83f150a277b256f2d753f6f8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844Tmhq",
          "commit": {
            "abbreviatedOid": "2fb31ac"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-18T18:00:36Z",
          "updatedAt": "2022-04-18T18:00:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 149,
      "id": "PR_kwDOEpUZs842YEJP",
      "title": "s/SHOULD BE/SHOULD be/",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/149",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-04-18T18:37:11Z",
      "updatedAt": "2022-04-18T18:46:21Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "6b5456d8088f0da972e1fe941024d4649bdc38c4",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-2",
      "headRefOid": "1e066a54a62ba6516ca2f18aaa33d3e4b03366f3",
      "closedAt": "2022-04-18T18:46:18Z",
      "mergedAt": "2022-04-18T18:46:18Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "8b9482a563779f96165801a4c526a7317c6e89c8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 150,
      "id": "PR_kwDOEpUZs842bzo5",
      "title": "Update group commitment derivation to have a single scalarmul",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/150",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This fixes the derivation of the group commitment so that it requires a single scalar multiplication, as opposed to `t`",
      "createdAt": "2022-04-19T15:28:25Z",
      "updatedAt": "2022-04-25T20:59:24Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "8b9482a563779f96165801a4c526a7317c6e89c8",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "scalarmul",
      "headRefOid": "39bd7a8c128478363076181b882a4f3243a7b0fc",
      "closedAt": "2022-04-25T20:59:24Z",
      "mergedAt": "2022-04-25T20:59:24Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3474ec087a51fbd0e11ec0838233c53ba99e940e"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "> This is good, but let's please also update the reference implementation to match.\r\n\r\nThanks, updated. ",
          "createdAt": "2022-04-24T12:43:53Z",
          "updatedAt": "2022-04-24T12:43:53Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844ZxnU",
          "commit": {
            "abbreviatedOid": "ef41428"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This is good, but let's please also update the reference implementation to match.",
          "createdAt": "2022-04-19T20:50:46Z",
          "updatedAt": "2022-04-19T20:50:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs844xTBe",
          "commit": {
            "abbreviatedOid": "39bd7a8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM!",
          "createdAt": "2022-04-25T20:59:11Z",
          "updatedAt": "2022-04-25T20:59:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 153,
      "id": "PR_kwDOEpUZs842gE9c",
      "title": "Various editorial improvements",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/153",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-04-20T15:45:17Z",
      "updatedAt": "2022-04-27T15:31:58Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "8b9482a563779f96165801a4c526a7317c6e89c8",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/edits",
      "headRefOid": "f932e268848fb6860c15a2939490062c2194fc99",
      "closedAt": "2022-04-27T15:31:50Z",
      "mergedAt": "2022-04-27T15:31:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b3063a8b7a66bce22545b4398b698a4debede4db"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "We received feedback that the definition of G as an abstract data type as opposed to a mathematical group should be made more clear, so we need to do that. If you don't want to add `G` in front of each function, then please add some more text clarifying that `G` is more than the mathematical type. ",
          "createdAt": "2022-04-25T14:13:43Z",
          "updatedAt": "2022-04-25T14:13:43Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> We received feedback that the definition of G as an abstract data type as opposed to a mathematical group should be made more clear, so we need to do that. If you don't want to add G in front of each function, then please add some more text clarifying that G is more than the mathematical type.\r\n\r\nI think the text is quite clear as-is, so I think the feedback has been adequately addressed. I would prefer we not hold up this PR on something that can be addressed in subsequent changes. \r\n",
          "createdAt": "2022-04-25T20:05:48Z",
          "updatedAt": "2022-04-25T20:05:48Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Opened #155 and assigned it to myself, let's merge in these editorial changes so they are not blocked on a nit. \r\n",
          "createdAt": "2022-04-26T20:25:02Z",
          "updatedAt": "2022-04-26T20:25:02Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @chelseakomlo!",
          "createdAt": "2022-04-27T15:31:58Z",
          "updatedAt": "2022-04-27T15:31:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844vHEB",
          "commit": {
            "abbreviatedOid": "f932e26"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This looks good but we should have something that clarifies where the functions on `G` come from.",
          "createdAt": "2022-04-25T13:35:18Z",
          "updatedAt": "2022-04-25T13:42:56Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Adding the `G` in front is meant to clarify questions later on as to where these functions are from? ",
              "createdAt": "2022-04-25T13:35:18Z",
              "updatedAt": "2022-04-25T13:42:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs844vLaM",
          "commit": {
            "abbreviatedOid": "f932e26"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-25T13:46:06Z",
          "updatedAt": "2022-04-25T13:46:06Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "The sentence right before this list says all functions are member functions on G, so I don't think this is necessary.",
              "createdAt": "2022-04-25T13:46:06Z",
              "updatedAt": "2022-04-25T13:46:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs844vHEC",
          "commit": {
            "abbreviatedOid": "f932e26"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good, with the TODO moved to a separate issue.",
          "createdAt": "2022-04-25T13:35:18Z",
          "updatedAt": "2022-04-26T20:26:05Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Adding the `G` in front is meant to clarify questions later on as to where these functions are from? ",
              "createdAt": "2022-04-25T13:35:18Z",
              "updatedAt": "2022-04-26T20:26:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 154,
      "id": "PR_kwDOEpUZs842jWjU",
      "title": "Bump divergentdave/i-d-template from 1.pre.alpha to 1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/154",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [divergentdave/i-d-template](https://github.com/divergentdave/i-d-template) from 1.pre.alpha to 1.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/cdd0b6a57dc10006d8937595df9c78805270d41c\"><code>cdd0b6a</code></a> Damned quoting</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/aa32825d42c99ef0eb7d40513379396f5af561ee\"><code>aa32825</code></a> Use the token parameter</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/254f51daf48ceeda1979d579623f0e8c4f7e24ad\"><code>254f51d</code></a> Add a token input</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/abef2738de24bb021767bf873fe38bc002a668e0\"><code>abef273</code></a> Use a bearer token perhaps</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/744378076cc320c5e3ee378ed98fe8505debaa74\"><code>7443780</code></a> Don't look at HEAD for the default branch except as a last resort</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/28d6fa2f417c08e523347d583daff889d0ceadfc\"><code>28d6fa2</code></a> Lint first</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/b39ca039bd0eb35ec2ae8037a913c7af609d0892\"><code>b39ca03</code></a> Only match draft-<em>.txt and rfc</em>.txt</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/1348df4597e7b98c8b2bdb93692860b61258c977\"><code>1348df4</code></a> Remove build-index-md.sh</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/6acfe554c3f534202ef8398ca98fb411c000ccd6\"><code>6acfe55</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/divergentdave/i-d-template/issues/248\">#248</a> from martinthomson/mnot-index-md</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/1d562b8f8b2f2cec602687b1902ab55561b61b3c\"><code>1d562b8</code></a> Merge branch 'main' into mnot-index-md</li>\n<li>Additional commits viewable in <a href=\"https://github.com/divergentdave/i-d-template/compare/v1-alpha...v1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=divergentdave/i-d-template&package-manager=github_actions&previous-version=1.pre.alpha&new-version=1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-04-21T11:29:32Z",
      "updatedAt": "2022-05-09T22:26:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "8b9482a563779f96165801a4c526a7317c6e89c8",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/divergentdave/i-d-template-1",
      "headRefOid": "701317c69b8880dba7fa15792c7879fbe172ef09",
      "closedAt": "2022-05-09T22:26:01Z",
      "mergedAt": "2022-05-09T22:26:01Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "4f431b1495173d740b894c3520cb67f389c85279"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "`martinthomson` has merged the fix but not published or tagged a new release yet, so we can stay on the fork for now",
          "createdAt": "2022-05-09T22:26:47Z",
          "updatedAt": "2022-05-09T22:26:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844n1vW",
          "commit": {
            "abbreviatedOid": "701317c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-22T11:43:18Z",
          "updatedAt": "2022-04-22T11:43:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs845oZsd",
          "commit": {
            "abbreviatedOid": "701317c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-09T22:25:02Z",
          "updatedAt": "2022-05-09T22:25:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 156,
      "id": "PR_kwDOEpUZs84209nh",
      "title": "Remove wire format section",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/156",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Applications that embed FROST will need to decide how to encode things, so doing anything here doesn't add much value. Note that this follows the. HPKE convention of specifying the protocol construction but deferring application embeddings to other specifications.",
      "createdAt": "2022-04-26T20:35:46Z",
      "updatedAt": "2022-04-27T21:19:14Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b3063a8b7a66bce22545b4398b698a4debede4db",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "chris-wood-patch-1",
      "headRefOid": "db2f2f410ca27a36013a90ba31c29112691fd8cf",
      "closedAt": "2022-04-27T21:19:14Z",
      "mergedAt": "2022-04-27T21:19:14Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c2d80b2a9c56a07223810612816d1484c52c3543"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8448d55",
          "commit": {
            "abbreviatedOid": "9ec2c45"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGMT, thanks @chris-wood ",
          "createdAt": "2022-04-27T18:35:51Z",
          "updatedAt": "2022-04-27T18:35:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 158,
      "id": "PR_kwDOEpUZs8421zM0",
      "title": "Validate signature *shares*",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/158",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "... not signatures!",
      "createdAt": "2022-04-27T02:32:40Z",
      "updatedAt": "2022-04-27T04:04:41Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3474ec087a51fbd0e11ec0838233c53ba99e940e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "chris-wood-patch-2",
      "headRefOid": "346511b0cf3572efac4cc2d24b50cd3c32476d2b",
      "closedAt": "2022-04-27T04:04:41Z",
      "mergedAt": "2022-04-27T04:04:41Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "0abaef98d34cbc26119197814ae7896971e58b9a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8444S-Y",
          "commit": {
            "abbreviatedOid": "346511b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-27T04:04:34Z",
          "updatedAt": "2022-04-27T04:04:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 162,
      "id": "PR_kwDOEpUZs843PRhk",
      "title": "Add additional language for group and data types",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/162",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #155 ",
      "createdAt": "2022-05-03T16:16:06Z",
      "updatedAt": "2022-05-09T22:17:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c2d80b2a9c56a07223810612816d1484c52c3543",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "member-functions",
      "headRefOid": "5f051eb3bb2ec30a68a189d71c5f147290a1ef7b",
      "closedAt": "2022-05-03T17:56:04Z",
      "mergedAt": "2022-05-03T17:56:04Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "765c999b68a51728a93cd9f026f009c8eced2d91"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @chris-wood ! ",
          "createdAt": "2022-05-03T17:55:51Z",
          "updatedAt": "2022-05-03T17:55:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845QuBd",
          "commit": {
            "abbreviatedOid": "19f4976"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM!",
          "createdAt": "2022-05-03T16:49:43Z",
          "updatedAt": "2022-05-03T16:49:49Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\ngroup as the object `G` that additionally defines helper functions described below. The group operation\n```\n",
              "createdAt": "2022-05-03T16:49:43Z",
              "updatedAt": "2022-05-03T16:49:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs845RFQs",
          "commit": {
            "abbreviatedOid": "5f051eb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-03T18:06:42Z",
          "updatedAt": "2022-05-03T18:06:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs845oYe0",
          "commit": {
            "abbreviatedOid": "5f051eb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "\ud83d\udc4d",
          "createdAt": "2022-05-09T22:17:01Z",
          "updatedAt": "2022-05-09T22:17:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 163,
      "id": "PR_kwDOEpUZs843bfyj",
      "title": "Assert that the network channel used for signing should be authenticated",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/163",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "While fewer than `t` misbehaving players cannot do anything other than cause a DOS attack during signing, implementations should be able to identify which players misbehaved. This asserts that the network channel used during signing should be authenticated and reliable, but is allowed to be public. ",
      "createdAt": "2022-05-06T18:04:03Z",
      "updatedAt": "2022-05-09T17:10:18Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "765c999b68a51728a93cd9f026f009c8eced2d91",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "authenticated-channel",
      "headRefOid": "fbe12ce41a8a77ca6f344a1ba4220fb34053c541",
      "closedAt": "2022-05-09T17:10:15Z",
      "mergedAt": "2022-05-09T17:10:15Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "09c66e0c9895e5cf63d78c85df0a5f34d92f1440"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845ia_F",
          "commit": {
            "abbreviatedOid": "b15294e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-07T11:51:42Z",
          "updatedAt": "2022-05-07T11:53:58Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nwe assume that the network channel is additionally authenticated; confidentiality is not required.\r\n```",
              "createdAt": "2022-05-07T11:51:43Z",
              "updatedAt": "2022-05-07T11:53:58Z"
            },
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n```\r\n\r\nI don't think a new header is necessary here.",
              "createdAt": "2022-05-07T11:53:09Z",
              "updatedAt": "2022-05-07T11:53:58Z"
            },
            {
              "originalPosition": 11,
              "body": "We probably should repeat this in the security considerations section, but that can happen separately.",
              "createdAt": "2022-05-07T11:53:52Z",
              "updatedAt": "2022-05-07T11:53:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 165,
      "id": "PR_kwDOEpUZs843hRSt",
      "title": "Clarify types of NUM_SIGNERS and THRESHOLD_LIMIT",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/165",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #144",
      "createdAt": "2022-05-09T17:43:52Z",
      "updatedAt": "2022-05-09T18:00:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "09c66e0c9895e5cf63d78c85df0a5f34d92f1440",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "clarify-types",
      "headRefOid": "e893c24fc7421a26fdecfa676ef9f7cd35ea4834",
      "closedAt": "2022-05-09T18:00:50Z",
      "mergedAt": "2022-05-09T18:00:50Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "62cdc32b46c8c4478757590786444d64733a46bf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845naLg",
          "commit": {
            "abbreviatedOid": "595ec64"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-09T17:58:17Z",
          "updatedAt": "2022-05-09T17:58:17Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n  This value MUST NOT exceed p.\r\n```",
              "createdAt": "2022-05-09T17:58:17Z",
              "updatedAt": "2022-05-09T17:58:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs845naNW",
          "commit": {
            "abbreviatedOid": "595ec64"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-09T17:58:24Z",
          "updatedAt": "2022-05-09T17:58:24Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n  This value MUST NOT exceed p.\r\n```",
              "createdAt": "2022-05-09T17:58:24Z",
              "updatedAt": "2022-05-09T17:58:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs845naQj",
          "commit": {
            "abbreviatedOid": "595ec64"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM pending suggestions.",
          "createdAt": "2022-05-09T17:58:33Z",
          "updatedAt": "2022-05-09T17:58:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 166,
      "id": "PR_kwDOEpUZs843hUAP",
      "title": "Specify what the dealer is trusted to do",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/166",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #159",
      "createdAt": "2022-05-09T17:58:27Z",
      "updatedAt": "2022-05-09T22:24:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "09c66e0c9895e5cf63d78c85df0a5f34d92f1440",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "trusted-dealer-threat-mdoel",
      "headRefOid": "61770b3a7eb6a2e70d602fb9cad2e73a03e93100",
      "closedAt": "2022-05-09T21:01:41Z",
      "mergedAt": "2022-05-09T21:01:41Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "5ac520ff5ab33d0200b31ff76b73c2e22bc98a9a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845nxf8",
          "commit": {
            "abbreviatedOid": "61770b3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-09T19:24:48Z",
          "updatedAt": "2022-05-09T19:24:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs845oZiz",
          "commit": {
            "abbreviatedOid": "61770b3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "\ud83d\udc4d",
          "createdAt": "2022-05-09T22:24:00Z",
          "updatedAt": "2022-05-09T22:24:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 167,
      "id": "PR_kwDOEpUZs8430NKv",
      "title": "Change participant index terminology to identifier",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/167",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #142",
      "createdAt": "2022-05-14T03:01:49Z",
      "updatedAt": "2022-05-14T17:16:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f431b1495173d740b894c3520cb67f389c85279",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "identifier",
      "headRefOid": "79ce8f1cd9b26577c1eb3babdf36ce835861b7ee",
      "closedAt": "2022-05-14T17:16:31Z",
      "mergedAt": "2022-05-14T17:16:31Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "da54ae29e42105f99d2332d733c152748b0eda30"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845_u1k",
          "commit": {
            "abbreviatedOid": "4205000"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-14T11:37:24Z",
          "updatedAt": "2022-05-14T11:38:09Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n- Add additional constraints on participant indexes and nonce usage (#105, #103, #98, #97).\r\n```\r\nWe probably shouldn't update this one since it's the change log.",
              "createdAt": "2022-05-14T11:37:41Z",
              "updatedAt": "2022-05-14T11:38:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 168,
      "id": "PR_kwDOEpUZs8430PQT",
      "title": "Specify ordering of polynomial",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/168",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-14T03:29:23Z",
      "updatedAt": "2022-05-14T15:13:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f431b1495173d740b894c3520cb67f389c85279",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "coeff-vec",
      "headRefOid": "0ea7f096320038e800b9c4cd9dc494a0f8f889d2",
      "closedAt": "2022-05-14T15:13:52Z",
      "mergedAt": "2022-05-14T15:13:52Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "35125c31b28f1d63c94e7f319293629a5bb9a832"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845_u0l",
          "commit": {
            "abbreviatedOid": "401b018"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-14T11:36:43Z",
          "updatedAt": "2022-05-14T11:36:46Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nis in the first position and the highest-degree coefficient is in the last position. \r\n```",
              "createdAt": "2022-05-14T11:36:43Z",
              "updatedAt": "2022-05-14T11:36:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 169,
      "id": "PR_kwDOEpUZs8430Pwx",
      "title": "Clarify Lagrange function",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/169",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-14T03:40:26Z",
      "updatedAt": "2022-05-14T15:14:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f431b1495173d740b894c3520cb67f389c85279",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "lagrange",
      "headRefOid": "2644bc8f2d45aa5423452142168ca1a239613b09",
      "closedAt": "2022-05-14T15:14:26Z",
      "mergedAt": "2022-05-14T15:14:26Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "e4f0aee154c8041c2a4a52c403378821af576c2e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845_uzp",
          "commit": {
            "abbreviatedOid": "ac76519"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-14T11:35:45Z",
          "updatedAt": "2022-05-14T11:35:50Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n`f` at point 0, i.e., `f(0)`, given a set of `t` other points.\r\n```",
              "createdAt": "2022-05-14T11:35:45Z",
              "updatedAt": "2022-05-14T11:35:50Z"
            }
          ]
        }
      ]
    },
    {
      "number": 170,
      "id": "PR_kwDOEpUZs8432LHD",
      "title": "Clarify lagrange terminology",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/170",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-16T02:10:00Z",
      "updatedAt": "2022-05-16T15:34:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "da54ae29e42105f99d2332d733c152748b0eda30",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "clarify-degree",
      "headRefOid": "95d0d2a0a7a1aa89f5df76ea5f30d781ff0bdb8d",
      "closedAt": "2022-05-16T15:34:24Z",
      "mergedAt": "2022-05-16T15:34:24Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "51fa62de8de6f66052a1f493572ac423f86bc9da"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846A_jY",
          "commit": {
            "abbreviatedOid": "95d0d2a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-16T02:17:40Z",
          "updatedAt": "2022-05-16T02:17:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 171,
      "id": "PR_kwDOEpUZs8436O-4",
      "title": "Use THRESHOLD_LIMIT instead of t and MAX_SIGNERS instead of n",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/171",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-16T21:17:42Z",
      "updatedAt": "2022-05-17T19:45:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "51fa62de8de6f66052a1f493572ac423f86bc9da",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "consistent-threshold-limit",
      "headRefOid": "0bb6418c073edbd0ec94f49a01e7c819daf32d17",
      "closedAt": "2022-05-17T19:45:47Z",
      "mergedAt": "2022-05-17T19:45:46Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "ba36b41d74403ffdb0547f73e45da6223af8aee6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846GF4T",
          "commit": {
            "abbreviatedOid": "344aed7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "This seems partially done. For consistency, if we're going to use `THRESHOLD_LIMIT` everywhere instead of `t`, then I think we ought to also use `MAX_SIGNERS` everywhere instead of `n`.",
          "createdAt": "2022-05-16T23:40:26Z",
          "updatedAt": "2022-05-16T23:40:59Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Should we also use `MAX_SIGNERS` instead of `n` everywhere? ",
              "createdAt": "2022-05-16T23:40:26Z",
              "updatedAt": "2022-05-16T23:40:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846GiJY",
          "commit": {
            "abbreviatedOid": "344aed7"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-17T03:42:14Z",
          "updatedAt": "2022-05-17T03:42:14Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Sure, good idea. ",
              "createdAt": "2022-05-17T03:42:14Z",
              "updatedAt": "2022-05-17T03:42:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846Jj_3",
          "commit": {
            "abbreviatedOid": "344aed7"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-17T14:29:56Z",
          "updatedAt": "2022-05-17T14:29:57Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "@chris-wood fixed. ",
              "createdAt": "2022-05-17T14:29:57Z",
              "updatedAt": "2022-05-17T14:29:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846KoR7",
          "commit": {
            "abbreviatedOid": "0bb6418"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-17T17:40:33Z",
          "updatedAt": "2022-05-17T17:40:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 172,
      "id": "PR_kwDOEpUZs8436QX1",
      "title": "Allow for t=1, if desired by implementations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/172",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-16T21:23:44Z",
      "updatedAt": "2022-05-17T17:33:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "51fa62de8de6f66052a1f493572ac423f86bc9da",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "threshold-one",
      "headRefOid": "dcfc75e4520be8cb4e0c4596726406f26df0c304",
      "closedAt": "2022-05-17T17:33:25Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "After discussion with @dconnolly, we agree with @chris-wood and decided to not merge this. ",
          "createdAt": "2022-05-17T17:33:25Z",
          "updatedAt": "2022-05-17T17:33:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846GF0U",
          "commit": {
            "abbreviatedOid": "dcfc75e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Hmm, I'm not sure about this one. I think we ought to continue requiring t >= 2, as otherwise there's no benefit to the function. ",
          "createdAt": "2022-05-16T23:39:53Z",
          "updatedAt": "2022-05-16T23:39:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 174,
      "id": "PR_kwDOEpUZs8437OCu",
      "title": "Clarify VSS description, add MUST for view of VSS commitment",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/174",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-17T03:51:00Z",
      "updatedAt": "2022-05-19T16:13:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "51fa62de8de6f66052a1f493572ac423f86bc9da",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "clarify-vss",
      "headRefOid": "ac79e507edac657be6e6b6c0058892ca5ed0f9ac",
      "closedAt": "2022-05-19T16:13:20Z",
      "mergedAt": "2022-05-19T16:13:20Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "61b7a5c6234a4b432a667d986b0695cfd8ffb794"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846IIZU",
          "commit": {
            "abbreviatedOid": "3fd7a4b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Mostly reverts.",
          "createdAt": "2022-05-17T10:15:07Z",
          "updatedAt": "2022-05-17T10:16:45Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This change will conflict with the other one in flight, so I'd revert it.",
              "createdAt": "2022-05-17T10:15:07Z",
              "updatedAt": "2022-05-17T10:16:45Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n  - vss_commitment, a vector commitment of `Element`s in `G`, to each of the coefficients in the polynomial defined by secret_key_shares and whose constant term is G.ScalarBaseMult(s).\r\n```",
              "createdAt": "2022-05-17T10:16:00Z",
              "updatedAt": "2022-05-17T10:16:45Z"
            },
            {
              "originalPosition": 23,
              "body": "If we're going to use normative language here, then we need to describe what happens or should happen when this isn't met. I'd revert this, too.",
              "createdAt": "2022-05-17T10:16:35Z",
              "updatedAt": "2022-05-17T10:16:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846KnfX",
          "commit": {
            "abbreviatedOid": "3fd7a4b"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-17T17:37:49Z",
          "updatedAt": "2022-05-17T17:37:49Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "After discussion with @dconnolly, we can just add \"MUST abort if they do not have the same view of `C`\" ",
              "createdAt": "2022-05-17T17:37:49Z",
              "updatedAt": "2022-05-17T17:37:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846WFy2",
          "commit": {
            "abbreviatedOid": "ac79e50"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-19T16:12:57Z",
          "updatedAt": "2022-05-19T16:12:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 175,
      "id": "PR_kwDOEpUZs8437Q_5",
      "title": "Consistent function naming and fix up old comments",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/175",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-17T04:12:25Z",
      "updatedAt": "2022-05-17T10:14:31Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "51fa62de8de6f66052a1f493572ac423f86bc9da",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "fix-up-comments",
      "headRefOid": "8002b8ea6624418b12b73db0f9f137082dfbc199",
      "closedAt": "2022-05-17T10:14:31Z",
      "mergedAt": "2022-05-17T10:14:31Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "1780cb4eef8bcd4808697793617dd4b4efeb7c57"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846IINP",
          "commit": {
            "abbreviatedOid": "8002b8e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-17T10:14:27Z",
          "updatedAt": "2022-05-17T10:14:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 176,
      "id": "PR_kwDOEpUZs8437Ww_",
      "title": "Update number of assumed corrupted",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/176",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-17T04:50:15Z",
      "updatedAt": "2022-05-20T22:35:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "19158a9d4f77a3a79de3182332b31037a233c257",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "unforg-t",
      "headRefOid": "0c8ee749fd810120cdadf1298484b8713dc86178",
      "closedAt": "2022-05-20T22:35:36Z",
      "mergedAt": "2022-05-20T22:35:36Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "ac27238a056c88e0774a2c32a4f29846164d17b1"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Cited EUF-CMA definition from Boneh/Shoup, so closing. ",
          "createdAt": "2022-05-20T22:35:31Z",
          "updatedAt": "2022-05-20T22:35:31Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846IICz",
          "commit": {
            "abbreviatedOid": "45c20f6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-17T10:13:55Z",
          "updatedAt": "2022-05-17T10:13:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs846IIIR",
          "commit": {
            "abbreviatedOid": "45c20f6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-17T10:14:11Z",
          "updatedAt": "2022-05-17T10:14:12Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Can we also drop a citation to EUF-CMA security while we're at it?",
              "createdAt": "2022-05-17T10:14:12Z",
              "updatedAt": "2022-05-17T10:14:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846IyN-",
          "commit": {
            "abbreviatedOid": "45c20f6"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-17T12:31:08Z",
          "updatedAt": "2022-05-17T12:31:08Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Is there one you had in mind? Otherwise I'll just cite Boneh/Shoup, I guess. ",
              "createdAt": "2022-05-17T12:31:08Z",
              "updatedAt": "2022-05-17T12:31:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846KlkB",
          "commit": {
            "abbreviatedOid": "45c20f6"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-17T17:30:47Z",
          "updatedAt": "2022-05-17T17:30:47Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n* Unforgeability assuming at most `(t-1)` corrupted signers. So long as an adversary\r\n```",
              "createdAt": "2022-05-17T17:30:47Z",
              "updatedAt": "2022-05-17T17:30:47Z"
            }
          ]
        }
      ]
    },
    {
      "number": 177,
      "id": "PR_kwDOEpUZs843-x9k",
      "title": "Various editorial improvements",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/177",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-17T19:40:49Z",
      "updatedAt": "2022-05-18T17:01:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ba36b41d74403ffdb0547f73e45da6223af8aee6",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "hashes",
      "headRefOid": "4b0111de7e088e7ea080485aba2c4650bcd93971",
      "closedAt": "2022-05-18T17:01:45Z",
      "mergedAt": "2022-05-18T17:01:45Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "0f8a8dc8c84bc6951d2ef9ed2adb8d9126346d8a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846Pig6",
          "commit": {
            "abbreviatedOid": "27bc957"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-18T15:12:22Z",
          "updatedAt": "2022-05-18T15:12:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 178,
      "id": "PR_kwDOEpUZs843-0MG",
      "title": "Add more specific information about participant identifiers",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/178",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-17T19:51:08Z",
      "updatedAt": "2022-05-20T22:24:24Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ba36b41d74403ffdb0547f73e45da6223af8aee6",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "signer-index",
      "headRefOid": "bf767eac7de2c6af149dcbc80e380b83fbf6efdc",
      "closedAt": "2022-05-20T22:24:20Z",
      "mergedAt": "2022-05-20T22:24:20Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "19158a9d4f77a3a79de3182332b31037a233c257"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging in as this addresses @chris-wood's review. ",
          "createdAt": "2022-05-20T22:23:56Z",
          "updatedAt": "2022-05-20T22:23:56Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846PiLH",
          "commit": {
            "abbreviatedOid": "a6fe83b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Suggest relocating this text to somewhere else, but otherwise LGTM.",
          "createdAt": "2022-05-18T15:11:32Z",
          "updatedAt": "2022-05-18T15:11:45Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I would move this to the start of section 5, where we first start talking about participants (outside of this terminology list).",
              "createdAt": "2022-05-18T15:11:32Z",
              "updatedAt": "2022-05-18T15:11:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846RRVA",
          "commit": {
            "abbreviatedOid": "a6fe83b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-18T20:34:56Z",
          "updatedAt": "2022-05-18T20:34:56Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I'm cool with it in either location",
              "createdAt": "2022-05-18T20:34:56Z",
              "updatedAt": "2022-05-18T20:34:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dHJN",
          "commit": {
            "abbreviatedOid": "a6fe83b"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T22:23:19Z",
          "updatedAt": "2022-05-20T22:23:19Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Done",
              "createdAt": "2022-05-20T22:23:19Z",
              "updatedAt": "2022-05-20T22:23:19Z"
            }
          ]
        }
      ]
    },
    {
      "number": 179,
      "id": "PR_kwDOEpUZs843-1jN",
      "title": "Require SerializeElement to fail if the Element is the identity element; Add specific Serialize functions for public keys",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/179",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We need to specify different serialization/deserialization functions for public keys, which are allowed to be the identity element. ",
      "createdAt": "2022-05-17T19:58:34Z",
      "updatedAt": "2022-05-27T12:21:28Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ba36b41d74403ffdb0547f73e45da6223af8aee6",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "serializeelem",
      "headRefOid": "cb2266923e88f8a84c9aa7d875bac53e9deff8b8",
      "closedAt": "2022-05-27T12:21:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> We need to specify different serialization/deserialization functions for public keys, which are allowed to be the identity element.\r\n\r\nWhy do we allow public keys to be the identity element?",
          "createdAt": "2022-05-18T11:20:38Z",
          "updatedAt": "2022-05-18T11:20:38Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "So that sampling the secret key occurs from the full distribution. ",
          "createdAt": "2022-05-18T14:07:56Z",
          "updatedAt": "2022-05-18T14:07:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> So that sampling the secret key occurs from the full distribution.\r\n\r\nWell, in principle that's nice, but if the public key is the identity element then the secret key is known. I think there's nothing to be gained from permitting this value, so I'm opposed to this change.",
          "createdAt": "2022-05-18T14:09:31Z",
          "updatedAt": "2022-05-18T14:09:31Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood Can you point to other standards that sample secret key material from the distribution that excludes the zero element? \r\n\r\nFrom what I can tell, RFC 8032 does not exclude zero from being the value of the secret key (although it is unlikely). https://datatracker.ietf.org/doc/html/rfc8032#section-5.1.5\r\n\r\n\r\n",
          "createdAt": "2022-05-18T14:27:08Z",
          "updatedAt": "2022-05-18T14:28:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Certainly! [ECDSA key generation](https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.186-4.pdf) (appendix B.4), for example, omits the zero key. \r\n\r\n> From what I can tell, RFC 8032 does not exclude zero from being the value of the secret key (although it is unlikely). https://datatracker.ietf.org/doc/html/rfc8032#section-5.1.5\r\n\r\nThis isn't quite the same. RFC 8032 doesn't permit the _seed_ from being all zeroes, but doesn't say anything about the resulting scalar (the seed is hashed with some other stuff to get the scalar). We don't specify key generation for FROST because it's somewhat out of scope.\r\n\r\nIf we do anything here, I'd recommend saying that the secret key split by the dealer must not be 0. We're not really very precise with how that secret is generated.",
          "createdAt": "2022-05-18T14:43:22Z",
          "updatedAt": "2022-05-18T14:43:22Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "To use these signatures as binding signatures the identity _must_ be permitted as a valid verification key (public key) to ensure it satisfies the definition of a key monomorphism. We want the distribution of signing keys (secret keys) to be uniform and identical as well.\r\n\r\nWhen signatures like these are used in higher-order protocols like Zcash, the rejection of 0's as secret keys or the identity as public keys is done at the _protocol_ level, not as part of the signature scheme, to preserve these uniform distribution properties.\r\n\r\nIn either way, I think similar to our `RandomNonZeroScalar` and `RandomScalar` functions, we could specify `SerializeNonIdentityElement` and `DeserializeNonIdentityElement` for use when serializing/deserializing the nonce commitments and the polynomial coefficient commitments, which MUST never be zero/their commitments be the identity element (// @chelseakomlo can double-check me on that)",
          "createdAt": "2022-05-18T14:47:01Z",
          "updatedAt": "2022-05-18T14:47:01Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> To use these signatures as binding signatures the identity must be permitted as a valid verification key (public key) to ensure it satisfies the definition of a key monomorphism. We want the distribution of signing keys (secret keys) to be uniform and identical as well.\r\n\r\nIf the identity public key is permitted, then anyone can forge signatures. Would you agree with this?\r\n\r\n> When signatures like these are used in higher-order protocols like Zcash, the rejection of 0's as secret keys or the identity as public keys is done at the protocol level, not as part of the signature scheme, to preserve these uniform distribution properties.\r\n\r\nYes, this is a perfectly fine way to deal with it! We don't specify key generation here, as that's something for the application to deal with. \r\n\r\n> In either way, I think similar to our RandomNonZeroScalar and RandomScalar functions, we could specify SerializeNonIdentityElement and DeserializeNonIdentityElement for use when serializing/deserializing the nonce commitments and the polynomial coefficient commitments, which MUST never be zero/their commitments be the identity element\r\n\r\nI don't see why this would be necessary as those elements are guaranteed to be non-zero by construction. What am I missing?",
          "createdAt": "2022-05-18T14:49:25Z",
          "updatedAt": "2022-05-18T14:51:22Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> I don't see why this would be necessary as those elements are guaranteed to be non-zero by construction. What am I missing?\r\n\r\nIf we're receiving nonce commitments from other parties we should check that they are actually not the identity, if they are we don't use them. This is defense in depth.",
          "createdAt": "2022-05-18T14:54:13Z",
          "updatedAt": "2022-05-18T14:54:13Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> If we're receiving nonce commitments from other parties we should check that they are actually not the identity, if they are we don't use them. This is defense in depth.\r\n\r\nYes, and we do that already by failing to deserialize the identity.",
          "createdAt": "2022-05-18T14:54:40Z",
          "updatedAt": "2022-05-18T14:54:40Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> > If we're receiving nonce commitments from other parties we should check that they are actually not the identity, if they are we don't use them. This is defense in depth.\r\n> \r\n> Yes, and we do that already by failing to deserialize the identity.\r\n\r\nBut we _should not_ fail to deserialize the identity for public keys, or the final R in the final Schnorr signature / group commitment. Hence a separate function.",
          "createdAt": "2022-05-18T14:55:57Z",
          "updatedAt": "2022-05-18T14:55:57Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> But we should not fail to deserialize the identity for public keys, or the final R in the final Schnorr signature / group commitment. Hence a separate function.\r\n\r\nI'm saying I disagree with this claim, and would like to see a reason why it's needed.",
          "createdAt": "2022-05-18T14:56:28Z",
          "updatedAt": "2022-05-18T14:56:28Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> > But we should not fail to deserialize the identity for public keys, or the final R in the final Schnorr signature / group commitment. Hence a separate function.\r\n> \r\n> I'm saying I disagree with this claim, and would like to see a reason why it's needed.\r\n\r\ntl;dr this scheme is not composable in other protocols that need a uniform distribution of keys to achieve binding. The rejection of zero keys / identity pubkeys can be done as part of keygen, but those kinds of keys must be possible as part of this signature scheme.",
          "createdAt": "2022-05-18T14:58:54Z",
          "updatedAt": "2022-05-18T14:58:54Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's discuss offline.",
          "createdAt": "2022-05-18T14:59:46Z",
          "updatedAt": "2022-05-18T14:59:46Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Naming things debate: `PublicKey` or `VerifyingKey`? \r\n\r\n(this is of course a low priority thing)",
          "createdAt": "2022-05-19T18:07:02Z",
          "updatedAt": "2022-05-19T18:07:02Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "We use public key terminology elsewhere in the draft, so I'm going to stick with that. ",
          "createdAt": "2022-05-19T22:56:51Z",
          "updatedAt": "2022-05-19T22:56:51Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "TODO from discussion with @chris-wood: Define an alias in the helper functions for `SerializePublicKey/DeserializePublicKey` and then define `SerializeNonIdentity/DeserializeNonIdentity` as a function for the group",
          "createdAt": "2022-05-20T15:29:53Z",
          "updatedAt": "2022-05-20T15:29:53Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll spin out a separate issue to include the security considerations.",
          "createdAt": "2022-05-23T17:21:17Z",
          "updatedAt": "2022-05-23T17:21:17Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "TODO: Add deserialization of the group info so that this function is used.",
          "createdAt": "2022-05-25T16:22:17Z",
          "updatedAt": "2022-05-25T16:22:17Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to close this as a won't fix until we have further discussions about which direction to take going forward.",
          "createdAt": "2022-05-27T12:21:13Z",
          "updatedAt": "2022-05-27T12:21:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846V8-U",
          "commit": {
            "abbreviatedOid": "9039f01"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-19T15:51:25Z",
          "updatedAt": "2022-05-19T15:51:26Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\n```\r\nThis is duplicated from `DesieralizeElement` above.",
              "createdAt": "2022-05-19T15:51:25Z",
              "updatedAt": "2022-05-19T15:51:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846V9TA",
          "commit": {
            "abbreviatedOid": "9039f01"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-19T15:52:22Z",
          "updatedAt": "2022-05-19T15:52:23Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "@dconnolly's suggestion to make this SerializeNonIdentityElement seems good, so I might make that change here (and similarly for the deserialize function).",
              "createdAt": "2022-05-19T15:52:22Z",
              "updatedAt": "2022-05-19T15:52:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846Wr3W",
          "commit": {
            "abbreviatedOid": "9039f01"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-19T18:03:52Z",
          "updatedAt": "2022-05-19T18:03:52Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Since the only place where we may allow the identity is pub keys, and all other element serializations in this spec can/should exclude the identity, I have come around to the suggestion of a ciphersuite-defined `*serializePublicKey`\r\n",
              "createdAt": "2022-05-19T18:03:52Z",
              "updatedAt": "2022-05-19T18:03:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846WsaI",
          "commit": {
            "abbreviatedOid": "9039f01"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-19T18:05:54Z",
          "updatedAt": "2022-05-19T18:05:54Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Signature commitments, nonce commitments, group commitments, all can/should reject the identity, and the only place that MAY not are the public keys (just reviewing the spec just now this appears correct)",
              "createdAt": "2022-05-19T18:05:54Z",
              "updatedAt": "2022-05-19T18:05:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dhld",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Beyond these suggestions, I think we're still missing security considerations for what happens when the identity element is allowed to be the public key.",
          "createdAt": "2022-05-21T11:12:23Z",
          "updatedAt": "2022-05-21T11:21:21Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n- SerializeElement(A): Maps an `Element` `A` to a unique byte array `buf` of fixed length `Ne`.\r\n```",
              "createdAt": "2022-05-21T11:12:23Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n- SerializeNonIdentityElement(A): Maps an `Element` `A` to a unique byte array `buf` of fixed length `Ne`.\r\n  This function will raise a SerializeError if `A` is the identity element of the group.\r\n```",
              "createdAt": "2022-05-21T11:13:04Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-05-21T11:13:39Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 41,
              "body": "This isn't used?",
              "createdAt": "2022-05-21T11:14:42Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 42,
              "body": "```suggestion\r\nFinally, the protocol in this document uses the function `SerializePublicKey` as an alias for `SerializeElement`. \r\n```",
              "createdAt": "2022-05-21T11:16:14Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 121,
              "body": "This is missing the identity check, right?",
              "createdAt": "2022-05-21T11:16:50Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 151,
              "body": "```suggestion\r\n    This function raises a SerializeError exception if the input is the identity element.\r\n```",
              "createdAt": "2022-05-21T11:18:27Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 133,
              "body": "```suggestion\r\n    This function raises a SerializeError exception if the input is the identity element.\r\n```",
              "createdAt": "2022-05-21T11:18:41Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 120,
              "body": "```suggestion\r\n  - SerializeNonIdentityElement: Implemented using the 'Encode' function from {{!RISTRETTO}}.\r\n     This function raises a SerializeError exception if the input is the identity element.\r\n```",
              "createdAt": "2022-05-21T11:18:56Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 107,
              "body": "```suggestion\r\n    This function raises a SerializeError exception if the input is the identity element.\r\n```",
              "createdAt": "2022-05-21T11:19:05Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dwzn",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:05:44Z",
          "updatedAt": "2022-05-21T22:05:44Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-05-21T22:05:44Z",
              "updatedAt": "2022-05-21T22:05:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dw18",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:09:17Z",
          "updatedAt": "2022-05-21T22:09:17Z",
          "comments": [
            {
              "originalPosition": 168,
              "body": "The P256 thing excludes the point at infinity, which is usually the identity. Is there a way to exclude the identity for this version of P256 at all?",
              "createdAt": "2022-05-21T22:09:17Z",
              "updatedAt": "2022-05-21T22:09:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846g6rt",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-23T12:48:09Z",
          "updatedAt": "2022-05-23T12:48:10Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "You don't think we should define it, for symmetry? ",
              "createdAt": "2022-05-23T12:48:09Z",
              "updatedAt": "2022-05-23T12:48:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846h6cr",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-23T15:25:04Z",
          "updatedAt": "2022-05-23T15:25:04Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "My take is that if it's not used it shouldn't be included, like any dead code. ",
              "createdAt": "2022-05-23T15:25:04Z",
              "updatedAt": "2022-05-23T15:25:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846idoK",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-23T17:10:13Z",
          "updatedAt": "2022-05-23T17:10:13Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Per a conversation with @dconnolly , it is currently being used implicitly when receiving as input the group info. We agreed to make this step explicit, and to keep `DeserializePublicKey`. ",
              "createdAt": "2022-05-23T17:10:13Z",
              "updatedAt": "2022-05-23T17:10:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846t63q",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-25T16:16:07Z",
          "updatedAt": "2022-05-25T16:16:07Z",
          "comments": [
            {
              "originalPosition": 168,
              "body": "P256 is a group, which requires inclusion of the identity element. ",
              "createdAt": "2022-05-25T16:16:07Z",
              "updatedAt": "2022-05-25T16:16:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 181,
      "id": "PR_kwDOEpUZs844Ioi4",
      "title": "Add `DeserializeNonIdentityElement` and`SerializeNonIdentityElement`",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/181",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- [ ] TODO: double-check the P256 decoding algorithm we reference\r\n- [ ] TODO: add section in appendix that explicitly allows final group pubkeys to be the full uniform distribution of the group including the identity,  to support key rerandomization applications, but to note that where this is deployed in practice, low-order pubkeys (including the identity) are rejected at other locations in protocol composition (but not in the _signing_ and _verifying_ subroutines)",
      "createdAt": "2022-05-19T16:54:20Z",
      "updatedAt": "2022-05-19T17:59:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "serializeelem",
      "baseRefOid": "9039f013fc3163f39ac55b78975baa7ac5075b8a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "erialize-elements-identity",
      "headRefOid": "f431f9132c1805294eda5da076f81aadaf5f6a4b",
      "closedAt": "2022-05-19T17:59:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> * [ ]  TODO: double-check the P256 decoding algorithm we reference\r\n\r\n@chris-wood if you have a chance can you help clarify this?",
          "createdAt": "2022-05-19T17:18:48Z",
          "updatedAt": "2022-05-19T17:18:48Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "NEVERMIND going with @chelseakomlo 's original. All places _except public keys_ must reject the identity",
          "createdAt": "2022-05-19T17:57:18Z",
          "updatedAt": "2022-05-19T17:57:18Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846WZyT",
          "commit": {
            "abbreviatedOid": "0058387"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-19T17:15:46Z",
          "updatedAt": "2022-05-19T17:15:46Z",
          "comments": [
            {
              "originalPosition": 111,
              "body": "```suggestion\r\n  - SerializeNonIdentityElement: Implemented using the compressed Elliptic-Curve-Point-to-Octet-String\r\n    method according to {{SECG}}.  Additionally, this function validates that the element is not the group identity element.\r\n```",
              "createdAt": "2022-05-19T17:15:46Z",
              "updatedAt": "2022-05-19T17:15:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 182,
      "id": "PR_kwDOEpUZs844MWmY",
      "title": "Add `nonce_generate()` functions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/182",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I am uncomfortable creating subroutine definitions that allow passing in randomness, it screams \"give me [0u8; 32]\". So these functions have randomness sampling internal. \r\n\r\nOne has the `secret_share` (or should it just be `secret_key`, so this can be used in the singleton subroutines?), and the other does not. It 'calls' `H` directly, instead of adding another parameterized hash function to the ciphersuites. I have not update the nonce generation in the rest of the subroutines to use these yet, because of these kinda API questions.\r\n\r\nThoughts? ",
      "createdAt": "2022-05-20T14:01:44Z",
      "updatedAt": "2022-05-27T11:29:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "748f495741f2e3e9dbffa8e50ad5e995d38d2206",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "161",
      "headRefOid": "db579ef25707727193b812c21f5af4eed4910967",
      "closedAt": "2022-05-27T11:29:55Z",
      "mergedAt": "2022-05-27T11:29:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9863d3d394a524a0ddd47f0de196c4739594c3c9"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> If we're going to _always_ call nonce_generate with randomness, then let's just drop the variant that takes no randomness as input. It's just dead code at this point.\n\nOh yes definitely, I meant to remove the old one",
          "createdAt": "2022-05-20T21:09:54Z",
          "updatedAt": "2022-05-20T21:09:54Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> Looking for two changes:\r\n> \r\n> 1. Apply the editorial suggestion to remove \"in GF(p)\".\r\n> 2. Add this to the PoC (this can happen separately if we file an issue for it).\r\n\r\nOK including POC updates in this PR",
          "createdAt": "2022-05-23T17:24:24Z",
          "updatedAt": "2022-05-23T17:24:24Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> > Looking for two changes:\n> > \n> > 1. Apply the editorial suggestion to remove \"in GF(p)\".\n> > 2. Add this to the PoC (this can happen separately if we file an issue for it).\n> \n> OK including POC updates in this PR\n\nDone",
          "createdAt": "2022-05-24T15:08:48Z",
          "updatedAt": "2022-05-24T15:08:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846bEo3",
          "commit": {
            "abbreviatedOid": "91f25fa"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T14:07:45Z",
          "updatedAt": "2022-05-20T14:10:38Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\n  - secret_share, a Scalar\r\n```\r\n\r\nAlso, why is this called `secret_share`, and why does it need to be a Scalar? Can't it just be random bytes?",
              "createdAt": "2022-05-20T14:07:45Z",
              "updatedAt": "2022-05-20T14:10:38Z"
            },
            {
              "originalPosition": 42,
              "body": "```suggestion\r\n    hash_input = contextString || \"nonce\" || secret_share_enc || k_enc\r\n```\r\n\r\n... presumably?",
              "createdAt": "2022-05-20T14:08:10Z",
              "updatedAt": "2022-05-20T14:10:38Z"
            },
            {
              "originalPosition": 45,
              "body": "Since `DeserializeScalar` is fallible, I'd recommend we just do this:\r\n\r\n```\r\ndef nonce_generate(random_bytes):\r\n   k = G.RandomNonzeroScalar()\r\n   k_enc = G.SerializeScalar(k)\r\n   return H4(k_enc || random_bytes) \r\n```\r\n\r\nand then define `H4` _exactly_ as we do for H1 and H2, just with a different domain separator. ",
              "createdAt": "2022-05-20T14:10:35Z",
              "updatedAt": "2022-05-20T14:21:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846bGeW",
          "commit": {
            "abbreviatedOid": "91f25fa"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T14:12:52Z",
          "updatedAt": "2022-05-20T14:12:52Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "So we can do that even if it's 'optional'? (Optional because this was not part of the security proof)",
              "createdAt": "2022-05-20T14:12:52Z",
              "updatedAt": "2022-05-20T14:12:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846bG1M",
          "commit": {
            "abbreviatedOid": "91f25fa"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T14:13:49Z",
          "updatedAt": "2022-05-20T14:13:49Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "~Also, as this function doesn't _sample_ any randomness, I might call it `nonce_derive` (or `derive_nonce`).~\r\n\r\nI overlooked the first line -- oops -- disregard this comment!",
              "createdAt": "2022-05-20T14:13:49Z",
              "updatedAt": "2022-05-20T14:22:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846bVE6",
          "commit": {
            "abbreviatedOid": "7d2644d"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T14:49:01Z",
          "updatedAt": "2022-05-20T14:49:02Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "This is to perform `H(randomness, sk_i)` so I agree with @dconnolly's naming",
              "createdAt": "2022-05-20T14:49:02Z",
              "updatedAt": "2022-05-20T14:49:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846cASB",
          "commit": {
            "abbreviatedOid": "7d2644d"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T16:45:06Z",
          "updatedAt": "2022-05-20T16:45:07Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "OK cool",
              "createdAt": "2022-05-20T16:45:06Z",
              "updatedAt": "2022-05-20T16:45:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846cWGm",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good but let's be consistent with notation. ",
          "createdAt": "2022-05-20T18:03:58Z",
          "updatedAt": "2022-05-20T18:05:46Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I would be more specific here; we don't protect against a RNG returning all zero for example, but this does help for RNGs that return predictable randomness. ",
              "createdAt": "2022-05-20T18:03:58Z",
              "updatedAt": "2022-05-20T18:05:47Z"
            },
            {
              "originalPosition": 39,
              "body": "secret_share? or sk_i, to use notation that we employ elsewhere. ",
              "createdAt": "2022-05-20T18:04:34Z",
              "updatedAt": "2022-05-20T18:05:47Z"
            },
            {
              "originalPosition": 70,
              "body": "this is sk_i",
              "createdAt": "2022-05-20T18:04:59Z",
              "updatedAt": "2022-05-20T18:05:47Z"
            },
            {
              "originalPosition": 63,
              "body": "this is sk_i, see how it is defined in the sign algorithm. ",
              "createdAt": "2022-05-20T18:05:13Z",
              "updatedAt": "2022-05-20T22:17:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846c9KZ",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T21:05:06Z",
          "updatedAt": "2022-05-20T21:05:06Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I don't think this is true? The entropy of the output scalar is in the worst case min(entropy of random input, entropy of internally generated scalar), and if the RNG outputs zero or any other predictable value then we fall back on the entropy of the input. ",
              "createdAt": "2022-05-20T21:05:06Z",
              "updatedAt": "2022-05-20T21:05:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846c9Qd",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "If we're going to _always_ call nonce_generate with randomness, then let's just drop the variant that takes no randomness as input. It's just dead code at this point.",
          "createdAt": "2022-05-20T21:05:39Z",
          "updatedAt": "2022-05-20T21:07:45Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I don't think this should be a Scalar input -- I think it should be random bytes. ",
              "createdAt": "2022-05-20T21:05:40Z",
              "updatedAt": "2022-05-20T21:07:46Z"
            },
            {
              "originalPosition": 54,
              "body": "```suggestion\r\n    sk_enc = G.SerializeScalar(sk)\r\n    k = nonce_generate(sk_enc)\r\n```",
              "createdAt": "2022-05-20T21:07:01Z",
              "updatedAt": "2022-05-20T21:07:46Z"
            },
            {
              "originalPosition": 54,
              "body": "... to make my suggestion concrete.",
              "createdAt": "2022-05-20T21:07:10Z",
              "updatedAt": "2022-05-20T21:07:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dV5m",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T01:41:34Z",
          "updatedAt": "2022-05-21T01:41:35Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nTo hedge against a bad RNG, we generate nonces by sourcing fresh randomness and \r\n```",
              "createdAt": "2022-05-21T01:41:35Z",
              "updatedAt": "2022-05-21T01:41:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dwnj",
          "commit": {
            "abbreviatedOid": "5b3a5df"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T21:49:28Z",
          "updatedAt": "2022-05-21T21:49:29Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "```suggestion\r\n  def commit(sk_i):\r\n    hiding_nonce = nonce_generate(sk_i)\r\n    binding_nonce = nonce_generate(sk_i)\r\n```",
              "createdAt": "2022-05-21T21:49:28Z",
              "updatedAt": "2022-05-21T21:49:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dwn8",
          "commit": {
            "abbreviatedOid": "6ce4ae8"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T21:49:56Z",
          "updatedAt": "2022-05-21T21:49:57Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "```suggestion\r\n  Inputs: sk_i, the secret key share, a Scalar\r\n```",
              "createdAt": "2022-05-21T21:49:57Z",
              "updatedAt": "2022-05-21T21:49:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dwo6",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T21:51:21Z",
          "updatedAt": "2022-05-21T21:51:22Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "If we also want to use this in `schnorr_signature_generate()` which I do in this PR, it has to be either a singleton full secret key or a threshold secret key share",
              "createdAt": "2022-05-21T21:51:21Z",
              "updatedAt": "2022-05-21T21:51:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dwu7",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T21:59:53Z",
          "updatedAt": "2022-05-21T21:59:54Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I would argue for `Scalar` - no other subroutine takes 'bytes', the closest is a 'message'. The ~closest subroutine to this `nonce_generate` is `compute_challenge()`, which has `Public key, an Element` as an input; similarly here, we expect some `secret key`, which in either singleton or threshold is a `Scalar`.",
              "createdAt": "2022-05-21T21:59:53Z",
              "updatedAt": "2022-05-21T21:59:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dww5",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:02:26Z",
          "updatedAt": "2022-05-21T22:02:26Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Why does this need to be a secret key as input though? One could, for example, fold in any high-entropy secret established out of band to achieve the same effect, right? (My point is that this is too restrictive, basically.)",
              "createdAt": "2022-05-21T22:02:26Z",
              "updatedAt": "2022-05-21T22:02:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dw5T",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:13:59Z",
          "updatedAt": "2022-05-21T22:13:59Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "A good question!",
              "createdAt": "2022-05-21T22:13:59Z",
              "updatedAt": "2022-05-21T22:13:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dxVJ",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:59:30Z",
          "updatedAt": "2022-05-21T22:59:30Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "So, this hedge is here against a bad runtime RNG, by hoping/assuming that the RNG used to generate the secret key (share) was possibly better. We give specific requirements/assumptions for how FROST secret shares are generated. Allowing some generic set of bytes vs the secret key has less strict guarantees about the randomness of those bytes. Specifying that this is the secret key (share) gives users less leeway to say, rng the input bytes with the same rng used to source more nonce randomness at runtime. ",
              "createdAt": "2022-05-21T22:59:30Z",
              "updatedAt": "2022-05-21T22:59:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dyh5",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T00:59:52Z",
          "updatedAt": "2022-05-22T00:59:52Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Where do we give requirements for how secret key shares are generated? I thought that was out of scope for this document.",
              "createdAt": "2022-05-22T00:59:52Z",
              "updatedAt": "2022-05-22T00:59:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dypK",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:10:46Z",
          "updatedAt": "2022-05-22T01:10:46Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "![Screenshot_20220521-211017.png](https://user-images.githubusercontent.com/552961/169674108-6b04b9fa-df94-4abc-a366-68ae07340a32.png)",
              "createdAt": "2022-05-22T01:10:46Z",
              "updatedAt": "2022-05-22T01:10:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dyw7",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:23:19Z",
          "updatedAt": "2022-05-22T01:23:20Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "That's the requirement for any sampling in the spec, including the nonce, so I don't really think it's relevant to the discussion here? In any case, this is entirely an implementation detail that does not affect interoperability, so whatever we put here cannot possibly be enforced. I think we ought to go with the thing that can be used most broadly, and I currently think making it take in bytes -- which can be the encoded secret key share! -- is the best way to achieve that. ",
              "createdAt": "2022-05-22T01:23:20Z",
              "updatedAt": "2022-05-22T01:23:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dyzG",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:26:51Z",
          "updatedAt": "2022-05-22T01:26:51Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "It's not just about interop or enforceability but about the first suggestion to an implementor, and this suggestion is not about 'used most broadly', it's about taking learned lessons from ECDSA to hedge against bad RNGs.",
              "createdAt": "2022-05-22T01:26:51Z",
              "updatedAt": "2022-05-22T01:26:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dy0O",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:28:51Z",
          "updatedAt": "2022-05-22T01:28:51Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I'm not really sure we're understanding each other, because the suggestion I've provided would yield the exact same implementation as that which is currently done. ",
              "createdAt": "2022-05-22T01:28:51Z",
              "updatedAt": "2022-05-22T01:28:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dy2E",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:31:55Z",
          "updatedAt": "2022-05-22T01:31:55Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "no, text that tells a human implementer, pass in your secret key, versus text that says, pass in 32 bytes, does not deterministically result in the same implementation",
              "createdAt": "2022-05-22T01:31:55Z",
              "updatedAt": "2022-05-22T01:31:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dy2p",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:33:04Z",
          "updatedAt": "2022-05-22T01:33:05Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Please take a look at the suggestion I left.",
              "createdAt": "2022-05-22T01:33:04Z",
              "updatedAt": "2022-05-22T01:33:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dy3J",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:34:00Z",
          "updatedAt": "2022-05-22T01:34:00Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "@dconnolly this specifically^",
              "createdAt": "2022-05-22T01:34:00Z",
              "updatedAt": "2022-05-22T01:34:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dzGJ",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T02:01:21Z",
          "updatedAt": "2022-05-22T02:01:22Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I would still enforce this subroutine signature as a Scalar type, not 32 bytes (or equivalent number of Scalar bytes), as it is more likely to result in a function implementation that takes a 'key' type or at least a Scalar type which comes with more checks, and not an array of bytes\n\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/pull/182#discussion_r878779753",
              "createdAt": "2022-05-22T02:01:22Z",
              "updatedAt": "2022-05-22T02:01:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dzHd",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T02:02:59Z",
          "updatedAt": "2022-05-22T02:02:59Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Although the sourcing of a new random scalar and the immediately turning it into bytes to be hashed could be changed, if this is the only invocation of RandomNonZeroScalar maybe it should be replaced with RandomBytes of something ",
              "createdAt": "2022-05-22T02:02:59Z",
              "updatedAt": "2022-05-22T02:02:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846eB7c",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T12:00:32Z",
          "updatedAt": "2022-05-22T12:00:32Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "> I would still enforce this subroutine signature as a Scalar type, not 32 bytes (or equivalent number of Scalar bytes), as it is more likely to result in a function implementation that takes a 'key' type or at least a Scalar type which comes with more checks, and not an array of bytes\r\n\r\nWell, since this is an implementation detail, we can't force anything to happen really. At best we can nudge folks to do the sensible thing.\r\n\r\nIn any case, I think we've discussed this through enough. I think this is the wrong way to slice the abstraction for the spec, and I'm willing to be in the rough on that.",
              "createdAt": "2022-05-22T12:00:32Z",
              "updatedAt": "2022-05-22T12:00:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846eB8O",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T12:01:00Z",
          "updatedAt": "2022-05-22T12:01:00Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "```suggestion\r\n  - secret, a Scalar\r\n```\r\n\r\nScalars are in GF(p) by definition, so we don't need to say it here.",
              "createdAt": "2022-05-22T12:01:00Z",
              "updatedAt": "2022-05-22T12:01:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846eB-P",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looking for two changes:\r\n\r\n1. Apply the editorial suggestion to remove \"in GF(p)\".\r\n2. Add this to the PoC (this can happen separately if we file an issue for it).",
          "createdAt": "2022-05-22T12:02:14Z",
          "updatedAt": "2022-05-22T12:02:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs846id4O",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-23T17:11:09Z",
          "updatedAt": "2022-05-23T17:11:09Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Yes this is a nudge, cannot enforce but hopefully lead",
              "createdAt": "2022-05-23T17:11:09Z",
              "updatedAt": "2022-05-23T17:11:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846ipBX",
          "commit": {
            "abbreviatedOid": "bc54077"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-23T17:52:10Z",
          "updatedAt": "2022-05-23T17:52:10Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "```suggestion\r\n  Outputs: nonce, a Scalar\r\n```",
              "createdAt": "2022-05-23T17:52:10Z",
              "updatedAt": "2022-05-23T17:52:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846nmgI",
          "commit": {
            "abbreviatedOid": "f41596d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I would change how we define RandomBytes, as it seems orthogonal from the prime-order group, and we really don't need it to produce any more than 32 bytes.",
          "createdAt": "2022-05-24T15:36:04Z",
          "updatedAt": "2022-05-24T15:40:33Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n```\r\n\r\nI wouldn't make this a function for the group -- it's sort of just a routine that exists.\r\n",
              "createdAt": "2022-05-24T15:36:04Z",
              "updatedAt": "2022-05-24T15:40:33Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\nThese sections describes these operations in more detail. We also assume the existence\r\nof a function called `RandomBytes(n)`, which outputs `n` bytes from a cryptographically\r\nsecure pseudorandom number generator. See {{?RFC4086}} for guidance on randomness\r\ngeneration.\r\n```",
              "createdAt": "2022-05-24T15:39:15Z",
              "updatedAt": "2022-05-24T15:40:33Z"
            },
            {
              "originalPosition": 48,
              "body": "```suggestion\r\n    k_enc = RandomBytes(32)\r\n```\r\n\r\nAnything more than 32 is extreme overkill, so I'd recommend simplifying here.",
              "createdAt": "2022-05-24T15:39:51Z",
              "updatedAt": "2022-05-24T15:40:33Z"
            },
            {
              "originalPosition": 87,
              "body": "I would remove these per the suggestion above. ",
              "createdAt": "2022-05-24T15:40:10Z",
              "updatedAt": "2022-05-24T15:40:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8460ZDN",
          "commit": {
            "abbreviatedOid": "66d6374"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-26T21:25:00Z",
          "updatedAt": "2022-05-26T21:25:00Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Don't we have to mention / define a method like this in the context of the document?",
              "createdAt": "2022-05-26T21:25:00Z",
              "updatedAt": "2022-05-26T21:25:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8460ZUw",
          "commit": {
            "abbreviatedOid": "66d6374"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-26T21:26:26Z",
          "updatedAt": "2022-05-26T21:26:26Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Should I put this in `terminology`?",
              "createdAt": "2022-05-26T21:26:26Z",
              "updatedAt": "2022-05-26T21:26:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8460ZVo",
          "commit": {
            "abbreviatedOid": "66d6374"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-26T21:26:30Z",
          "updatedAt": "2022-05-26T21:26:31Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Yeah, we can put it in the beginning of the helper section. I just don't think it makes much sense as a member function for the group.",
              "createdAt": "2022-05-26T21:26:31Z",
              "updatedAt": "2022-05-26T21:26:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8460aFX",
          "commit": {
            "abbreviatedOid": "66d6374"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-26T21:30:23Z",
          "updatedAt": "2022-05-26T21:30:23Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Yup definitely",
              "createdAt": "2022-05-26T21:30:23Z",
              "updatedAt": "2022-05-26T21:30:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8460bCS",
          "commit": {
            "abbreviatedOid": "66d6374"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-26T21:35:29Z",
          "updatedAt": "2022-05-26T21:35:29Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "OH. We were going to vary this by ciphersuite to match the byte size of the scalars. Is 32 bytes fine 'for everyone', in the failure case?",
              "createdAt": "2022-05-26T21:35:29Z",
              "updatedAt": "2022-05-26T21:35:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8462lAX",
          "commit": {
            "abbreviatedOid": "60c4f0a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83c\udf89 ",
          "createdAt": "2022-05-27T11:28:22Z",
          "updatedAt": "2022-05-27T11:28:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 183,
      "id": "PR_kwDOEpUZs844OVKa",
      "title": "Add more reasoning why the coordinator MUST abort",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/183",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #180\r\n",
      "createdAt": "2022-05-20T23:07:26Z",
      "updatedAt": "2022-05-21T00:36:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ac27238a056c88e0774a2c32a4f29846164d17b1",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "coord-abort",
      "headRefOid": "9611ae8411c7c80948467d6c7e43351784827d86",
      "closedAt": "2022-05-21T00:36:34Z",
      "mergedAt": "2022-05-21T00:36:34Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d920e8f585a1eee37c68d6947e384e9dc6c97f1f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846dRQ2",
          "commit": {
            "abbreviatedOid": "9611ae8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-21T00:36:30Z",
          "updatedAt": "2022-05-21T00:36:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 184,
      "id": "PR_kwDOEpUZs844O2MM",
      "title": "Cite TLS notation source",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/184",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #157.",
      "createdAt": "2022-05-21T11:41:09Z",
      "updatedAt": "2022-05-21T22:09:42Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d920e8f585a1eee37c68d6947e384e9dc6c97f1f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/cite-tls-notation",
      "headRefOid": "b266c25fe6123d44c34827162e32eae1f047b50f",
      "closedAt": "2022-05-21T22:06:10Z",
      "mergedAt": "2022-05-21T22:06:10Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5bd30592ad717c257528ce3db58eadb265f7a63f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846dlQN",
          "commit": {
            "abbreviatedOid": "b266c25"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T14:37:37Z",
          "updatedAt": "2022-05-21T14:37:37Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Should this like to  {{?TLS=RFC8446}} instead? ",
              "createdAt": "2022-05-21T14:37:37Z",
              "updatedAt": "2022-05-21T14:37:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dsIu",
          "commit": {
            "abbreviatedOid": "b266c25"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T16:51:12Z",
          "updatedAt": "2022-05-21T16:51:13Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Not necessary since we already did that once before.",
              "createdAt": "2022-05-21T16:51:13Z",
              "updatedAt": "2022-05-21T16:51:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dww1",
          "commit": {
            "abbreviatedOid": "b266c25"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-21T22:02:20Z",
          "updatedAt": "2022-05-21T22:02:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs846dwyX",
          "commit": {
            "abbreviatedOid": "b266c25"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:04:05Z",
          "updatedAt": "2022-05-21T22:04:05Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "That is done lower in the document, does the link matching work with one definition anywhere?",
              "createdAt": "2022-05-21T22:04:05Z",
              "updatedAt": "2022-05-21T22:04:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dwzx",
          "commit": {
            "abbreviatedOid": "b266c25"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:06:03Z",
          "updatedAt": "2022-05-21T22:06:03Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Yeah, otherwise the document wouldn't build correctly.",
              "createdAt": "2022-05-21T22:06:03Z",
              "updatedAt": "2022-05-21T22:06:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 186,
      "id": "PR_kwDOEpUZs844U10p",
      "title": "Don't rely on overloaded/set variable in list comprehension -> string",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/186",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-23T23:08:38Z",
      "updatedAt": "2022-05-23T23:15:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "5bd30592ad717c257528ce3db58eadb265f7a63f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "fix-participant-serialization",
      "headRefOid": "2ab81452d2f8785cc295d2959bf6c625cde68bb0",
      "closedAt": "2022-05-23T23:14:01Z",
      "mergedAt": "2022-05-23T23:14:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c45b1fc31e3958d9eaa65393664492ad277eb48f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846jrlw",
          "commit": {
            "abbreviatedOid": "2ab8145"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-23T23:13:50Z",
          "updatedAt": "2022-05-23T23:13:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 187,
      "id": "PR_kwDOEpUZs844X6Mk",
      "title": "Use non-contiguous signers for the test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/187",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #152.\r\nCloses #151.\r\nCloses #108.",
      "createdAt": "2022-05-24T15:33:08Z",
      "updatedAt": "2022-05-26T17:20:18Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c45b1fc31e3958d9eaa65393664492ad277eb48f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/use-non-contiguous-signers",
      "headRefOid": "2df67b6fef9dc9b833c1e61e7085e3a6bcb824b0",
      "closedAt": "2022-05-26T17:20:14Z",
      "mergedAt": "2022-05-26T17:20:13Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "748f495741f2e3e9dbffa8e50ad5e995d38d2206"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846vD9F",
          "commit": {
            "abbreviatedOid": "2df67b6"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-25T20:11:10Z",
          "updatedAt": "2022-05-25T20:11:10Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "Hm. This should be NUM_SIGNERS, no? I.e, if THRESHOLD_LIMIT=t, NUM_SIGNERS=n, then MAX_SIGNERS is at least t but at most n? ",
              "createdAt": "2022-05-25T20:11:10Z",
              "updatedAt": "2022-05-25T20:11:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846vIRy",
          "commit": {
            "abbreviatedOid": "2df67b6"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-25T20:28:34Z",
          "updatedAt": "2022-05-25T20:28:36Z",
          "comments": [
            {
              "originalPosition": 341,
              "body": "NUM_SIGNERS, no? ",
              "createdAt": "2022-05-25T20:28:34Z",
              "updatedAt": "2022-05-25T20:28:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846vM1M",
          "commit": {
            "abbreviatedOid": "2df67b6"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great! Thanks @chris-wood ",
          "createdAt": "2022-05-25T20:47:13Z",
          "updatedAt": "2022-05-25T20:47:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs846xgyD",
          "commit": {
            "abbreviatedOid": "2df67b6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-26T11:03:27Z",
          "updatedAt": "2022-05-26T11:03:27Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "Discussed offline, but MAX_SIGNERS=n and NUM_SIGNERS is the number of signers between THRESHOLD_LIMIT=t and n. ",
              "createdAt": "2022-05-26T11:03:27Z",
              "updatedAt": "2022-05-26T11:03:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 192,
      "id": "PR_kwDOEpUZs844k-7c",
      "title": "THRESHOLD_LIMIT to MIN_SIGNERS",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/192",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #189.",
      "createdAt": "2022-05-27T11:34:14Z",
      "updatedAt": "2022-05-27T13:54:10Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "9863d3d394a524a0ddd47f0de196c4739594c3c9",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/min-signers",
      "headRefOid": "5247679640de114d6070ab49aea5f614b56501dc",
      "closedAt": "2022-05-27T13:54:10Z",
      "mergedAt": "2022-05-27T13:54:10Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "12ea129f4c168febafa878090299e0195bb80242"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8463LMj",
          "commit": {
            "abbreviatedOid": "5247679"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me, no need to stick with academic terms if we can have more intuitive terminology.",
          "createdAt": "2022-05-27T13:51:16Z",
          "updatedAt": "2022-05-27T13:51:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 193,
      "id": "PR_kwDOEpUZs844lFbp",
      "title": "Remove cofactor stuff, and apply more editorial changes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/193",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #191.\r\nCloses #190.\r\nCloses #160.\r\n",
      "createdAt": "2022-05-27T12:10:08Z",
      "updatedAt": "2022-05-27T16:02:26Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "12ea129f4c168febafa878090299e0195bb80242",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/more-iang-edits",
      "headRefOid": "03e2f749fc28a68d178a3a13fbc504abe33fba45",
      "closedAt": "2022-05-27T16:02:21Z",
      "mergedAt": "2022-05-27T16:02:20Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "69bf963d696e0648e447cdaec86963ec61ef9b09"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8463MFk",
          "commit": {
            "abbreviatedOid": "51a850c"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T13:54:05Z",
          "updatedAt": "2022-05-27T13:54:05Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "Hm- what is the role of the coordinator then, if we don't say which elements are sent by them?",
              "createdAt": "2022-05-27T13:54:05Z",
              "updatedAt": "2022-05-27T13:54:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8463NFM",
          "commit": {
            "abbreviatedOid": "51a850c"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good, we'll have some merge issues with #198  but I'll fix them up.",
          "createdAt": "2022-05-27T13:57:12Z",
          "updatedAt": "2022-05-27T13:57:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs8463Nji",
          "commit": {
            "abbreviatedOid": "51a850c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T13:58:21Z",
          "updatedAt": "2022-05-27T13:58:21Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "We just don't need to say it here. We do say that the coordinator sends these messages elsewhere.",
              "createdAt": "2022-05-27T13:58:21Z",
              "updatedAt": "2022-05-27T13:58:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 198,
      "id": "PR_kwDOEpUZs844lZ09",
      "title": "Various editorial improvements",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/198",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-27T13:46:17Z",
      "updatedAt": "2022-05-27T16:30:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "9863d3d394a524a0ddd47f0de196c4739594c3c9",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "editorial",
      "headRefOid": "d19b945e97077cc2d0c0b536d608d4cf2f76dd7f",
      "closedAt": "2022-05-27T16:30:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing due to merge conflicts, will re-open a fresh PR",
          "createdAt": "2022-05-27T16:30:17Z",
          "updatedAt": "2022-05-27T16:30:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8463MUq",
          "commit": {
            "abbreviatedOid": "ae19d41"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T13:54:49Z",
          "updatedAt": "2022-05-27T13:54:50Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nprotocol. The Coordinator is an entity with the following responsibilities:\r\n```",
              "createdAt": "2022-05-27T13:54:49Z",
              "updatedAt": "2022-05-27T13:54:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8463MeI",
          "commit": {
            "abbreviatedOid": "ae19d41"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T13:55:17Z",
          "updatedAt": "2022-05-27T13:55:17Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "This is done in my PR -- please review that first.",
              "createdAt": "2022-05-27T13:55:17Z",
              "updatedAt": "2022-05-27T13:55:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8463Moz",
          "commit": {
            "abbreviatedOid": "ae19d41"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T13:55:50Z",
          "updatedAt": "2022-05-27T13:55:50Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "This is addressed in my PR -- please review that first.",
              "createdAt": "2022-05-27T13:55:50Z",
              "updatedAt": "2022-05-27T13:55:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8463Mr-",
          "commit": {
            "abbreviatedOid": "ae19d41"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T13:55:59Z",
          "updatedAt": "2022-05-27T13:55:59Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "This was also addressed.",
              "createdAt": "2022-05-27T13:55:59Z",
              "updatedAt": "2022-05-27T13:55:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 199,
      "id": "PR_kwDOEpUZs844mARE",
      "title": "Editorial changes v2",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/199",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-27T16:40:22Z",
      "updatedAt": "2022-05-28T14:11:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "69bf963d696e0648e447cdaec86963ec61ef9b09",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "editorial-v2",
      "headRefOid": "9914deaaa019adf6a3cf88b303e22d680ee0c009",
      "closedAt": "2022-05-28T14:10:49Z",
      "mergedAt": "2022-05-28T14:10:48Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "2b919c80799fcd95129061250d1d61862315f881"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8466pTG",
          "commit": {
            "abbreviatedOid": "67c4c6c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-28T09:45:46Z",
          "updatedAt": "2022-05-28T09:46:05Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "```suggestion\r\n    r = comm_share + ((challenge * lambda_i) * PK_i)\r\n```\r\nI think this is perhaps more clear because (challenge * lambda_i) is a scalar. Maybe instead we should introduce a function explicitly for scalar multiplication, and then use it like so?\r\n\r\n```\r\nr = comm_share + G.ScalarMult(challenge * lambda_i, PK_i)\r\n```",
              "createdAt": "2022-05-28T09:45:47Z",
              "updatedAt": "2022-05-28T09:46:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84667Vm",
          "commit": {
            "abbreviatedOid": "67c4c6c"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-28T14:10:41Z",
          "updatedAt": "2022-05-28T14:10:41Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "`G.ScalarMult` would indeed be clearer- I'll open an issue for this as a nice to have, but will cut v5 with this as is. ",
              "createdAt": "2022-05-28T14:10:41Z",
              "updatedAt": "2022-05-28T14:10:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 200,
      "id": "PR_kwDOEpUZs844m6sO",
      "title": "Add v5 changelog",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/200",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is missing #199 and the PR to close #188, will update with those once we close them.",
      "createdAt": "2022-05-27T20:32:36Z",
      "updatedAt": "2022-05-31T18:09:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "69bf963d696e0648e447cdaec86963ec61ef9b09",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "changelog-v5",
      "headRefOid": "66be9894aac457075165af2b7f235426ce2948bb",
      "closedAt": "2022-05-31T18:09:48Z",
      "mergedAt": "2022-05-31T18:09:48Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "f1829a4f5ebf2c068f60120cc150bd8dc755a849"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8466pWV",
          "commit": {
            "abbreviatedOid": "897ee4c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-28T09:46:25Z",
          "updatedAt": "2022-05-28T09:46:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 202,
      "id": "PR_kwDOEpUZs844sXTz",
      "title": "Add versions to context string",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/202",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #188",
      "createdAt": "2022-05-30T16:06:54Z",
      "updatedAt": "2022-05-30T22:22:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2b919c80799fcd95129061250d1d61862315f881",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "version-string",
      "headRefOid": "e85ddddf56ad05ceb7c495ff510cc69a5dc520f5",
      "closedAt": "2022-05-30T22:22:04Z",
      "mergedAt": "2022-05-30T22:22:04Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "b0cd17a9c9f9e5abe447964f86a20503af0b7e62"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846-5Px",
          "commit": {
            "abbreviatedOid": "e85dddd"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-30T16:53:39Z",
          "updatedAt": "2022-05-30T16:53:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 203,
      "id": "PR_kwDOEpUZs844tLPJ",
      "title": "Update test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/203",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "To match changes made in #202 ",
      "createdAt": "2022-05-30T22:47:50Z",
      "updatedAt": "2022-05-31T17:45:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b0cd17a9c9f9e5abe447964f86a20503af0b7e62",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "update-test-vectors",
      "headRefOid": "9dc75d32dff97db1954dd0fc9d654877741a9bd7",
      "closedAt": "2022-05-31T17:45:03Z",
      "mergedAt": "2022-05-31T17:45:03Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "b9a06f49c713515609fbefbf1ef4ef956fa4f893"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "These don't look like they match in multiple places, such as the group binding factor input and group binding factor, across the ciphersuites:\r\n\r\n<img width=\"1644\" alt=\"image\" src=\"https://user-images.githubusercontent.com/552961/171156325-6c54c3e8-9ec7-4235-9744-1d8700d5ea56.png\">\r\n",
          "createdAt": "2022-05-31T10:46:06Z",
          "updatedAt": "2022-05-31T10:46:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs847D3q7",
          "commit": {
            "abbreviatedOid": "9dc75d3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good!",
          "createdAt": "2022-05-31T17:44:36Z",
          "updatedAt": "2022-05-31T17:44:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 205,
      "id": "PR_kwDOEpUZs845Dtd_",
      "title": "Update Ed25519's hash functions to reduce the full digest when deriving a scalar",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/205",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In response to https://github.com/cfrg/draft-irtf-cfrg-frost/issues/204, which goes over the reasons why, notably RFC8032 compatibility. The reference code does not need updating as it already used the full digest, producing vectors also using it, making this not just further match specs yet also resolve a conflict within this work.",
      "createdAt": "2022-06-03T09:46:57Z",
      "updatedAt": "2022-06-14T12:45:31Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "6590e8e30455bfa485733d77bcdd0166825bc4d7",
      "headRepository": null,
      "headRefName": "ed25519-rfc8032-reduction",
      "headRefOid": "59a608b126deb1ba24f5761341f878ee508ccaeb",
      "closedAt": "2022-06-14T10:03:59Z",
      "mergedAt": "2022-06-14T10:03:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3b7c832265a1b921d87d5ca466f7e6d0c15626db"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8474q__",
          "commit": {
            "abbreviatedOid": "59a608b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Nice catch!",
          "createdAt": "2022-06-13T17:45:06Z",
          "updatedAt": "2022-06-13T17:45:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 206,
      "id": "PR_kwDOEpUZs845Ympe",
      "title": "Bump actions/setup-python from 3.1.2 to 4.0.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/206",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 3.1.2 to 4.0.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>v4.0.0</h2>\n<h3>What's Changed</h3>\n<ul>\n<li>Support for <code>python-version-file</code> input: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/336\">#336</a></li>\n</ul>\n<p>Example of usage:</p>\n<pre lang=\"yaml\"><code>- uses: actions/setup-python@v4\n  with:\n    python-version-file: '.python-version' # Read python version from a file\n- run: python my_script.py\n</code></pre>\n<p>There is no default python version for this <code>setup-python</code> major version, the action requires to specify either <code>python-version</code> input or <code>python-version-file</code> input. If the <code>python-version</code> input is not specified the action will try to read required version from file from <code>python-version-file</code> input.</p>\n<ul>\n<li>Use pypyX.Y for PyPy <code>python-version</code> input: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/349\">#349</a></li>\n</ul>\n<p>Example of usage:</p>\n<pre lang=\"yaml\"><code>- uses: actions/setup-python@v4\n  with:\n    python-version: 'pypy3.9' # pypy-X.Y kept for backward compatibility\n- run: python my_script.py\n</code></pre>\n<ul>\n<li>\n<p><code>RUNNER_TOOL_CACHE</code> environment variable is equal <code>AGENT_TOOLSDIRECTORY</code>: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/338\">#338</a></p>\n</li>\n<li>\n<p>Bugfix: create missing <code>pypyX.Y</code> symlinks: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/347\">#347</a></p>\n</li>\n<li>\n<p><code>PKG_CONFIG_PATH</code> environment variable: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/400\">#400</a></p>\n</li>\n<li>\n<p>Added <code>python-path</code> output: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/405\">#405</a>\n<code>python-path</code> output contains Python executable path.</p>\n</li>\n<li>\n<p>Updated <code>zeit/ncc</code> to <code>vercel/ncc</code> package: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/393\">#393</a></p>\n</li>\n<li>\n<p>Bugfix: fixed output for prerelease version of poetry: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/409\">#409</a></p>\n</li>\n<li>\n<p>Made <code>pythonLocation</code> environment variable consistent for Python and PyPy: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/418\">#418</a></p>\n</li>\n<li>\n<p>Bugfix for <code>3.x-dev</code> syntax: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/417\">#417</a></p>\n</li>\n<li>\n<p>Other improvements: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/318\">#318</a> <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/396\">#396</a> <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/384\">#384</a> <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/387\">#387</a> <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/388\">#388</a></p>\n</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/d09bd5e6005b175076f227b13d9730d56e9dcfcb\"><code>d09bd5e</code></a> fix: 3.x-dev can install a 3.y version (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/417\">#417</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/f72db171abf897c3f4cea0427d5af95fa57fb1bc\"><code>f72db17</code></a> Made env.var pythonLocation consistent for Python and PyPy (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/418\">#418</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/53e15292cd6a522cb460037b6f031eadbd6f6920\"><code>53e1529</code></a> add support for python-version-file (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/336\">#336</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/3f82819745be54edd3bd8a83639605e58826bfe9\"><code>3f82819</code></a> Fix output for prerelease version of poetry (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/409\">#409</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/397252c5825684a4ffed92b79e0d840c618c0a93\"><code>397252c</code></a> Update zeit/ncc to vercel/ncc (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/393\">#393</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/de977ad1321ff211fd43f0f232a4d8851726d4bb\"><code>de977ad</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/412\">#412</a> from vsafonkin/v-vsafonkin/fix-poetry-cache-test</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/22c6af91ce03997c5925db1f6e9f0b9b2364adcc\"><code>22c6af9</code></a> Change PyPy version to rebuild cache</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/081a3cf1a51ab5fff2ae9d70f0cfacf0686293ea\"><code>081a3cf</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/405\">#405</a> from mayeut/interpreter-path</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/ff706563d754e642609a7008f4568a5386f3e94c\"><code>ff70656</code></a> feature: add a <code>python-path</code> output</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/fff15a21cc8b16191cb1249f621fa3a55b9005b8\"><code>fff15a2</code></a> Use pypyX.Y for PyPy python-version input (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/349\">#349</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v3.1.2...v4.0.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=3.1.2&new-version=4.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-06-09T11:27:16Z",
      "updatedAt": "2022-06-20T17:05:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "6590e8e30455bfa485733d77bcdd0166825bc4d7",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.0.0",
      "headRefOid": "3a24fae8d5b7e844bfd7f8862bbf19318f68d886",
      "closedAt": "2022-06-20T17:05:02Z",
      "mergedAt": "2022-06-20T17:05:02Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "156c203c2fa97e97e8846c15d4e919c9612351fb"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 207,
      "id": "PR_kwDOEpUZs84551xu",
      "title": "Add Modular FROST as an implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/207",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Instead of listing as `FROST(Ed25519, SHA-512, FROST(ristretto255, SHA-512), FROST(P-256, SHA-256)`, I listed as `All except FROST(Ed448, SHAKE256)` to be succinct. It should be noted this is a modular library, being usable for a variety of Schnorr-like constructions, with non-standard functionality offered directly in it already (key offsetting for HDKD/privacy schemes), yet a Schnorr algorithm and IETF HRAMs are provided.\r\n\r\nThis does pass the v5 vectors, as proven with these files:\r\nhttps://github.com/serai-dex/serai/blob/develop/crypto/frost/src/tests/literal/kp256.rs\r\nhttps://github.com/serai-dex/serai/blob/develop/crypto/frost/src/tests/literal/dalek.rs\r\n\r\nThough as my other issue noted, this isn't technically a v5 implementation, due to a discrepancy which will be resolved in v6. I believe it is an implementation of the current develop branch however.",
      "createdAt": "2022-06-19T11:26:39Z",
      "updatedAt": "2022-06-23T17:02:04Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3b7c832265a1b921d87d5ca466f7e6d0c15626db",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "patch-1",
      "headRefOid": "67c93ff3407c743c8bcd7271c17aecf41fa2a860",
      "closedAt": "2022-06-20T14:33:54Z",
      "mergedAt": "2022-06-20T14:33:54Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f49bb37632ca8d85cf97e92eb087d417366b01d0"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "This is great to see, thank you! :) ",
          "createdAt": "2022-06-23T17:02:04Z",
          "updatedAt": "2022-06-23T17:02:04Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs848V98M",
          "commit": {
            "abbreviatedOid": "67c93ff"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-20T14:33:50Z",
          "updatedAt": "2022-06-20T14:33:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 208,
      "id": "PR_kwDOEpUZs8458vhb",
      "title": "Address Ian's followup review",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/208",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-20T13:20:21Z",
      "updatedAt": "2022-06-21T19:30:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3b7c832265a1b921d87d5ca466f7e6d0c15626db",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/iang-review",
      "headRefOid": "858e248ebacb94e9053ec6326935365ff409699e",
      "closedAt": "2022-06-21T16:55:46Z",
      "mergedAt": "2022-06-21T16:55:46Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "57d79975aee540e18558e7be61537086c5b174bb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs848XjMB",
          "commit": {
            "abbreviatedOid": "7bfe5d9"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great, thanks for taking this on. ",
          "createdAt": "2022-06-20T23:13:14Z",
          "updatedAt": "2022-06-20T23:13:34Z",
          "comments": [
            {
              "originalPosition": 236,
              "body": "Should there be an s after `Element` here?",
              "createdAt": "2022-06-20T23:13:14Z",
              "updatedAt": "2022-06-20T23:13:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848Zd8U",
          "commit": {
            "abbreviatedOid": "7bfe5d9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T09:54:24Z",
          "updatedAt": "2022-06-21T09:54:24Z",
          "comments": [
            {
              "originalPosition": 236,
              "body": "It's meant to be plural (this isn't a new change). ",
              "createdAt": "2022-06-21T09:54:24Z",
              "updatedAt": "2022-06-21T09:54:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848Zd_L",
          "commit": {
            "abbreviatedOid": "7bfe5d9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T09:54:32Z",
          "updatedAt": "2022-06-21T09:54:32Z",
          "comments": [
            {
              "originalPosition": 236,
              "body": "```suggestion\r\n  from the group's key generation protocol, `Element` values in `G`.\r\n```",
              "createdAt": "2022-06-21T09:54:32Z",
              "updatedAt": "2022-06-21T09:54:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848bsRi",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:18:40Z",
          "updatedAt": "2022-06-21T16:18:41Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "\ud83d\udc4d ",
              "createdAt": "2022-06-21T16:18:40Z",
              "updatedAt": "2022-06-21T16:18:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848bsY-",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:19:02Z",
          "updatedAt": "2022-06-21T16:19:03Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T16:19:02Z",
              "updatedAt": "2022-06-21T16:19:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848bsbG",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:19:08Z",
          "updatedAt": "2022-06-21T16:19:09Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T16:19:08Z",
              "updatedAt": "2022-06-21T16:19:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848bsd1",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:19:15Z",
          "updatedAt": "2022-06-21T16:19:15Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T16:19:15Z",
              "updatedAt": "2022-06-21T16:19:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848bstd",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:19:59Z",
          "updatedAt": "2022-06-21T16:20:00Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T16:20:00Z",
              "updatedAt": "2022-06-21T16:20:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848b0Wi",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:42:04Z",
          "updatedAt": "2022-06-21T16:42:04Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "Not sure if we want to change this (if there is a note from iang on this I probably missed it) especially if we want to add a note about cofactor curves - doing the check for such curves involves multiplying `G.cofactor * ( l - r ) == G.Identity()`, so rearranging the check like this is fine and nice without any cofactor but showing where to insert the cofactor check is 'easier' in the text if it remains un-rearranged IMO",
              "createdAt": "2022-06-21T16:42:04Z",
              "updatedAt": "2022-06-21T16:42:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848b182",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:47:09Z",
          "updatedAt": "2022-06-21T16:47:09Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "Uh, doesn't this mean the final value gets an extra x multiplication, when it shouldn't? // @chelseakomlo ",
              "createdAt": "2022-06-21T16:47:09Z",
              "updatedAt": "2022-06-21T16:48:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848b3io",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:52:17Z",
          "updatedAt": "2022-06-21T16:52:18Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T16:52:17Z",
              "updatedAt": "2022-06-21T16:52:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848b3k6",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:52:26Z",
          "updatedAt": "2022-06-21T16:52:26Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T16:52:26Z",
              "updatedAt": "2022-06-21T16:52:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848b4a-",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:54:59Z",
          "updatedAt": "2022-06-21T16:54:59Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "I don't think we want to include a cofactor check in these routines since, as per the latest variant, all subgroup checks happen on _inputs_.",
              "createdAt": "2022-06-21T16:54:59Z",
              "updatedAt": "2022-06-21T16:54:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848b4p4",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:55:43Z",
          "updatedAt": "2022-06-21T16:55:43Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "Note that the POC was updated to match and it checks out \ud83d\udc4d ",
              "createdAt": "2022-06-21T16:55:43Z",
              "updatedAt": "2022-06-21T16:55:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848cjzj",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T19:14:29Z",
          "updatedAt": "2022-06-21T19:14:30Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T19:14:30Z",
              "updatedAt": "2022-06-21T19:14:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848cob8",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T19:30:49Z",
          "updatedAt": "2022-06-21T19:30:49Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "See above // @chelseakomlo \r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/pull/208/files#r902847262",
              "createdAt": "2022-06-21T19:30:49Z",
              "updatedAt": "2022-06-21T19:30:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 209,
      "id": "PR_kwDOEpUZs846w6lK",
      "title": "Address (some) of ian's review comments",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/209",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-04T02:09:21Z",
      "updatedAt": "2022-07-05T15:49:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "57d79975aee540e18558e7be61537086c5b174bb",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "ian-review",
      "headRefOid": "65e7fab00720da50b8598a5140ee8c1b17a7f3d5",
      "closedAt": "2022-07-05T15:49:37Z",
      "mergedAt": "2022-07-05T15:49:37Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "7c22cf9532dd756e6fc0b45e29b2f18bf1af75c3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849TfcZ",
          "commit": {
            "abbreviatedOid": "c1ef1ab"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-05T12:05:22Z",
          "updatedAt": "2022-07-05T12:06:09Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "```suggestion\r\ncorresponding commitment after this round completes, and MUST use the nonce to generate at most one\r\nsignature share.\r\n```",
              "createdAt": "2022-07-05T12:05:22Z",
              "updatedAt": "2022-07-05T12:06:09Z"
            },
            {
              "originalPosition": 63,
              "body": "```suggestion\r\n    identity element and is in the prime-order subgroup.\r\n[[TODO: describe how this check is done.]]\r\n```",
              "createdAt": "2022-07-05T12:05:52Z",
              "updatedAt": "2022-07-05T12:06:09Z"
            },
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-07-05T12:06:07Z",
              "updatedAt": "2022-07-05T12:06:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 210,
      "id": "PR_kwDOEpUZs846255Q",
      "title": "Note that RandomScalar should use rejection sampling",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/210",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Since DeserializeScalar is fallible, just retry if it fails.",
      "createdAt": "2022-07-05T13:57:03Z",
      "updatedAt": "2022-07-05T14:10:37Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "57d79975aee540e18558e7be61537086c5b174bb",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/random-scalar-rejection-sampling",
      "headRefOid": "71df37ab7b25f9316b33213e93ece929b050f383",
      "closedAt": "2022-07-05T14:10:37Z",
      "mergedAt": "2022-07-05T14:10:37Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b10fdfff4f3e3a5efeeac2ab8a4a4c5c0979f328"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849ULG-",
          "commit": {
            "abbreviatedOid": "71df37a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-05T14:05:58Z",
          "updatedAt": "2022-07-05T14:05:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs849ULV1",
          "commit": {
            "abbreviatedOid": "71df37a"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-05T14:06:33Z",
          "updatedAt": "2022-07-05T14:06:33Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "That particular wording can be a bit inefficient in some cases, e.g. here in ristretto255 approximately 7 out of 8 tries will fail because it's looking for a 253-bit scalar in a 256-bit buffer. We'd need to clear the upper bits. But it's becoming more and more awkward \ud83d\ude05 Maybe this warrants a new helper function?",
              "createdAt": "2022-07-05T14:06:33Z",
              "updatedAt": "2022-07-05T14:06:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849UM6w",
          "commit": {
            "abbreviatedOid": "71df37a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-05T14:10:30Z",
          "updatedAt": "2022-07-05T14:10:30Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I don't think that's necessary, but I'm happy to look at PRs.",
              "createdAt": "2022-07-05T14:10:30Z",
              "updatedAt": "2022-07-05T14:10:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 211,
      "id": "PR_kwDOEpUZs8464Cbs",
      "title": "Add lazy (expensive) prime-order subgroup check",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/211",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-05T19:24:40Z",
      "updatedAt": "2022-07-06T22:35:03Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "0856ecaae73c6b45abe36ba1fd956071155841b5",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/subgroup-check-lazy",
      "headRefOid": "20201611f3492322baabdb7fd75b7102d61b1593",
      "closedAt": "2022-07-06T22:34:59Z",
      "mergedAt": "2022-07-06T22:34:59Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "28cc950f64284fd17460b00ce6e121f3da6e1218"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849bVaQ",
          "commit": {
            "abbreviatedOid": "2020161"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks good to me.",
          "createdAt": "2022-07-06T19:08:31Z",
          "updatedAt": "2022-07-06T19:08:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs849cIJI",
          "commit": {
            "abbreviatedOid": "2020161"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Good enough for now \ud83d\udc4d",
          "createdAt": "2022-07-06T22:34:56Z",
          "updatedAt": "2022-07-06T22:34:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 212,
      "id": "PR_kwDOEpUZs846-W3j",
      "title": "Add the `frost-p256` implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/212",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-06T21:47:33Z",
      "updatedAt": "2022-07-06T22:30:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "0856ecaae73c6b45abe36ba1fd956071155841b5",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-2",
      "headRefOid": "dc0e8838216c80ae6c08b21c85515e3a3d9bdbdf",
      "closedAt": "2022-07-06T22:30:54Z",
      "mergedAt": "2022-07-06T22:30:53Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "d70f7cb6ee2985a86acb0e748dec1db6739cf91e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 215,
      "id": "PR_kwDOEpUZs847KvM1",
      "title": "Correct torsion check definition",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/215",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "```rs\r\n#[test]\r\nfn torsion() {\r\n  use curve25519_dalek::{\r\n    traits::IsIdentity,\r\n    constants::{ED25519_BASEPOINT_TABLE, EIGHT_TORSION},\r\n    scalar::Scalar\r\n  };\r\n  let point = (&Scalar::from(5u8) * &ED25519_BASEPOINT_TABLE) + EIGHT_TORSION[7];\r\n  assert!(!point.mul_by_cofactor().is_identity());\r\n  assert!(!point.is_torsion_free());\r\n}\r\n```\r\n\r\nhttps://github.com/dalek-cryptography/curve25519-dalek/blob/967d8b6c0e67100401ad66125b7399ccf509ae22/src/edwards.rs#L1184-L1186\r\n\r\nThe existing definition checks it's non-0, even when torsioned. It does not check it is in the prime order subgroup.",
      "createdAt": "2022-07-11T05:14:03Z",
      "updatedAt": "2022-07-11T19:53:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "28cc950f64284fd17460b00ce6e121f3da6e1218",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "patch-2",
      "headRefOid": "827504ef4d1e25f3b1c3ddbfb7886f33b76296c7",
      "closedAt": "2022-07-11T19:16:12Z",
      "mergedAt": "2022-07-11T19:16:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b69518346debb1d0b90bf2fa64f2406376174acb"
      },
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To clarify another aspect, the cofactor multiplication isn't practically considered expensive (at least, to the people I work with :D I'm sure it's something which differs when discussing resource constrained environments). It's 3 point additions. The multiplication by the curve order, which is just over 500 additions in constant time under a per-bit double and add (and ~100 with a small table), would be considered so however. It's also the sole method available to guarantee the lack of torsion on an existing point, unfortunately.\r\n\r\nFrom an implementation perspective, the trick becomes for the signers to publish `element * 8.invert()`, so they do a scalar mul on their elements alone, and all participants multiply by 8 on recipience. This will guarantee the element doesn't have torsion while being a fraction of the cost.\r\n\r\nWhen discussing this, I generated the following data on Ristretto and Ed25519, as I was trying to compare their efficiencies.\r\n\r\n```\r\n13ms R encode\r\n15ms R decode\r\n8ms E encode\r\n12ms E decode\r\n18ms E decode, 8\r\n286ms E decode with inv 8, 8\r\n```\r\n\r\nThe last two E (Ed25519) decodes are with * 8, clearing torsion, and then the last one also performed the inv 8. While the inv 8 is a full scalar mul, and around ~15x more expensive than decode + mul by 8 alone, the above implementation model makes each signer perform the scalar mul on themselves with a complexity of O(1), instead of with the curve order for everyone in O(n). The O(n) becomes the much cheaper mul by cofactor. \r\n\r\nWhile I wasn't planning on noting this to advocate for adoptance of such a pattern into the draft, which I appreciate the directness of, I will say the above numbers don't lie. This may be worth a follow up issue for discussion. Please let me know and I'll create one. Regardless, I'd like this PR to remain the immediate patch for the incorrect text.\r\n\r\nEDIT: I'd note the success of `assert!((point * Scalar::from(8u8).invert()).mul_by_cofactor().is_torsion_free());`, demonstrating the torsion clear (and prime order guarantee) using a fragment of the additions. I'd also note the above were measured in `ms` as it was over 1000 runs, with the data being from dalek under release, without SIMD, running on my personal computer.",
          "createdAt": "2022-07-11T05:33:58Z",
          "updatedAt": "2022-07-11T05:41:17Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The existing definition checks it's non-0, even when torsioned. It does not check it is in the prime order subgroup.\r\n\r\nI don't think this is true. The check currently asks whether or not the point has low order (which may be any order that divides the cofactor). My understanding is that, if it doesn't belong to one of these small groups, then it must belong to the larger prime-order subgroup. The dalek code [tests this sort of thing](https://docs.rs/curve25519-dalek/0.19.0/src/curve25519_dalek/edwards.rs.html#1106). Am I missing or misunderstanding something here?",
          "createdAt": "2022-07-11T11:59:44Z",
          "updatedAt": "2022-07-11T12:08:07Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I used the term \"order\", without providing a definition, because it was defined as a variable above the definition I edited. https://github.com/cfrg/draft-irtf-cfrg-frost/blob/28cc950f64284fd17460b00ce6e121f3da6e1218/draft-irtf-cfrg-frost.md?plain=1#L889-L898 I'm happy to provide a constant for it in parentheses or use a better term, if you can provide one.\r\n\r\nThe small order function has horribly written documentation for a more practical perspective. It doesn't check the point is in the prime order subgroup, which is what `is_torsion_free` does with this exact mechanism. It checks it's not explicitly one of the torsion subgroup points, as the linked test demonstrates. The torsion subgroup points have an order of 8, so multiplying a point by 8 and receiving identity means it was a torsion subgroup point. That said, as my code shows, it's possible to torsion a point with a large order component. Accordingly, it will have torsion, yet won't identify as small order because despite having a torsion component with a small order, it has a regular component with a large order. This is why it's a torsion clear, not a torsion check.\r\n\r\nWhile a torsion clear is valid and performant, as I quoted numbers on, its result is not carried as it would have to be. I'd also note that identity must be checked for *after* the torsion clear, since the cofactor multiplication will have non-identity points produce identity after it (as shown by `is_small_order`), due to their incredibly low order.",
          "createdAt": "2022-07-11T15:36:19Z",
          "updatedAt": "2022-07-11T15:36:49Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry, I'm a bit confused. The torsion terminology is unhelpful here so I'm not going to use it. Having said that, here's how I understand the situation:\r\n\r\n1. The function `is_torsion_free` just checks that the order of the point matches that of the prime-order subgroup. \r\n2. The low-order check (as is described currently) rejects everything that has an order of 2, 4, or 8. \r\n3. If a point on the curve is not in a low-order group, it must be in the larger prime-order group.\r\n\r\nWhich of these are you saying is incorrect?",
          "createdAt": "2022-07-11T15:47:51Z",
          "updatedAt": "2022-07-11T15:47:51Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\\# 3. A point can have a component in the prime-order group AND another component in the small-order group. The latter is sufficient to make it non-prime order, yet due to the presence of the former, it won't be detected as small order. That's what my above snippet of code demonstrated.",
          "createdAt": "2022-07-11T16:08:38Z",
          "updatedAt": "2022-07-11T16:09:36Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> A point can have a component in the prime-order group AND in the small-order group. The latter is sufficient to make it non-prime order, yet due to the presence of the former, it won't be detected as small order.\r\n\r\nWhat is the order of such points?",
          "createdAt": "2022-07-11T16:09:34Z",
          "updatedAt": "2022-07-11T16:09:45Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "... both? I guess? They're not in the prime-order subgroup, yet they aren't small order. The issue becomes, when discussing torsion and the classic Cryptonote key image vulnerability, is the small order component will clear itself out most of the time. Accordingly, you end up with just the prime-order component, yet it's one that has multiple references which can have varying effects.\r\n\r\nIf there's a requirement on being prime-order, or not needing to do a full security review on the effects of non-prime-order components is desired, my sole resolving comment is we need either the prime-order subgroup presence check (distinct from the small order check) OR to ensure it's present in the prime-order subgroup by clearing any small-order components. While I'm happy to discuss the latter, as it's vastly more performant, I'd personally prefer this gets merged and then we open a discussion issue for the latter, if it's desired (though I'm obviously not the person with experience on how to manage topics for FROST here, and will defer to you ;) ).",
          "createdAt": "2022-07-11T16:14:13Z",
          "updatedAt": "2022-07-11T16:14:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849o_4H",
          "commit": {
            "abbreviatedOid": "f6f4dbd"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I don't find this to be a useful clarification since the order could be misinterpreted to be the size of the desired subgroup, whereas the cofactor has a clear and unambiguous definition. ",
          "createdAt": "2022-07-11T10:58:57Z",
          "updatedAt": "2022-07-11T10:58:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs849rfgy",
          "commit": {
            "abbreviatedOid": "f6f4dbd"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "OK, let's go with the known-correct thing now and revisit improvements later.",
          "createdAt": "2022-07-11T19:07:51Z",
          "updatedAt": "2022-07-11T19:08:05Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n    be implemented by multiplying the resulting point by the order of the group and\r\n```",
              "createdAt": "2022-07-11T19:07:51Z",
              "updatedAt": "2022-07-11T19:08:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rhxm",
          "commit": {
            "abbreviatedOid": "827504e"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T19:16:51Z",
          "updatedAt": "2022-07-11T19:16:52Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "The order of the prime order subgroup?",
              "createdAt": "2022-07-11T19:16:51Z",
              "updatedAt": "2022-07-11T19:16:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rig8",
          "commit": {
            "abbreviatedOid": "827504e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T19:19:56Z",
          "updatedAt": "2022-07-11T19:19:56Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Yeah, the group is defined to be prime-order.",
              "createdAt": "2022-07-11T19:19:56Z",
              "updatedAt": "2022-07-11T19:19:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rqzj",
          "commit": {
            "abbreviatedOid": "827504e"
          },
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T19:53:43Z",
          "updatedAt": "2022-07-11T19:53:43Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Right. \"Order\" is defined a few properties above this, which I showed in one of my comments.",
              "createdAt": "2022-07-11T19:53:43Z",
              "updatedAt": "2022-07-11T19:53:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 216,
      "id": "PR_kwDOEpUZs847MQSL",
      "title": "Use per-signer values of rho",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/216",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #214.",
      "createdAt": "2022-07-11T12:52:15Z",
      "updatedAt": "2022-07-11T13:33:31Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "28cc950f64284fd17460b00ce6e121f3da6e1218",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/per-signer-rhos",
      "headRefOid": "bc3fe92c6a54b7c1b83853eac72488791057f0e8",
      "closedAt": "2022-07-11T13:33:31Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 217,
      "id": "PR_kwDOEpUZs847MeTx",
      "title": "Use per-signer rhos",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/217",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #214.\r\n\r\nThe previous PR for this was incomplete (in the spec), but this would should be fixed. ",
      "createdAt": "2022-07-11T13:43:36Z",
      "updatedAt": "2022-07-12T20:31:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "28cc950f64284fd17460b00ce6e121f3da6e1218",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/per-signer-rhos",
      "headRefOid": "61e77825f0013f6b38497626e441b6dbe2b60c28",
      "closedAt": "2022-07-11T18:15:53Z",
      "mergedAt": "2022-07-11T18:15:53Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2363989ddb35c0d66b8f9231c68b8ae7e5bad1a9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849rEcR",
          "commit": {
            "abbreviatedOid": "934183d"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me, thanks @chris-wood ",
          "createdAt": "2022-07-11T17:30:56Z",
          "updatedAt": "2022-07-11T17:30:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs849rOrR",
          "commit": {
            "abbreviatedOid": "934183d"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:04:43Z",
          "updatedAt": "2022-07-11T18:04:44Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "```suggestion\r\n  def compute_binding_factors(commitment_list, msg):\r\n```",
              "createdAt": "2022-07-11T18:04:43Z",
              "updatedAt": "2022-07-11T18:04:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rRUz",
          "commit": {
            "abbreviatedOid": "d5e92ad"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:14:56Z",
          "updatedAt": "2022-07-11T18:14:56Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "```suggestion\r\n  - binding_factor_list = [(i, binding_factor_i), ...],\r\n```",
              "createdAt": "2022-07-11T18:14:56Z",
              "updatedAt": "2022-07-11T18:14:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rRgB",
          "commit": {
            "abbreviatedOid": "0c9bf93"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:15:35Z",
          "updatedAt": "2022-07-11T18:15:35Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "```suggestion\r\n  - binding_factor_list = [(i, binding_factor), ...],\r\n```",
              "createdAt": "2022-07-11T18:15:35Z",
              "updatedAt": "2022-07-11T18:15:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 218,
      "id": "PR_kwDOEpUZs847NLlq",
      "title": "Add citation and reason to favor original frost",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/218",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-11T16:26:12Z",
      "updatedAt": "2022-07-11T17:13:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "fe74a3e8a9b7c27ca33512dd2da768b9cfa1666b",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "frost1",
      "headRefOid": "cf83519016225b3dd373836ee07713e4acf050d2",
      "closedAt": "2022-07-11T17:12:58Z",
      "mergedAt": "2022-07-11T17:12:58Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "9a1277006df398430088a91d020d1573ae048553"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good besides a note on the last line\r\n\r\nWe should merge this after the change in #217 is merged",
          "createdAt": "2022-07-11T16:39:30Z",
          "updatedAt": "2022-07-11T16:39:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849q0y-",
          "commit": {
            "abbreviatedOid": "dc96f84"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:38:58Z",
          "updatedAt": "2022-07-11T16:38:58Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "We may want to be careful with this language here, because if they do implement it it will not conform or interoperate with other implementations of this spec @chris-wood ",
              "createdAt": "2022-07-11T16:38:58Z",
              "updatedAt": "2022-07-11T16:39:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q_Hq",
          "commit": {
            "abbreviatedOid": "dc96f84"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T17:12:20Z",
          "updatedAt": "2022-07-11T17:12:21Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nround two. \r\n```\r\n\r\nPer chat with Chelsea",
              "createdAt": "2022-07-11T17:12:21Z",
              "updatedAt": "2022-07-11T17:12:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q_Oh",
          "commit": {
            "abbreviatedOid": "cf83519"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T17:12:43Z",
          "updatedAt": "2022-07-11T17:12:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 219,
      "id": "PR_kwDOEpUZs847NMBm",
      "title": "Add verify() to each ciphersuite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/219",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Remove the Schnorr signature operations sections.\r\n\r\nResolves #213 ",
      "createdAt": "2022-07-11T16:28:02Z",
      "updatedAt": "2022-07-11T18:48:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "fe74a3e8a9b7c27ca33512dd2da768b9cfa1666b",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "per-ciphersuite-singleton-verify",
      "headRefOid": "6df42e60840bd34c721b7f6bfd9a560d02aff459",
      "closedAt": "2022-07-11T18:48:14Z",
      "mergedAt": "2022-07-11T18:48:14Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "9eec94b9544460a61ba366f80748f6ffc949dde1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849qz2Q",
          "commit": {
            "abbreviatedOid": "f459d78"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:35:41Z",
          "updatedAt": "2022-07-11T16:35:42Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "```suggestion\r\nWe include explicit `verify()` functions for each ciphersuite that should also\r\napply to any singleton signature as well as signatures generated by FROST. By definition, this function assumes that all group Elements passed as input,\r\nincluding the signature R component and public key, belong to prime-order group G.\r\n\r\n## FROST(Ed25519, SHA-512)\r\n```",
              "createdAt": "2022-07-11T16:35:41Z",
              "updatedAt": "2022-07-11T16:35:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q0F0",
          "commit": {
            "abbreviatedOid": "07b5512"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:36:32Z",
          "updatedAt": "2022-07-11T16:36:32Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "```suggestion\r\nWe include explicit `verify()` functions for each ciphersuite that should also\r\napply to any singleton signature as well as signatures generated by FROST. By\r\ndefinition, this function assumes that all group Elements passed as input,\r\nincluding the signature R component and public key, belong to prime-order group G.\r\n```",
              "createdAt": "2022-07-11T16:36:32Z",
              "updatedAt": "2022-07-11T16:36:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q3dk",
          "commit": {
            "abbreviatedOid": "b88dcbb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:48:14Z",
          "updatedAt": "2022-07-11T16:48:15Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2022-07-11T16:48:15Z",
              "updatedAt": "2022-07-11T16:48:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q4Mm",
          "commit": {
            "abbreviatedOid": "395fcde"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:50:12Z",
          "updatedAt": "2022-07-11T16:50:13Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "```suggestion\r\n    l = 8 * G.ScalarBaseMult(z)\r\n    r = 8 * (R + (c * PK))\r\n    return l == r\r\n```",
              "createdAt": "2022-07-11T16:50:12Z",
              "updatedAt": "2022-07-11T16:50:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q6Li",
          "commit": {
            "abbreviatedOid": "3c8730a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:54:50Z",
          "updatedAt": "2022-07-11T16:54:51Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "```suggestion\r\n\r\n{{!RFC8032}} instructs to check the group equation \"[8][S]B = [8]R + [8][k]A'\". We recommend this verification check as it maintains consistency with batch verification equations and handles any low-order group elements correctly, which the {{!RFC8032}} \"sufficient, but not required\" check does not.\r\n```",
              "createdAt": "2022-07-11T16:54:51Z",
              "updatedAt": "2022-07-11T16:55:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q659",
          "commit": {
            "abbreviatedOid": "098762a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:57:22Z",
          "updatedAt": "2022-07-11T16:57:23Z",
          "comments": [
            {
              "originalPosition": 193,
              "body": "```suggestion\r\n    l = 4 * G.ScalarBaseMult(z)\r\n    r = 4 * (R + (c * PK))\r\n    return l == r\r\n~~~\r\n\r\n{{!RFC8032}} instructs to check the group equation \"[4][S]B = [4]R + [4][k]A'\". We recommend this verification check as it maintains consistency with batch verification equations and handles any low-order group elements correctly, which the {{!RFC8032}} \"sufficient, but not required\" check does not.\r\n\r\n```",
              "createdAt": "2022-07-11T16:57:22Z",
              "updatedAt": "2022-07-11T16:57:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rE36",
          "commit": {
            "abbreviatedOid": "e494867"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-07-11T17:31:59Z",
          "updatedAt": "2022-07-11T17:33:56Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "I would re-word this since signatures generated by FROST are identical to signatures generated by a single signer.",
              "createdAt": "2022-07-11T17:31:59Z",
              "updatedAt": "2022-07-11T17:33:56Z"
            },
            {
              "originalPosition": 100,
              "body": "It would probably be good to say what the types are here.",
              "createdAt": "2022-07-11T17:33:37Z",
              "updatedAt": "2022-07-11T17:33:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rG6W",
          "commit": {
            "abbreviatedOid": "e494867"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T17:38:51Z",
          "updatedAt": "2022-07-11T17:38:52Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "```suggestion\r\nWe include explicit `verify()` functions for each ciphersuite. Since FROST-generated\r\nsignatures and singleton-generated Schnorr signatures are identical, these functions\r\nverify both. By definition, this function assumes that all group Elements passed as\r\ninput, including the signature R component and public key, belong to prime-order\r\ngroup G.\r\n```",
              "createdAt": "2022-07-11T17:38:51Z",
              "updatedAt": "2022-07-11T17:38:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rG9w",
          "commit": {
            "abbreviatedOid": "e494867"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T17:39:04Z",
          "updatedAt": "2022-07-11T17:39:04Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "@chelseakomlo better?",
              "createdAt": "2022-07-11T17:39:04Z",
              "updatedAt": "2022-07-11T17:39:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rR23",
          "commit": {
            "abbreviatedOid": "e494867"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:17:00Z",
          "updatedAt": "2022-07-11T18:17:00Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Either phrasing works for me.",
              "createdAt": "2022-07-11T18:17:00Z",
              "updatedAt": "2022-07-11T18:17:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rYdt",
          "commit": {
            "abbreviatedOid": "6df42e6"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:41:56Z",
          "updatedAt": "2022-07-11T18:41:56Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "@chelseakomlo ",
              "createdAt": "2022-07-11T18:41:56Z",
              "updatedAt": "2022-07-11T18:41:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rZ3P",
          "commit": {
            "abbreviatedOid": "6df42e6"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:46:38Z",
          "updatedAt": "2022-07-11T18:46:38Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "LGTM! Thanks @dconnolly ",
              "createdAt": "2022-07-11T18:46:38Z",
              "updatedAt": "2022-07-11T18:46:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 220,
      "id": "PR_kwDOEpUZs847NmlV",
      "title": "Consolidate prime-order verification check for relevant ciphersuites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/220",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-11T18:29:19Z",
      "updatedAt": "2022-07-11T18:41:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "per-ciphersuite-singleton-verify",
      "baseRefOid": "e494867277fa4896522483b301b50e956edd2b38",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/consolidate-verify",
      "headRefOid": "5e903f3563c90436f12a01fa1003766b2f1823db",
      "closedAt": "2022-07-11T18:41:34Z",
      "mergedAt": "2022-07-11T18:41:34Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "6df42e60840bd34c721b7f6bfd9a560d02aff459"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849rVyx",
          "commit": {
            "abbreviatedOid": "5e903f3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:31:39Z",
          "updatedAt": "2022-07-11T18:31:39Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I have a suggested rewording on the base PR related to this, yours might be better language // @chelseakomlo \r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/pull/219/files#r918194305\r\n\r\n<img width=\"622\" alt=\"image\" src=\"https://user-images.githubusercontent.com/552961/178333603-b107fe5a-f3a0-453d-90eb-6368c54244d5.png\">\r\n",
              "createdAt": "2022-07-11T18:31:39Z",
              "updatedAt": "2022-07-11T18:31:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rYVz",
          "commit": {
            "abbreviatedOid": "5e903f3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T18:41:28Z",
          "updatedAt": "2022-07-11T18:41:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 222,
      "id": "PR_kwDOEpUZs847OByF",
      "title": "Fix per-rho signers",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/222",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-11T20:37:58Z",
      "updatedAt": "2022-07-12T01:25:37Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "1f79c89cc7417a87cc4eaa05b244fd2d2947e54e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/fix-per-rho-signers",
      "headRefOid": "35e2a6bb9d75a9356a85b5e7b8f7f458f0583ca4",
      "closedAt": "2022-07-11T21:57:53Z",
      "mergedAt": "2022-07-11T21:57:53Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "96248abd675f7ef3c8a495d78e98e6ac02bf12b5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849r3b5",
          "commit": {
            "abbreviatedOid": "d57739e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T20:42:28Z",
          "updatedAt": "2022-07-11T20:42:29Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "This means that each `rho_input` is `H(msg_hash, B, id_i)`.",
              "createdAt": "2022-07-11T20:42:28Z",
              "updatedAt": "2022-07-11T20:42:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849r6Gb",
          "commit": {
            "abbreviatedOid": "d57739e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T20:53:12Z",
          "updatedAt": "2022-07-11T20:53:13Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n    rho_input_prefix = msg_hash || encoded_commitment_list\r\n```",
              "createdAt": "2022-07-11T20:53:12Z",
              "updatedAt": "2022-07-11T20:53:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849r6M9",
          "commit": {
            "abbreviatedOid": "362abb5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T20:53:39Z",
          "updatedAt": "2022-07-11T20:53:39Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "```suggestion\r\n      rho_input = rho_input_prefix || encode_uint16(identifier)\r\n```",
              "createdAt": "2022-07-11T20:53:39Z",
              "updatedAt": "2022-07-11T20:53:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849sHR6",
          "commit": {
            "abbreviatedOid": "35e2a6b"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T21:55:13Z",
          "updatedAt": "2022-07-11T21:55:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs849snvR",
          "commit": {
            "abbreviatedOid": "35e2a6b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-12T01:25:08Z",
          "updatedAt": "2022-07-12T01:25:09Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Could this be `H3(msg || encode_group_commitment_list(commitment_list))` ? // @chelseakomlo ",
              "createdAt": "2022-07-12T01:25:09Z",
              "updatedAt": "2022-07-12T01:25:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849snzZ",
          "commit": {
            "abbreviatedOid": "35e2a6b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-12T01:25:36Z",
          "updatedAt": "2022-07-12T01:25:37Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Perhaps not because chosen message something something",
              "createdAt": "2022-07-12T01:25:36Z",
              "updatedAt": "2022-07-12T01:25:37Z"
            }
          ]
        }
      ]
    },
    {
      "number": 223,
      "id": "PR_kwDOEpUZs847OIsA",
      "title": "Add a secp256k1 ciphersuite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/223",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Defines secp256k1, effectively mirroring P-256, as hash-to-curve did. Since the NIST document on point validity doesn't support secp256k1, the comparable SECG function from SEC1 (which was previously notated as SECG and is now SEC1) is instead referred to.\r\n\r\nNot yet tested against anything else, as my work has yet to update to per-signer rhos. This is intended to resolve #69, though it should be noted this is a naive attempt to do so on a largely untouched issue. This could be sent back for discussion, and I'd completely understand.\r\n\r\nConsidering this follows hash-to-curve, and there's a lack of Schnorr standardization, I'd personally advocate for this. While I can cite both Bitcoin and Bitcoin Cash's Schnorr schemes, as I personally know of their specs regarding Schnorr over secp256k1 yet don't know of another project's/organization's, I think it's largely irrelevant. This only matters for implementation regarding H2, and P-256 shows that the H2s provided are secure and practical, yet meant for reference.\r\n\r\nIf we did want to cite the most widely known spec, matching their H2, it'd be `SHA256(SHA256(\"challenge\") || SHA256(\"challenge\") || R || A || m) % n`, which doesn't follow best practice regarding bias nor does it follow other IETF documents.",
      "createdAt": "2022-07-11T21:08:25Z",
      "updatedAt": "2022-08-02T19:54:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "62e3afa33b88ce59446b96400aed236a8e8d6eb1",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "secp256k1",
      "headRefOid": "881fb30eb90750f34c69c61dfc8263ff3dcaa78e",
      "closedAt": "2022-08-02T19:54:49Z",
      "mergedAt": "2022-08-02T19:54:49Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "27a5aa0c6d8b8f28e17460b154303f9dfd808a89"
      },
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Unfortunately, this is built on v6 (which I'd appreciate if I could check my understanding of: re-instantiation of the application of wagner's for an adversary who controls multiple signers in a multisig?), due to the exact timing of when I grabbed it. I'll update it to v7 and do so shortly. I did want to ask about the other curves though, which appear to still have a version of v5? Was that an oversight? Not asking as it's relevant here (neither question is), yet in order to not create a new issue simply for minute questions (when both are somewhat relevant).",
          "createdAt": "2022-07-12T06:40:19Z",
          "updatedAt": "2022-07-12T06:40:19Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I was able to verify these vectors using an independent implementation and the k256 library :) Just a bit of sanity about not having typo'd the curve parameters.",
          "createdAt": "2022-07-12T07:12:45Z",
          "updatedAt": "2022-07-12T07:12:45Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@kayabaNerve sorry for the conflicts :( Would you be able to rebase and fix these?",
          "createdAt": "2022-08-01T16:22:53Z",
          "updatedAt": "2022-08-01T16:22:53Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I should be able to today. I assume I should set a version of v8?",
          "createdAt": "2022-08-01T16:58:15Z",
          "updatedAt": "2022-08-01T16:58:15Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, that way we can get it in the next version of the draft. ",
          "createdAt": "2022-08-01T16:59:49Z",
          "updatedAt": "2022-08-01T16:59:49Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should be updated for v8 and available to merge. Sorry for the force pushes. When I originally rebuilt this around v7, I botched some part of it, and that carried to my attempt at doing a v8. The final diff is fine though :)",
          "createdAt": "2022-08-01T20:34:40Z",
          "updatedAt": "2022-08-01T20:34:40Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84_JGoa",
          "commit": {
            "abbreviatedOid": "881fb30"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, @kayabaNerve! This LGTM.",
          "createdAt": "2022-08-02T19:54:40Z",
          "updatedAt": "2022-08-02T19:54:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 224,
      "id": "PR_kwDOEpUZs847Pp7s",
      "title": "Update modular-frost's version",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/224",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Updated in https://github.com/serai-dex/serai/commit/94f380f8575d4d3bdaa60483f384e8cd4a6fbbc9#diff-a133540275715be103deeb55f161a7a3172e85acd9b1e57a3269b7e62a7a16df, with the link being to the vectors being moved to v7's.",
      "createdAt": "2022-07-12T07:54:55Z",
      "updatedAt": "2022-07-12T20:24:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "96248abd675f7ef3c8a495d78e98e6ac02bf12b5",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "modular-frost-07",
      "headRefOid": "75295d2635a14f37ba33fd476aae37a48f297860",
      "closedAt": "2022-07-12T09:35:15Z",
      "mergedAt": "2022-07-12T09:35:15Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "1fa0551f36666e4b5df29a172a82bc000dab1215"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849uJmt",
          "commit": {
            "abbreviatedOid": "75295d2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-12T09:35:11Z",
          "updatedAt": "2022-07-12T09:35:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 226,
      "id": "PR_kwDOEpUZs847Qh3M",
      "title": "Bump actions/setup-python from 4.0.0 to 4.1.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/226",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4.0.0 to 4.1.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>v4.1.0</h2>\n<p>In scope of this pull request we updated <code>actions/cache</code> package as the new version contains fixes for <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/448\">caching error handling</a>. Moreover, we added a new input <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/411\">update-environment</a>. This option allows to specify if the action shall update environment variables (default) or not.</p>\n<h3>Update-environment input</h3>\n<pre lang=\"yaml\"><code>    - name: setup-python 3.9\n      uses: actions/setup-python@v4\n      with:\n        python-version: 3.9\n        update-environment: false\n</code></pre>\n<p><strong>Besides, we added such changes as:</strong></p>\n<ul>\n<li>Allow python-version-file to be a relative path: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/431\">actions/setup-python#431</a></li>\n<li>Added new environment variables for <code>Cmake</code>: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/440\">actions/setup-python#440</a></li>\n<li>Updated error message for resolveVersion: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/450\">actions/setup-python#450</a></li>\n<li>Assign default value of <code>AGENT_TOOLSDIRECTORY</code> if not set: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/394\">actions/setup-python#394</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/c4e89fac7e8767b327bbad6cb4d859eda999cf08\"><code>c4e89fa</code></a> Improve readme for 3.x and 3.11-dev style python-version (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/441\">#441</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/0ad0f6a0a50a468a2212f245334ee8c2f0013b17\"><code>0ad0f6a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/452\">#452</a> from mayeut/fix-env</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/f0bcf8be037eba11327da6eaf40cd99a2a092494\"><code>f0bcf8b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/456\">#456</a> from akx/patch-1</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/af97157ae6983e01c4eabbfb118b3e2ac549a4c0\"><code>af97157</code></a> doc: Add multiple wildcards example to readme</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/364e819741b50de0a275e36302d0ab3e69ce3010\"><code>364e819</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/394\">#394</a> from akv-platform/v-sedoli/set-env-by-default</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/782f81b91d778ca69644ac3076dc3fcbdfc50f89\"><code>782f81b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/450\">#450</a> from IvanZosimov/ResolveVersionFix</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/2c9de4ed413bf4466f2fde83041579ed45167427\"><code>2c9de4e</code></a> Remove duplicate code introduced in <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/440\">#440</a></li>\n<li><a href=\"https://github.com/actions/setup-python/commit/412091c1e06cd58dc0bacfdc5bcc07449ebd20c0\"><code>412091c</code></a> Fix tests for update-environment==false</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/78a2330b929a62f2f42dd70a65da3f141e45bec1\"><code>78a2330</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/451\">#451</a> from dmitry-shibanov/fx-pipenv-python-version</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/96f494e18c81869c9d5eef39102df0b23b2bc4f2\"><code>96f494e</code></a> trigger checks</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v4.0.0...v4.1.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=4.0.0&new-version=4.1.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-07-12T11:48:22Z",
      "updatedAt": "2022-07-12T18:23:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "1fa0551f36666e4b5df29a172a82bc000dab1215",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.1.0",
      "headRefOid": "d909dc8dd6acee8a7853957b6aa43bdfe92c16dd",
      "closedAt": "2022-07-12T18:22:57Z",
      "mergedAt": "2022-07-12T18:22:56Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "9a8d7aeb97c9c4838d29157b41189c7d25c999cf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849xIoN",
          "commit": {
            "abbreviatedOid": "d909dc8"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-12T18:22:50Z",
          "updatedAt": "2022-07-12T18:22:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 227,
      "id": "PR_kwDOEpUZs847ySAN",
      "title": "identifier MUST never be zero, vs 'will' never",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/227",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As keygen / identifier gen is only part of the appendix, not the body of the specification",
      "createdAt": "2022-07-20T22:02:40Z",
      "updatedAt": "2022-07-26T22:48:57Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "9a8d7aeb97c9c4838d29157b41189c7d25c999cf",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-2",
      "headRefOid": "d5bdaa89b7b9a8e60795f3e85f5c556670de80c0",
      "closedAt": "2022-07-21T12:27:11Z",
      "mergedAt": "2022-07-21T12:27:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f3e39222bf931ae97505e64f029c5e45c6407811"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84-X3AQ",
          "commit": {
            "abbreviatedOid": "d5bdaa8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-21T12:27:07Z",
          "updatedAt": "2022-07-21T12:27:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 228,
      "id": "PR_kwDOEpUZs8472hl_",
      "title": "Domain separate hash functions used for msg and commitment digests",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/228",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@daira pointed out that we invoked H3 twice without domain separation. This change splits these two random oracle calls into two separate hash functions -- H4 and H5 -- with proper domain separation. It also updates the version string to -v8, the next expected version.",
      "createdAt": "2022-07-21T12:46:05Z",
      "updatedAt": "2022-07-28T22:38:48Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "f3e39222bf931ae97505e64f029c5e45c6407811",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/domain-separate-h3",
      "headRefOid": "482fcb5e8109a0954cb349af6084f6e0a018bb50",
      "closedAt": "2022-07-28T22:38:46Z",
      "mergedAt": "2022-07-28T22:38:46Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "01f7062239ba58da012e15a84e89d044bc2c216a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84-rdY2",
          "commit": {
            "abbreviatedOid": "a038b88"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks like a nice change to me.",
          "createdAt": "2022-07-26T20:32:52Z",
          "updatedAt": "2022-07-26T20:32:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84-34EC",
          "commit": {
            "abbreviatedOid": "a038b88"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T22:32:49Z",
          "updatedAt": "2022-07-28T22:32:49Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "```suggestion\r\n  - H3(m): Implemented by computing H(contextString \\|\\| \"nonce\" \\|\\| m), interpreting the 64-byte digest\r\n```",
              "createdAt": "2022-07-28T22:32:49Z",
              "updatedAt": "2022-07-28T22:32:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-34FZ",
          "commit": {
            "abbreviatedOid": "a038b88"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T22:32:58Z",
          "updatedAt": "2022-07-28T22:32:58Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "```suggestion\r\n  - H1(m): Implemented by computing H(contextString \\|\\| \"rho\" \\|\\| m), interpreting the 64-byte digest\r\n```",
              "createdAt": "2022-07-28T22:32:58Z",
              "updatedAt": "2022-07-28T22:32:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-34JL",
          "commit": {
            "abbreviatedOid": "a038b88"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T22:33:22Z",
          "updatedAt": "2022-07-28T22:33:23Z",
          "comments": [
            {
              "originalPosition": 95,
              "body": "```suggestion\r\n  - H3(m): Implemented by computing H(contextString \\|\\| \"nonce\" \\|\\| m) and mapping the\r\n```",
              "createdAt": "2022-07-28T22:33:22Z",
              "updatedAt": "2022-07-28T22:33:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-34Lf",
          "commit": {
            "abbreviatedOid": "a038b88"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T22:33:39Z",
          "updatedAt": "2022-07-28T22:33:39Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "```suggestion\r\n  - H1(m): Implemented by computing H(contextString \\|\\| \"rho\" \\|\\| m), interpreting the lower\r\n```",
              "createdAt": "2022-07-28T22:33:39Z",
              "updatedAt": "2022-07-28T22:33:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-34Ni",
          "commit": {
            "abbreviatedOid": "a038b88"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T22:33:53Z",
          "updatedAt": "2022-07-28T22:33:53Z",
          "comments": [
            {
              "originalPosition": 124,
              "body": "```suggestion\r\n  - H3(m): Implemented by computing H(contextString \\|\\| \"nonce\" \\|\\| m), interpreting the lower\r\n```",
              "createdAt": "2022-07-28T22:33:53Z",
              "updatedAt": "2022-07-28T22:33:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-34vX",
          "commit": {
            "abbreviatedOid": "482fcb5"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-28T22:37:42Z",
          "updatedAt": "2022-07-28T22:37:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 229,
      "id": "PR_kwDOEpUZs8479Pro",
      "title": "Add IdentifierToScalar method",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/229",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is a suggestion to make it explicit the conversion between identifiers and scalars, to reduce the chance of implementation mistakes.\r\n\r\nAnother possible approaches:\r\n\r\n- Make `derive_lagrange_coefficient` and `polynomial_evaluate` receive identifiers and convert to Scalars inside them. Makes calling them easier, but conceptually weird since those seem to be \"arithmetic\" functions\r\n- Specify that identifier are Scalars. This will require changing `encode_uint16` to receive a Scalar, and implementors would need to guarantee that identifier Scalars are in the correct range, which is awkward.",
      "createdAt": "2022-07-22T15:21:10Z",
      "updatedAt": "2022-08-02T02:05:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "f3e39222bf931ae97505e64f029c5e45c6407811",
      "headRepository": "conradoplg/draft-irtf-cfrg-frost",
      "headRefName": "identifier-to-scalar",
      "headRefOid": "b7145dd40e69a248d72498c2ee8b727e2c816cec",
      "closedAt": "2022-08-02T02:05:45Z",
      "mergedAt": "2022-08-02T02:05:45Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "8ec8b6820ea89c0f0aed5a7cef52f3a64d9bf272"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84-rdg7",
          "commit": {
            "abbreviatedOid": "e6ab1ea"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-26T20:33:26Z",
          "updatedAt": "2022-07-26T20:33:26Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "We might want to be specific that this is the output of `encode_u16()`: a 2-byte,\r\n  big-endian byte string",
              "createdAt": "2022-07-26T20:33:26Z",
              "updatedAt": "2022-07-26T20:33:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-r5pI",
          "commit": {
            "abbreviatedOid": "e6ab1ea"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-26T22:50:26Z",
          "updatedAt": "2022-07-26T22:50:26Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I had in mind that the identifier is the _input_  to `encode_u16()` (i.e. \"An identifier is an integer value associated with a participant, or signer, and is a value in the range [1, MAX_SIGNERS].\"), which is only encoded when needed (like a Scalar or Element)",
              "createdAt": "2022-07-26T22:50:26Z",
              "updatedAt": "2022-07-26T22:50:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-0Ic_",
          "commit": {
            "abbreviatedOid": "e6ab1ea"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I like this change (given the test vector coverage bug it uncovered), but I don't think this is ready to go just yet. ",
          "createdAt": "2022-07-28T10:25:27Z",
          "updatedAt": "2022-07-28T10:26:00Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Why is this a member function of the group? It seems like a helper function to me. Can we move it to that part of the draft, and then actually specify how it's implemented?",
              "createdAt": "2022-07-28T10:25:27Z",
              "updatedAt": "2022-07-28T10:26:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-3Sde",
          "commit": {
            "abbreviatedOid": "e6ab1ea"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T20:09:32Z",
          "updatedAt": "2022-07-28T20:09:33Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "It's related to a Scalar, just like `DeserializeScalar` but with a different input. I don't see a way to specify the implementation in a generic manner, it will depend on how `Scalar` is implemented.",
              "createdAt": "2022-07-28T20:09:32Z",
              "updatedAt": "2022-07-28T20:09:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-5zOP",
          "commit": {
            "abbreviatedOid": "e6ab1ea"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-29T10:36:02Z",
          "updatedAt": "2022-07-29T10:36:03Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Sure, but it's a function that one can invoke _with_ group elements, not _on_ a group (though that is true for others). More generally, the concept of an \"identifier\" has nothing to do with a group, and so this is the wrong place for it.",
              "createdAt": "2022-07-29T10:36:02Z",
              "updatedAt": "2022-07-29T10:37:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-8ykg",
          "commit": {
            "abbreviatedOid": "e6ab1ea"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-29T22:42:36Z",
          "updatedAt": "2022-07-29T22:42:36Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Perhaps that indicates an Identifier type (which is secretly a Scalar?)",
              "createdAt": "2022-07-29T22:42:36Z",
              "updatedAt": "2022-07-29T22:42:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-8yrP",
          "commit": {
            "abbreviatedOid": "e6ab1ea"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-29T22:43:48Z",
          "updatedAt": "2022-07-29T22:43:48Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Yeah this should be a helper function vs in the Group definitions",
              "createdAt": "2022-07-29T22:43:48Z",
              "updatedAt": "2022-07-29T22:43:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84_CDLd",
          "commit": {
            "abbreviatedOid": "e6ab1ea"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-01T15:37:39Z",
          "updatedAt": "2022-08-01T15:37:39Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "@conradoplg will you be able to relocate this, or would you like one of us to do it?",
              "createdAt": "2022-08-01T15:37:39Z",
              "updatedAt": "2022-08-01T15:37:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84_CTV-",
          "commit": {
            "abbreviatedOid": "e6ab1ea"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-01T16:28:58Z",
          "updatedAt": "2022-08-01T16:28:59Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "> @conradoplg will you be able to relocate this, or would you like one of us to do it?\r\n\r\nI can do it, but I'm having trouble working out the best way to do it. Some possible approaches:\r\n\r\n- Move to \"Helper functions\": these are all in pseudo-code, but IdentifierToScalar can't be described as pseudo-code (since Scalar is implementation-dependent)\r\n- Keep in this section, but add a new bullet list of helper functions\r\n- Rename to \"IntegerToScalar\" and keep it in this list (and the Identifier -> integer conversion will be implied)\r\n",
              "createdAt": "2022-08-01T16:28:59Z",
              "updatedAt": "2022-08-01T16:28:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84_CVfo",
          "commit": {
            "abbreviatedOid": "e6ab1ea"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-01T16:37:00Z",
          "updatedAt": "2022-08-01T16:37:00Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Hmm, interesting point! How about something like the last option, but maybe spelled like this:\r\n\r\n```\r\nWe denote Scalar(x) as the conversion of integer input `x` to the corresponding Scalar value with the same numeric value. For example, Scalar(1) yields a Scalar representing the value 1.\r\n```\r\n\r\nWe already use the notation `Scalar(0)` and `Scalar(1)` in other places, so this would just formalize that convention. We could put this in the paragraph at the top of section 3.1.\r\n\r\nThoughts?",
              "createdAt": "2022-08-01T16:37:00Z",
              "updatedAt": "2022-08-01T16:37:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84_CXnA",
          "commit": {
            "abbreviatedOid": "e6ab1ea"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-01T16:44:59Z",
          "updatedAt": "2022-08-01T16:44:59Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Ahh neat, I missed that this notation was already used elsewhere! That seems the best approach, I'm make this change shortly",
              "createdAt": "2022-08-01T16:44:59Z",
              "updatedAt": "2022-08-01T16:44:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84_CZ37",
          "commit": {
            "abbreviatedOid": "e6ab1ea"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-01T16:53:28Z",
          "updatedAt": "2022-08-01T16:53:29Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Done in b7145dd40e6",
              "createdAt": "2022-08-01T16:53:29Z",
              "updatedAt": "2022-08-01T16:53:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84_CaHA",
          "commit": {
            "abbreviatedOid": "b7145dd"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM, thank you!",
          "createdAt": "2022-08-01T16:54:20Z",
          "updatedAt": "2022-08-01T16:54:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84_EDmj",
          "commit": {
            "abbreviatedOid": "b7145dd"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-02T01:56:31Z",
          "updatedAt": "2022-08-02T01:56:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84_EDtM",
          "commit": {
            "abbreviatedOid": "b7145dd"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Good for the time being",
          "createdAt": "2022-08-02T01:57:19Z",
          "updatedAt": "2022-08-02T01:57:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 230,
      "id": "PR_kwDOEpUZs8479eGu",
      "title": "DeserializeScalar: mention endianess, make range explicit",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/230",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This came up while reviewing the [re-randomized FROST ZIP](https://github.com/ZcashFoundation/zips/pull/3/)\r\n\r\n- Make endianess explicit in DeserializeScalar\r\n- Adjust notation to make range unambiguous; similar notation is used elsewhere in the RFC",
      "createdAt": "2022-07-22T16:28:01Z",
      "updatedAt": "2022-07-28T22:07:10Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "f3e39222bf931ae97505e64f029c5e45c6407811",
      "headRepository": "conradoplg/draft-irtf-cfrg-frost",
      "headRefName": "deserialize-scalar-adjustments",
      "headRefOid": "896ad17bba604639e6872e74f428943587546d61",
      "closedAt": "2022-07-28T10:16:22Z",
      "mergedAt": "2022-07-28T10:16:22Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "32207f5f929c6c262c53425dd46c1a80322fde7d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84-0EkR",
          "commit": {
            "abbreviatedOid": "896ad17"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-28T10:16:13Z",
          "updatedAt": "2022-07-28T10:16:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84-30Is",
          "commit": {
            "abbreviatedOid": "896ad17"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "\ud83d\udc4d",
          "createdAt": "2022-07-28T22:07:10Z",
          "updatedAt": "2022-07-28T22:07:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 231,
      "id": "PR_kwDOEpUZs8479itz",
      "title": "Change RandomScalar to not specify a particular implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/231",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This also came up while reviewing the https://github.com/ZcashFoundation/zips/pull/3/.\r\n\r\nIt's an attempt to not force a particular implementation approach in RandomScalar while still providing implementation guidance.\r\n\r\nBut feel free to reject this if it's not a good idea.",
      "createdAt": "2022-07-22T16:53:55Z",
      "updatedAt": "2022-08-02T14:16:06Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "f3e39222bf931ae97505e64f029c5e45c6407811",
      "headRepository": "conradoplg/draft-irtf-cfrg-frost",
      "headRefName": "random-scalar-generic",
      "headRefOid": "92f4eece33f3c682adefd429e7ee633d73db5cb9",
      "closedAt": "2022-08-02T14:16:06Z",
      "mergedAt": "2022-08-02T14:16:06Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0676aed89da5be93a1fb45724452835be941d09a"
      },
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "While I appreciate the intent in defining a widely usable RandomScalar, the Ristretto, Ed25519, and Ed448 ciphersuites have this definition despite all of them having (the IMO preferable) wide reduction available due to their challenge generation. From FROST's perspective, even P-256 has some form of wide reduction available via hash_to_field (though I'd note the comparable secp256k1 frequently doesn't use, nor offer, wide reduction, which I assume carries for P-256).\r\n\r\nMaking this an implementation recommendation, perhaps one pushed for with vectors in regard to #173, would be appreciated.\r\n\r\nI will note, in regards to this specific PR (beyond misc wording commentary I'll leave to people with more experience), wide reduction is stated as little-endian. It ideally would match the endianess of the scalar's natural representation, not have its own endianess defined.",
          "createdAt": "2022-07-23T06:48:37Z",
          "updatedAt": "2022-07-23T06:48:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84-rTtK",
          "commit": {
            "abbreviatedOid": "d1ec2a3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-26T19:57:02Z",
          "updatedAt": "2022-07-26T19:57:03Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n  - RandomScalar: Implemented by returning a uniformly random Scalar in the range\r\n    \\[0, `G.Order()` - 1\\]. Refer to {{random-scalar}} for implementation guidance.\r\n```",
              "createdAt": "2022-07-26T19:57:02Z",
              "updatedAt": "2022-07-26T19:57:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-rZeW",
          "commit": {
            "abbreviatedOid": "3d5b6e3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-26T20:19:38Z",
          "updatedAt": "2022-07-26T20:19:38Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n  - RandomScalar: Implemented by returning a uniformly random Scalar in the range\r\n```",
              "createdAt": "2022-07-26T20:19:38Z",
              "updatedAt": "2022-07-26T20:19:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-rZhp",
          "commit": {
            "abbreviatedOid": "3d5b6e3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-26T20:19:49Z",
          "updatedAt": "2022-07-26T20:19:49Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\n  - RandomScalar: Implemented by returning a uniformly random Scalar in the range\r\n```",
              "createdAt": "2022-07-26T20:19:49Z",
              "updatedAt": "2022-07-26T20:19:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-rZkQ",
          "commit": {
            "abbreviatedOid": "3d5b6e3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-26T20:19:59Z",
          "updatedAt": "2022-07-26T20:19:59Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n  - RandomScalar: Implemented by returning a uniformly random Scalar in the range\r\n```",
              "createdAt": "2022-07-26T20:19:59Z",
              "updatedAt": "2022-07-26T20:19:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-rZni",
          "commit": {
            "abbreviatedOid": "3d5b6e3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-26T20:20:11Z",
          "updatedAt": "2022-07-26T20:20:12Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "```suggestion\r\nTwo popular algorithms for generating a random integer uniformly distributed in\r\n```",
              "createdAt": "2022-07-26T20:20:11Z",
              "updatedAt": "2022-07-26T20:20:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-0F-O",
          "commit": {
            "abbreviatedOid": "720cae5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-07-28T10:21:05Z",
          "updatedAt": "2022-07-28T10:21:56Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "Is this wide enough to remove bias? The [hash-to-curve draft](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5) uses the following expression to determine the width:\r\n\r\n```\r\nL = ceil((ceil(log2(p)) + k) / 8)\r\n```\r\n\r\nwhere p is the prime associated with the field and k is the target security level. This yields a bias of at most 2^-k. I would prefer if we wrote the width in a similar way here.",
              "createdAt": "2022-07-28T10:21:05Z",
              "updatedAt": "2022-07-28T10:21:56Z"
            },
            {
              "originalPosition": 71,
              "body": "```suggestion\r\ninteger; reduce the integer modulo `G.Order()` and return the\r\n```\r\n\r\nAs @kayabaNerve observes, this shouldn't mandate little-endian. It should match the endianness of the suite.",
              "createdAt": "2022-07-28T10:21:42Z",
              "updatedAt": "2022-07-28T10:21:56Z"
            },
            {
              "originalPosition": 50,
              "body": "This section should go _before_ the test vectors.",
              "createdAt": "2022-07-28T10:21:52Z",
              "updatedAt": "2022-07-28T10:21:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84-330R",
          "commit": {
            "abbreviatedOid": "0146f62"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T22:31:10Z",
          "updatedAt": "2022-07-28T22:32:34Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "Thanks for the reference. It turns out what I wrote was even more than required.\r\nSince the RFC does not mention security levels, I think it would be confusing to use that expression as is. So I thought of using the hash-to-curve [suggestion](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-8.9) of setting `k = ceil(log2(r) / 2)` and substituting in the expression (it ends up being basically `3/2 * Ns`). This was done in 7ae7e944df7, let me know if it makes sense.",
              "createdAt": "2022-07-28T22:31:10Z",
              "updatedAt": "2022-07-28T22:32:34Z"
            },
            {
              "originalPosition": 71,
              "body": "Done in 7ae7e94",
              "createdAt": "2022-07-28T22:31:29Z",
              "updatedAt": "2022-07-28T22:32:34Z"
            },
            {
              "originalPosition": 50,
              "body": "Done in 0146f62a",
              "createdAt": "2022-07-28T22:31:38Z",
              "updatedAt": "2022-07-28T22:32:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84_B-wY",
          "commit": {
            "abbreviatedOid": "0146f62"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM modulo two suggestions. We do over approximate L here, but that's fine. Thanks, @conradoplg!",
          "createdAt": "2022-08-01T15:24:38Z",
          "updatedAt": "2022-08-01T15:37:16Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "```suggestion\r\nby calling `DeserializeScalar`. If it succeeds, return the result. If it fails,\r\n```",
              "createdAt": "2022-08-01T15:24:38Z",
              "updatedAt": "2022-08-01T15:37:16Z"
            },
            {
              "originalPosition": 70,
              "body": "```suggestion\r\nresult. See {{Section 5 of HASH-TO-CURVE}} for the underlying derivation of `L`.\r\n```",
              "createdAt": "2022-08-01T15:36:57Z",
              "updatedAt": "2022-08-01T15:37:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 234,
      "id": "PR_kwDOEpUZs848Lx6w",
      "title": "Delete repeated word",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/234",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-27T14:11:14Z",
      "updatedAt": "2022-07-27T14:23:26Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "f3e39222bf931ae97505e64f029c5e45c6407811",
      "headRepository": "conradoplg/draft-irtf-cfrg-frost",
      "headRefName": "patch-1",
      "headRefOid": "ee62906c345b5d3d2d1d14a6ad758df76147a6ce",
      "closedAt": "2022-07-27T14:23:26Z",
      "mergedAt": "2022-07-27T14:23:25Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "f296995137270d862a75f307f1eb3fa71a99428f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84-vXGv",
          "commit": {
            "abbreviatedOid": "ee62906"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-27T14:23:21Z",
          "updatedAt": "2022-07-27T14:23:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 235,
      "id": "PR_kwDOEpUZs848cRO0",
      "title": "Update nonce reuse section",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/235",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #232.",
      "createdAt": "2022-08-01T15:44:53Z",
      "updatedAt": "2022-08-01T15:51:58Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "01f7062239ba58da012e15a84e89d044bc2c216a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/update-nonce-reuse",
      "headRefOid": "c96fe66e9b66114aad6a6e1444a875a24dda11f7",
      "closedAt": "2022-08-01T15:51:58Z",
      "mergedAt": "2022-08-01T15:51:58Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "62e3afa33b88ce59446b96400aed236a8e8d6eb1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84_CHge",
          "commit": {
            "abbreviatedOid": "7a4e3aa"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-01T15:51:01Z",
          "updatedAt": "2022-08-01T15:51:06Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\nfrom values sampled uniformly at random. This requirement is necessary to avoid\n```\n",
              "createdAt": "2022-08-01T15:51:01Z",
              "updatedAt": "2022-08-01T15:51:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84_CHv0",
          "commit": {
            "abbreviatedOid": "c96fe66"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-01T15:51:48Z",
          "updatedAt": "2022-08-01T15:51:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 236,
      "id": "PR_kwDOEpUZs848cSZQ",
      "title": "Show state across round 1 and round 2",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/236",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #195.",
      "createdAt": "2022-08-01T15:49:46Z",
      "updatedAt": "2022-08-02T01:36:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "01f7062239ba58da012e15a84e89d044bc2c216a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/show-state",
      "headRefOid": "86e27f96c11a851c8857a24ec647f03d410730f2",
      "closedAt": "2022-08-02T01:36:15Z",
      "mergedAt": "2022-08-02T01:36:15Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "78931996d7e8bfc605da41d2df15fc053d8a7898"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo i'll let you look before merging just in case",
          "createdAt": "2022-08-01T16:13:06Z",
          "updatedAt": "2022-08-01T16:13:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84_CObA",
          "commit": {
            "abbreviatedOid": "86e27f9"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-01T16:12:39Z",
          "updatedAt": "2022-08-01T16:12:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 237,
      "id": "PR_kwDOEpUZs848cV7G",
      "title": "Scalar multiplication",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/237",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #201.\r\n\r\nI _think_ I caught all the scalar multiplication references, but would appreciate a sanity check!",
      "createdAt": "2022-08-01T16:04:04Z",
      "updatedAt": "2022-08-19T17:14:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "62e3afa33b88ce59446b96400aed236a8e8d6eb1",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/scalarmult",
      "headRefOid": "159ba974daf241c9749f9a62b6aa230fa9c56d40",
      "closedAt": "2022-08-19T17:14:45Z",
      "mergedAt": "2022-08-19T17:14:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6e42f627e86389595d522de1178f41ecffd24894"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo @dconnolly please take a look!",
          "createdAt": "2022-08-06T22:03:15Z",
          "updatedAt": "2022-08-06T22:03:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85AUiE7",
          "commit": {
            "abbreviatedOid": "159ba97"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good, thanks also for adding @conradoplg as a contributor! ",
          "createdAt": "2022-08-19T17:08:56Z",
          "updatedAt": "2022-08-19T17:08:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 238,
      "id": "PR_kwDOEpUZs848iBeZ",
      "title": "update secp2561k1 RandomScalar() to match the others",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/238",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I noticed this just after the secp256k1 PR was merged",
      "createdAt": "2022-08-02T20:08:17Z",
      "updatedAt": "2022-08-02T20:13:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "27a5aa0c6d8b8f28e17460b154303f9dfd808a89",
      "headRepository": "conradoplg/draft-irtf-cfrg-frost",
      "headRefName": "random-scalar-secp256k1",
      "headRefOid": "c42e4b8552c98e21b04f23c6fe7c11601907b631",
      "closedAt": "2022-08-02T20:13:20Z",
      "mergedAt": "2022-08-02T20:13:20Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "01258830fc357833a9753cac4a0b1c2f1b0a70a4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84_JLcR",
          "commit": {
            "abbreviatedOid": "c42e4b8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-02T20:13:16Z",
          "updatedAt": "2022-08-02T20:13:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 239,
      "id": "PR_kwDOEpUZs848kcSJ",
      "title": "Bump actions/setup-python from 4.1.0 to 4.2.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/239",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4.1.0 to 4.2.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>Add check-latest input and bug fixes</h2>\n<p>In scope of this release we add the\u00a0<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/406\">check-latest</a>\u00a0input. If\u00a0check-latest\u00a0is set to\u00a0true, the action first checks if the cached version is the latest one. If the locally cached version is not the most up-to-date, the version will then be downloaded from\u00a0<a href=\"https://github.com/actions/python-versions\">python-versions</a>\u00a0repository. By default\u00a0check-latest\u00a0is set to\u00a0false. For PyPy it will to try to reach <a href=\"https://downloads.python.org/pypy/versions.json\">https://downloads.python.org/pypy/versions.json</a></p>\n<h3>Example of usage:</h3>\n<pre lang=\"yaml\"><code>steps:\n  - uses: actions/checkout@v3\n  - uses: actions/setup-python@v4\n    with:\n      python-version: '3.9'\n      check-latest: true\n  - run: python --version\n</code></pre>\n<p>Besides, it includes such changes as</p>\n<ul>\n<li>Resolved logs for python-version and file inputs: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/465\">actions/setup-python#465</a></li>\n<li>Added linux os release info to primary key: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/467\">actions/setup-python#467</a></li>\n<li>Added fix to change Python versions for poetry: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/445\">actions/setup-python#445</a></li>\n<li>Fix Tool Path handling for self-hosted runners: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/466\">actions/setup-python#466</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/b55428b1882923874294fa556849718a1d7f2ca5\"><code>b55428b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/472\">#472</a> from IvanZosimov/ReadmeUpdate</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/e084fcae445f3eaa110ca2a7fdf125b5816c1abc\"><code>e084fca</code></a> Merge branch 'main' into ReadmeUpdate</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/789730b666521111ca6f8cac30ef7f8953d953cb\"><code>789730b</code></a> Fix broken links in the text body</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/c4e98b741b9d2b91a44c958390134fdcb0429533\"><code>c4e98b7</code></a> Fix broken links</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/cfcafa57ec3e74dcd563b5a8ea4a0a330d4ccc33\"><code>cfcafa5</code></a> Fix review points</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/c318b92fd627ecea2e1c2efcd2fd8df4a972d849\"><code>c318b92</code></a> Fix review points</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/a93d5412cbea8e722be8a13812f0923da907d4cf\"><code>a93d541</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/466\">#466</a> from techman83/fix/tool_path</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/72394d1a3e63e9ea594929a21d057324696cad57\"><code>72394d1</code></a> Fix typo</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/fe396d3941d5b4e765fc2fd32ca503e501536e03\"><code>fe396d3</code></a> Revert changes</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/853c012a3c7e40881435c8a92898c46539e11860\"><code>853c012</code></a> Change advanced-usage.md</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v4.1.0...v4.2.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=4.1.0&new-version=4.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-08-03T11:27:55Z",
      "updatedAt": "2022-09-12T17:06:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "01258830fc357833a9753cac4a0b1c2f1b0a70a4",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.2.0",
      "headRefOid": "ad22df10a2a4161ca520c1ad7395699f7aca0379",
      "closedAt": "2022-09-12T17:06:01Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Postpone until the next version",
          "createdAt": "2022-09-12T17:06:01Z",
          "updatedAt": "2022-09-12T17:06:01Z"
        },
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
          "createdAt": "2022-09-12T17:06:03Z",
          "updatedAt": "2022-09-12T17:06:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 240,
      "id": "PR_kwDOEpUZs848lJWO",
      "title": "Make explicit that ciphersuite is composed of methods and not fields",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/240",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is a minor notation issue that came up while reviewing the https://github.com/ZcashFoundation/zips/pull/3.\r\n\r\nFeel free to reject / modify if preferred.",
      "createdAt": "2022-08-03T14:11:02Z",
      "updatedAt": "2022-08-06T21:59:59Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "01258830fc357833a9753cac4a0b1c2f1b0a70a4",
      "headRepository": "conradoplg/draft-irtf-cfrg-frost",
      "headRefName": "method-notation",
      "headRefOid": "cb21ab3c45267f4af07bb1293ac32b283a4f0d06",
      "closedAt": "2022-08-06T21:59:59Z",
      "mergedAt": "2022-08-06T21:59:58Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4e1ff206ba2a64cd3403fff57be8e99db3ecfeac"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84_NCmk",
          "commit": {
            "abbreviatedOid": "cb21ab3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm, @chris-wood ?",
          "createdAt": "2022-08-03T14:12:21Z",
          "updatedAt": "2022-08-03T14:12:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84_cLhp",
          "commit": {
            "abbreviatedOid": "cb21ab3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Yeah, this is nice \ud83d\udc4d ",
          "createdAt": "2022-08-06T21:59:52Z",
          "updatedAt": "2022-08-06T21:59:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 241,
      "id": "PR_kwDOEpUZs848lNJ5",
      "title": "mention in aggregate that the signers are from the previous rounds",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/241",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is a minor clarity issue that came up while reviewing  https://github.com/ZcashFoundation/zips/pull/3 (this is the last one! :rofl: )\r\n\r\nFeel free to reject / modify if preferred.",
      "createdAt": "2022-08-03T14:22:56Z",
      "updatedAt": "2022-08-16T20:11:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "01258830fc357833a9753cac4a0b1c2f1b0a70a4",
      "headRepository": "conradoplg/draft-irtf-cfrg-frost",
      "headRefName": "mention-signers-previous-rounds",
      "headRefOid": "4becfcf4dc54d76d80d3c5278683ca4b9ab48d2d",
      "closedAt": "2022-08-16T20:11:14Z",
      "mergedAt": "2022-08-16T20:11:14Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "df1c273cddbc39a18c267f66df3cb4e9b5c08257"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84_NpT6",
          "commit": {
            "abbreviatedOid": "6698d06"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm; @chris-wood @chelseakomlo do we need a note that if called on the wrong set of signer sig shares the resulting signature will just fail to verify, or something ",
          "createdAt": "2022-08-03T15:43:51Z",
          "updatedAt": "2022-08-03T15:43:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84_cLj_",
          "commit": {
            "abbreviatedOid": "6698d06"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-08-06T22:02:55Z",
          "updatedAt": "2022-08-06T22:02:59Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Rather than note this in the parameter list, I would say this in lines L838-839. Maybe something like:\r\n\r\n```\r\nOtherwise, if all shares from signers that participated in Rounds 1 and 2 are valid, the \r\nCoordinator performs the `aggregate` operation and publishes the resulting signature. \r\n```",
              "createdAt": "2022-08-06T22:02:55Z",
              "updatedAt": "2022-08-06T22:02:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84_zbZQ",
          "commit": {
            "abbreviatedOid": "6698d06"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-11T22:52:07Z",
          "updatedAt": "2022-08-11T22:52:08Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "This looks like a good change to me",
              "createdAt": "2022-08-11T22:52:07Z",
              "updatedAt": "2022-08-11T22:52:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85ADskV",
          "commit": {
            "abbreviatedOid": "6698d06"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-16T20:04:38Z",
          "updatedAt": "2022-08-16T20:04:39Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Done in 4becfcf",
              "createdAt": "2022-08-16T20:04:38Z",
              "updatedAt": "2022-08-16T20:04:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85ADuRn",
          "commit": {
            "abbreviatedOid": "4becfcf"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-16T20:11:10Z",
          "updatedAt": "2022-08-16T20:11:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 244,
      "id": "PR_kwDOEpUZs84925Xp",
      "title": "Update modular-frost to v8",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/244",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Sorry for the delay in doing so. This was tagged yet not marked as a release so I missed it. Really should've subbed to the mailing list...\r\n\r\nhttps://github.com/serai-dex/serai/commit/a8a00598e4e6f44746b5d971eec5f547d4df35c5 for the commit updating the vectors, which does pass the CI.",
      "createdAt": "2022-08-26T10:34:02Z",
      "updatedAt": "2022-09-12T20:04:32Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "341e4db482414d95e2dd9da0ade4bec4919fd3d2",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "patch-2",
      "headRefOid": "97d21c356c5a1908456845df601815993a8fb232",
      "closedAt": "2022-09-12T17:12:12Z",
      "mergedAt": "2022-09-12T17:12:12Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "39aea242cadb656ae8bd10a065a7e6ef506430fc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85B1cuk",
          "commit": {
            "abbreviatedOid": "97d21c3"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good, thanks for this update! :) ",
          "createdAt": "2022-09-12T17:12:07Z",
          "updatedAt": "2022-09-12T17:12:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 246,
      "id": "PR_kwDOEpUZs8496lDT",
      "title": "Correct Ed448 to be RFC8032-compliant",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/246",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://www.rfc-editor.org/rfc/rfc8032#appendix-A for a Python impl with this generator.\r\n\r\nCloses #245 which directly tested the encoded result of a point double from each.",
      "createdAt": "2022-08-28T00:58:27Z",
      "updatedAt": "2022-09-22T22:59:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "341e4db482414d95e2dd9da0ade4bec4919fd3d2",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "ed448",
      "headRefOid": "81a6ca56617ced5df1c122042781ad146f9bb8a6",
      "closedAt": "2022-09-20T12:25:50Z",
      "mergedAt": "2022-09-20T12:25:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0a046f34020372500e69c9a5d8142af959593109"
      },
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Converted to draft pending additional fixes mentioned in #245.",
          "createdAt": "2022-08-28T08:23:34Z",
          "updatedAt": "2022-08-28T08:23:34Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/serai-dex/serai/blob/4a60d848f8599d6947422538b0d52d08d355dae4/crypto/frost/src/tests/literal/ed448.rs verifies a RFC8032 Ed448 signature which used a context string, ensuring its integrity against RFC8032.\r\n\r\nThat same file demonstrates vector compatibility with these protocol and PoC changes.\r\n\r\nBeyond the compatibility. I'd point out how the Ed448 lib used (a horrible one I threw together) uses the newly specified generator: https://github.com/serai-dex/serai/blob/4a60d848f8599d6947422538b0d52d08d355dae4/crypto/ed448/src/hazmat/point.rs#L47-L49 (in a different endian)\r\n\r\nThis is limited to just Ed448, not Ed448ph, yet it seems like only the primary signature algorithms of RFC8032 were followed. Happy to replace the hardcoded 0 for the dom4 function if requested.\r\n\r\nAlso happy to piece this out if it deserves further discussion. I solely didn't want to spam multiple small PRs for one overall issue.\r\n\r\nIf this is accepted, it'll mean that there's independent implementations of all ciphersuites described in the draft :D If it's not, it'll take another day or two :p But really happy to have done so in order to confirm they've been properly specified.",
          "createdAt": "2022-08-28T12:55:33Z",
          "updatedAt": "2022-08-28T12:55:33Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood Are changes still requested or is this good? No rush on my end, I just don't want to be missing something :)",
          "createdAt": "2022-09-19T14:14:14Z",
          "updatedAt": "2022-09-19T14:14:14Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Nope! Thanks again, @kayabaNerve.  =)",
          "createdAt": "2022-09-20T12:26:05Z",
          "updatedAt": "2022-09-20T12:26:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85B82fl",
          "commit": {
            "abbreviatedOid": "acd082b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks (and sorry for the delay in reviewing this), @kayabaNerve! I think we should keep the bug fix, but revert the change to how the domain separated hash inputs are passed to `H`. ",
          "createdAt": "2022-09-13T21:27:19Z",
          "updatedAt": "2022-09-13T21:27:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85B8TSq",
          "commit": {
            "abbreviatedOid": "acd082b"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Just to confirm that I checked the fixed generator and it looks good.",
          "createdAt": "2022-09-13T19:12:23Z",
          "updatedAt": "2022-09-13T22:31:52Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "As @chris-wood mentioned, can you please change it to the empty string here, to improve compatibility? (since most usages of Ed448 won't likely use the context string)\r\n",
              "createdAt": "2022-09-13T19:12:24Z",
              "updatedAt": "2022-09-13T22:31:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CNOri",
          "commit": {
            "abbreviatedOid": "acd082b"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-16T14:18:40Z",
          "updatedAt": "2022-09-16T14:18:40Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@kayabaNerve I can make the changes if you prefer, just let me know, thanks!",
              "createdAt": "2022-09-16T14:18:40Z",
              "updatedAt": "2022-09-16T14:18:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CNqQ-",
          "commit": {
            "abbreviatedOid": "acd082b"
          },
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-16T15:34:18Z",
          "updatedAt": "2022-09-16T15:34:19Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Hey! Sorry. I've been away.\r\n\r\nI had a long post here detailing my thoughts yet it finally just clicked for me, sorry. I'll remove the FROST context string.",
              "createdAt": "2022-09-16T15:34:18Z",
              "updatedAt": "2022-09-16T15:54:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CN4SK",
          "commit": {
            "abbreviatedOid": "81a6ca5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-16T16:22:20Z",
          "updatedAt": "2022-09-16T16:22:21Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "The request was to remove all prefixes to the message, leaving the only change in this PR to the output size and generator, I think.",
              "createdAt": "2022-09-16T16:22:21Z",
              "updatedAt": "2022-09-16T16:22:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CN5Jk",
          "commit": {
            "abbreviatedOid": "acd082b"
          },
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-16T16:25:24Z",
          "updatedAt": "2022-09-16T16:25:25Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "If that was the original request, then it's invalid, as my lengthier message covered before I replaced it with a short ACK. RFC-8032 explicitly specifies the \"SigEd448\" prefix and a context string variable, which is the line after the line quoted. The only questionable part would be the usage of the FROST context string, which was previously unused, as the Ed448 context string.\r\n\r\nAs @conradoplg pointed out, some implementations do not expose it. The most basic WolfSSL function for signing doesn't let you pass a context. My most recent commit removed the usage of the FROST context as the Ed448 context, yet did not revert the RFC-8302 specified HRAm (\"SigEd448\" ...), as the HRAm defined here was non-compliant.",
              "createdAt": "2022-09-16T16:25:24Z",
              "updatedAt": "2022-09-16T16:25:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CN67n",
          "commit": {
            "abbreviatedOid": "81a6ca5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-16T16:31:48Z",
          "updatedAt": "2022-09-16T16:31:48Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Oh, you're right! Boy, RFC8032 is annoying. Disregard the last comment.",
              "createdAt": "2022-09-16T16:31:48Z",
              "updatedAt": "2022-09-16T16:31:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CN_C7",
          "commit": {
            "abbreviatedOid": "acd082b"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-16T16:48:03Z",
          "updatedAt": "2022-09-16T16:48:03Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yeah there are multiple context strings in the discussion so it's pretty confusing. But your recent commit looks good @kayabaNerve, thanks!",
              "createdAt": "2022-09-16T16:48:03Z",
              "updatedAt": "2022-09-16T16:48:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85COA56",
          "commit": {
            "abbreviatedOid": "acd082b"
          },
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-16T16:55:12Z",
          "updatedAt": "2022-09-16T16:55:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yeah. Also really weird how Ed25519 and Ed448 is different. While Ed448 is intended to be for higher security regarding bits, they also seem to gave it the much more comprehensive and saner scheme. While yes, that offers higher security... why wasn't it just also used with Ed25519?\r\n\r\nRegardless, while we could actually finally sanely have a context string present in H2 with Ed448, it looks unexposed by impls :/ Specifying one would break the intended drop-in compatibility, though we already aren't compatible with anything which did specify a context string (as the lack of modularity regarding H2 in the spec makes all ciphersuites except Ed25519 (and likely Ed448 since people didn't bother with the context string) infeasible for real world deployment as written).\r\n\r\nIf my most recent commit works out though, it works out.",
              "createdAt": "2022-09-16T16:55:13Z",
              "updatedAt": "2022-09-16T17:04:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CYfQY",
          "commit": {
            "abbreviatedOid": "81a6ca5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-20T12:25:45Z",
          "updatedAt": "2022-09-20T12:25:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 247,
      "id": "PR_kwDOEpUZs84-FYt0",
      "title": "Enforce Identifier as a Scalar type with values [1, MAX_SIGNERS]",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/247",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Instead of representing the Identifier as an integer, emphasize that it is a Scalar, and provide a per-ciphersuite Scalar(i) routine to produce a Scalar from a uint16; this varies per-ciphersuite because of the endianness variance between ciphersuites\r\n\r\nThis will be backwards-incompatible with the test vectors, and the poc Sage code needs to be updated.\r\n\r\n// @conradoplg ",
      "createdAt": "2022-08-30T23:22:30Z",
      "updatedAt": "2022-09-21T12:18:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "341e4db482414d95e2dd9da0ade4bec4919fd3d2",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "identifier-scalar",
      "headRefOid": "48297f0b727a4eb110aac3eed59a39fc7d55a972",
      "closedAt": "2022-09-21T12:18:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> This seems like a lot of complexity for something that isn't really warranted. But if we're going to do it, I think we should lift the input size restriction for Scalar values and move it to the identifiers themselves. That is, we would say that an identifier is a Scalar no larger than 2^16-1 or whatever.\n\nThat is done, but I assume the text can be cleaned up further to make that clearer?\n\n![Screenshot_20220907-130739.png](https://user-images.githubusercontent.com/552961/188938802-f4c8f9ed-e697-4dba-bbaa-15de042b3f40.png)",
          "createdAt": "2022-09-07T17:11:09Z",
          "updatedAt": "2022-09-07T17:11:09Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Action item coming out of our meeting: rename `Scalar(x)` to `ConvertU16ToScalar(x)` or something with a more concise name. ",
          "createdAt": "2022-09-12T17:10:41Z",
          "updatedAt": "2022-09-12T17:10:41Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly what's the status of this PR?",
          "createdAt": "2022-09-16T14:11:30Z",
          "updatedAt": "2022-09-16T14:11:30Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> > This seems like a lot of complexity for something that isn't really warranted. But if we're going to do it, I think we should lift the input size restriction for Scalar values and move it to the identifiers themselves. That is, we would say that an identifier is a Scalar no larger than 2^16-1 or whatever.\r\n> \r\n> That is done, but I assume the text can be cleaned up further to make that clearer?\r\n> \r\n> ![Screenshot_20220907-130739.png](https://user-images.githubusercontent.com/552961/188938802-f4c8f9ed-e697-4dba-bbaa-15de042b3f40.png)\r\n\r\n@chris-wood ?",
          "createdAt": "2022-09-19T18:56:56Z",
          "updatedAt": "2022-09-19T18:56:56Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "New action item: rename `Scalar` to `ConvertIntToScalar(x)`",
          "createdAt": "2022-09-19T19:18:05Z",
          "updatedAt": "2022-09-19T19:18:05Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> Action item coming out of our meeting: rename `Scalar(x)` to `ConvertU16ToScalar(x)` or something with a more concise name.\r\n\r\nIf we are going to accept any integer value to scalar we can call this `ConvertIntToScalar(x)`",
          "createdAt": "2022-09-19T19:18:27Z",
          "updatedAt": "2022-09-19T19:18:27Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, a new type `Identifier` has been added that is a `Scalar` with the values [1, MAX_SIGNERS]. We define `G.ConvertIntToScalar(x)` to accept all unsigned ints and use  in several places including generating of secret shares (which is how `Identifier`s are often generated). ",
          "createdAt": "2022-09-20T05:06:34Z",
          "updatedAt": "2022-09-20T05:06:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85BH62d",
          "commit": {
            "abbreviatedOid": "1eb5074"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-31T22:54:57Z",
          "updatedAt": "2022-08-31T22:54:58Z",
          "comments": [
            {
              "originalPosition": 160,
              "body": "```suggestion\r\n  - Scalar(i): Implemented by converting two byte unsigned integer (uint16) `i` to  a 32-byte, \r\n  little-endian byte string, with the 2 least significant bytes set by the 2 little-endian \r\n  bytes of the uint16, and the remaining bytes set to zero (0), and parsing the 32-byte \r\n  buffer with DeserializeScalar()\r\n```",
              "createdAt": "2022-08-31T22:54:57Z",
              "updatedAt": "2022-08-31T22:54:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85BH6-E",
          "commit": {
            "abbreviatedOid": "5f5b615"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-31T22:55:46Z",
          "updatedAt": "2022-08-31T22:55:46Z",
          "comments": [
            {
              "originalPosition": 162,
              "body": "```suggestion\r\n  - Scalar(i): Implemented by converting two byte unsigned integer (uint16) `i` to  a 32-byte, \r\n    little-endian byte string, with the 2 least significant bytes set by the 2 little-endian \r\n    bytes of the uint16, and the remaining bytes set to zero (0), and parsing the 32-byte \r\n    buffer with DeserializeScalar()\r\n```",
              "createdAt": "2022-08-31T22:55:46Z",
              "updatedAt": "2022-08-31T22:55:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85BH7FD",
          "commit": {
            "abbreviatedOid": "57f0276"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-31T22:56:32Z",
          "updatedAt": "2022-08-31T22:56:33Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "```suggestion\r\n  - Scalar(i): Implemented by converting two byte unsigned integer (uint16) `i` to a 32-byte, \r\n```",
              "createdAt": "2022-08-31T22:56:32Z",
              "updatedAt": "2022-08-31T22:56:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85BH82n",
          "commit": {
            "abbreviatedOid": "31f4704"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-31T23:09:29Z",
          "updatedAt": "2022-08-31T23:09:30Z",
          "comments": [
            {
              "originalPosition": 171,
              "body": "```suggestion\r\n  - Scalar(i): Implemented by converting two byte unsigned integer (uint16) `i` to a 32-byte, \r\n    little-endian byte string, with the 2 least significant bytes set by the 2 little-endian \r\n    bytes of the uint16, and the remaining bytes set to zero (0), and parsing the 32-byte \r\n    buffer with DeserializeScalar()\r\n```",
              "createdAt": "2022-08-31T23:09:29Z",
              "updatedAt": "2022-08-31T23:09:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85BIAxK",
          "commit": {
            "abbreviatedOid": "1bb8446"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-31T23:40:19Z",
          "updatedAt": "2022-08-31T23:40:20Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "```suggestion\r\n  - Scalar(i): Implemented by converting two byte unsigned integer (uint16) `i` to a 48-byte, \r\n    little-endian byte string, with the 2 least significant bytes set by the 2 little-endian \r\n    bytes of the uint16, and the remaining bytes set to zero (0), and parsing the 48-byte \r\n    buffer with DeserializeScalar()\r\n```",
              "createdAt": "2022-08-31T23:40:20Z",
              "updatedAt": "2022-08-31T23:40:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85BLuIH",
          "commit": {
            "abbreviatedOid": "fb00823"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-01T15:18:53Z",
          "updatedAt": "2022-09-01T15:18:54Z",
          "comments": [
            {
              "originalPosition": 193,
              "body": "```suggestion\r\n  - Scalar(i): Implemented by converting two byte unsigned integer (uint16) `i` to a \r\n    32-byte, big-endian byte string, with the 2 least significant bytes set by the 2\r\n    big-endian bytes of the uint16, and the remaining bytes set to zero (0), and \r\n    parsing the 32-byte buffer with DeserializeScalar()\r\n```",
              "createdAt": "2022-09-01T15:18:53Z",
              "updatedAt": "2022-09-01T15:18:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85BLugt",
          "commit": {
            "abbreviatedOid": "87d9b3c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-01T15:19:45Z",
          "updatedAt": "2022-09-01T15:19:45Z",
          "comments": [
            {
              "originalPosition": 204,
              "body": "```suggestion\r\n  - Scalar(i): Implemented by converting two byte unsigned integer (uint16) `i` to a \r\n    32-byte, big-endian byte string, with the 2 least significant bytes set by the 2\r\n    big-endian bytes of the uint16, and the remaining bytes set to zero (0), and \r\n    parsing the 32-byte buffer with DeserializeScalar()\r\n```",
              "createdAt": "2022-09-01T15:19:45Z",
              "updatedAt": "2022-09-01T15:19:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85BLu5u",
          "commit": {
            "abbreviatedOid": "7875b47"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-01T15:20:37Z",
          "updatedAt": "2022-09-01T15:20:38Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\n- Scalar(x): Converts a two byte unsigned integer (uint16) `x` to the corresponding \r\n  Scalar value with the same numeric value. For example, Scalar(1) yields a Scalar \r\n  representing the value 1.\r\n```",
              "createdAt": "2022-09-01T15:20:38Z",
              "updatedAt": "2022-09-01T15:20:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85BMT3v",
          "commit": {
            "abbreviatedOid": "dfd3e48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This seems like a lot of complexity for something that isn't really warranted. But if we're going to do it, I think we should lift the input size restriction for Scalar values and move it to the identifiers themselves. That is, we would say that an identifier is a Scalar no larger than 2^16-1 or whatever.",
          "createdAt": "2022-09-01T16:49:07Z",
          "updatedAt": "2022-09-01T16:51:51Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Why is this restricted to two-byte integer inputs?",
              "createdAt": "2022-09-01T16:49:08Z",
              "updatedAt": "2022-09-01T16:51:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85BiFxr",
          "commit": {
            "abbreviatedOid": "dfd3e48"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-07T16:05:33Z",
          "updatedAt": "2022-09-07T16:05:34Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "I think `Scalar(x)` is supposed to convert identifiers to scalars, so the restriction is due to the identifier restriction",
              "createdAt": "2022-09-07T16:05:33Z",
              "updatedAt": "2022-09-07T16:05:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85BiaDE",
          "commit": {
            "abbreviatedOid": "dfd3e48"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-07T17:09:09Z",
          "updatedAt": "2022-09-07T17:09:10Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "In this PR we also explicitly define Identifiers as Scalars, not integers:\n\n![Screenshot_20220907-130739.png](https://user-images.githubusercontent.com/552961/188938469-027cbfc5-bb93-4551-adc0-1f4c80e5fe6a.png)",
              "createdAt": "2022-09-07T17:09:09Z",
              "updatedAt": "2022-09-07T17:09:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85B5bHC",
          "commit": {
            "abbreviatedOid": "dfd3e48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T10:55:25Z",
          "updatedAt": "2022-09-13T10:55:25Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "I think this should accept _any_ integer and convert it to a Scalar. There should be no restriction on the size of the input integer. The output Scalar is only a valid identifier if it's in the range [1, MAX_SIGNERS].",
              "createdAt": "2022-09-13T10:55:25Z",
              "updatedAt": "2022-09-13T10:55:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CWT4X",
          "commit": {
            "abbreviatedOid": "48297f0"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-20T05:03:02Z",
          "updatedAt": "2022-09-20T05:03:03Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "@chris-wood is this the right place/way to do this? We define the `Element` and `Scalar` types below in the context of group operations, so we haven't defined `Scalar` yet by this point in the doc",
              "createdAt": "2022-09-20T05:03:02Z",
              "updatedAt": "2022-09-20T05:03:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CWUEs",
          "commit": {
            "abbreviatedOid": "dfd3e48"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-20T05:04:25Z",
          "updatedAt": "2022-09-20T05:04:25Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Done",
              "createdAt": "2022-09-20T05:04:25Z",
              "updatedAt": "2022-09-20T05:04:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 248,
      "id": "PR_kwDOEpUZs84-lsNy",
      "title": "Bump actions/checkout from 3.0.1 to 3.0.2",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/248",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/checkout](https://github.com/actions/checkout) from 3.0.1 to 3.0.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/releases\">actions/checkout's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.2</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Add set-safe-directory input to allow customers to take control. by <a href=\"https://github.com/TingluoHuang\"><code>@\u200bTingluoHuang</code></a> in <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/770\">actions/checkout#770</a></li>\n<li>Prepare changelog for v3.0.2. by <a href=\"https://github.com/TingluoHuang\"><code>@\u200bTingluoHuang</code></a> in <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/777\">actions/checkout#777</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3...v3.0.2\">https://github.com/actions/checkout/compare/v3...v3.0.2</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/blob/main/CHANGELOG.md\">actions/checkout's changelog</a>.</em></p>\n<blockquote>\n<h2>v3.0.2</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/770\">Add input <code>set-safe-directory</code></a></li>\n</ul>\n<h2>v3.0.1</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/762\">Fixed an issue where checkout failed to run in container jobs due to the new git setting <code>safe.directory</code></a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/744\">Bumped various npm package versions</a></li>\n</ul>\n<h2>v3.0.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/689\">Update to node 16</a></li>\n</ul>\n<h2>v2.3.1</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></li>\n</ul>\n<h2>v2.3.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></li>\n</ul>\n<h2>v2.2.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/157\">Add submodule support</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/144\">Follow proxy settings</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/141\">Fix ref for pr closed event when a pr is merged</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/128\">Fix issue checking detached when git less than 2.22</a></li>\n</ul>\n<h2>v2.0.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/108\">Do not pass cred on command line</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/107\">Add input persist-credentials</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/104\">Fallback to REST API to download repo</a></li>\n</ul>\n<h2>v2 (beta)</h2>\n<ul>\n<li>Improved fetch performance\n<ul>\n<li>The default behavior now fetches only the SHA being checked-out</li>\n</ul>\n</li>\n<li>Script authenticated git commands</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/checkout/commit/2541b1294d2704b0964813337f33b291d3f8596b\"><code>2541b12</code></a> Prepare changelog for v3.0.2. (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/777\">#777</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/0ffe6f9c5599e73776da5b7f113e994bc0a76ede\"><code>0ffe6f9</code></a> Add set-safe-directory input to allow customers to take control. (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/770\">#770</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/checkout/compare/v3.0.1...v3.0.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/checkout&package-manager=github_actions&previous-version=3.0.1&new-version=3.0.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-09-08T11:41:31Z",
      "updatedAt": "2022-09-12T17:06:23Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "341e4db482414d95e2dd9da0ade4bec4919fd3d2",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/checkout-3.0.2",
      "headRefOid": "2226bdca2d050dc3577e4064a4ade9eaabd94d2c",
      "closedAt": "2022-09-12T17:06:14Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Postpone until the next version",
          "createdAt": "2022-09-12T17:06:14Z",
          "updatedAt": "2022-09-12T17:06:14Z"
        },
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
          "createdAt": "2022-09-12T17:06:16Z",
          "updatedAt": "2022-09-12T17:06:16Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 267,
      "id": "PR_kwDOEpUZs84-zV6P",
      "title": "Apply edits from Thomas' review",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/267",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See [the review](https://mailarchive.ietf.org/arch/msg/crypto-panel/bPyYzwtHlCj00g8YF1tjj-iYP2c/) for details. I filed issues for all issues that were not explicitly addressed in this PR.",
      "createdAt": "2022-09-12T17:05:45Z",
      "updatedAt": "2022-09-13T20:28:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "341e4db482414d95e2dd9da0ade4bec4919fd3d2",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/pornin-edits",
      "headRefOid": "209579758d7ea0acc280b65bad8c8727436e1fca",
      "closedAt": "2022-09-13T20:27:56Z",
      "mergedAt": "2022-09-13T20:27:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "7f5d3f7781df763b4acd72c2a41e27e418ff86b7"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly can you please review?",
          "createdAt": "2022-09-13T20:11:07Z",
          "updatedAt": "2022-09-13T20:11:07Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood some small comments",
          "createdAt": "2022-09-13T20:25:38Z",
          "updatedAt": "2022-09-13T20:25:38Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85B8PFC",
          "commit": {
            "abbreviatedOid": "44142a1"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good! ",
          "createdAt": "2022-09-13T18:57:16Z",
          "updatedAt": "2022-09-13T18:57:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85B8jiV",
          "commit": {
            "abbreviatedOid": "44142a1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T20:12:16Z",
          "updatedAt": "2022-09-13T20:12:16Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "The first line says \"involves each signer generating nonces\", further lines say \"a nonce is a pair\". I still always think of two nonces, one hiding and one binding, and their respective commitments, for each signer, for each signature\r\n\r\n// @chelseakomlo ",
              "createdAt": "2022-09-13T20:12:16Z",
              "updatedAt": "2022-09-13T20:12:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85B8mW_",
          "commit": {
            "abbreviatedOid": "44142a1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T20:22:27Z",
          "updatedAt": "2022-09-13T20:22:27Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "The commitments should also not be reused, right?",
              "createdAt": "2022-09-13T20:22:27Z",
              "updatedAt": "2022-09-13T20:22:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85B8moh",
          "commit": {
            "abbreviatedOid": "44142a1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T20:23:31Z",
          "updatedAt": "2022-09-13T20:23:33Z",
          "comments": [
            {
              "originalPosition": 241,
              "body": "```suggestion\r\nIsis Lovecruft,\r\nAlden Torres,\r\nT. Wilson-Brown, \r\nand Conrado Gouvea\r\nfor their inputs and contributions.\r\n```",
              "createdAt": "2022-09-13T20:23:32Z",
              "updatedAt": "2022-09-13T20:23:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85B8mxx",
          "commit": {
            "abbreviatedOid": "44142a1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T20:24:03Z",
          "updatedAt": "2022-09-13T20:24:04Z",
          "comments": [
            {
              "originalPosition": 250,
              "body": "```suggestion\r\n  - secret_key, a group secret, a Scalar, that MUST be derived from at least Ns bytes of entropy\r\n```",
              "createdAt": "2022-09-13T20:24:03Z",
              "updatedAt": "2022-09-13T20:24:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85B8nkn",
          "commit": {
            "abbreviatedOid": "44142a1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T20:27:10Z",
          "updatedAt": "2022-09-13T20:27:10Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "Right, but that's implicit from the requirement that nonces must not be reused, so I don't think we need to explicitly say it.",
              "createdAt": "2022-09-13T20:27:10Z",
              "updatedAt": "2022-09-13T20:27:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85B8npT",
          "commit": {
            "abbreviatedOid": "2095797"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T20:27:25Z",
          "updatedAt": "2022-09-13T20:27:25Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "(Plus this isn't new text.)",
              "createdAt": "2022-09-13T20:27:25Z",
              "updatedAt": "2022-09-13T20:27:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85B8nv2",
          "commit": {
            "abbreviatedOid": "2095797"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T20:27:47Z",
          "updatedAt": "2022-09-13T20:27:47Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "I'm going to merge without a change here now. @chelseakomlo can submit a PR to address on top if she thinks it should change.",
              "createdAt": "2022-09-13T20:27:47Z",
              "updatedAt": "2022-09-13T20:27:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85B8n76",
          "commit": {
            "abbreviatedOid": "44142a1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T20:28:29Z",
          "updatedAt": "2022-09-13T20:28:29Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "ok",
              "createdAt": "2022-09-13T20:28:29Z",
              "updatedAt": "2022-09-13T20:28:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 271,
      "id": "PR_kwDOEpUZs84-42vL",
      "title": "Add thomas's implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/271",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #270",
      "createdAt": "2022-09-13T19:18:32Z",
      "updatedAt": "2022-09-13T20:29:11Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "39aea242cadb656ae8bd10a065a7e6ef506430fc",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "implementation-add",
      "headRefOid": "87d80a3dcbf45ef347a43155e3efe3293524d43c",
      "closedAt": "2022-09-13T20:29:08Z",
      "mergedAt": "2022-09-13T20:29:08Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "c1142ae1886c6344009fbfcda8d0c7c8b0fbddad"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85B8gao",
          "commit": {
            "abbreviatedOid": "87d80a3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-13T20:00:31Z",
          "updatedAt": "2022-09-13T20:00:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 272,
      "id": "PR_kwDOEpUZs84-46wH",
      "title": "Updated reference",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/272",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #263",
      "createdAt": "2022-09-13T19:37:16Z",
      "updatedAt": "2022-09-13T20:29:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "39aea242cadb656ae8bd10a065a7e6ef506430fc",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "references",
      "headRefOid": "fa59738c6cb23e7bdf6f5ba717afd8151730582e",
      "closedAt": "2022-09-13T20:28:58Z",
      "mergedAt": "2022-09-13T20:28:58Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "2cb1cbdcd3ab38d1df9f3da0607dfe322b9d9ae0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85B8gWV",
          "commit": {
            "abbreviatedOid": "fa59738"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-13T20:00:16Z",
          "updatedAt": "2022-09-13T20:00:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 273,
      "id": "PR_kwDOEpUZs84-4-Tk",
      "title": "Additional language around robustness",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/273",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses confusion around robustness of the signing set in #258",
      "createdAt": "2022-09-13T19:53:05Z",
      "updatedAt": "2022-09-13T20:28:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "39aea242cadb656ae8bd10a065a7e6ef506430fc",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "excluding-signers",
      "headRefOid": "99074fbdfd1666fd524de3f025bd1e6c89afe6b8",
      "closedAt": "2022-09-13T20:28:48Z",
      "mergedAt": "2022-09-13T20:28:48Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "16bf6eba67e73512c2848c096181970300bfdf4b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85B8gRF",
          "commit": {
            "abbreviatedOid": "99074fb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-13T19:59:59Z",
          "updatedAt": "2022-09-13T19:59:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85B8oDI",
          "commit": {
            "abbreviatedOid": "99074fb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-13T20:28:53Z",
          "updatedAt": "2022-09-13T20:28:53Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "We haven't introduced `R` and `z` as the signature yet.",
              "createdAt": "2022-09-13T20:28:53Z",
              "updatedAt": "2022-09-13T20:28:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 274,
      "id": "PR_kwDOEpUZs84_GpAa",
      "title": "Include nonce generation randomness in test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/274",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #265.\r\n\r\ncc @pornin",
      "createdAt": "2022-09-16T14:23:49Z",
      "updatedAt": "2022-09-16T14:24:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c1142ae1886c6344009fbfcda8d0c7c8b0fbddad",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/specify-all-randomness",
      "headRefOid": "2d3668a480c637f447e85700a0c65adabc86183f",
      "closedAt": "2022-09-16T14:24:00Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 275,
      "id": "PR_kwDOEpUZs84_GpKn",
      "title": "Add text clarifying input message details and constraints",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/275",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #265.\r\n\r\ncc @pornin",
      "createdAt": "2022-09-16T14:24:25Z",
      "updatedAt": "2022-09-22T18:29:25Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ec4effa9137973b31f5775ed4ad4238536874324",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/input-msg-details",
      "headRefOid": "be1f280ef2b3b70ef505098d42bfcd7e17528fd9",
      "closedAt": "2022-09-22T18:29:25Z",
      "mergedAt": "2022-09-22T18:29:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f2a39d76d7b32de0f208612329098e794acf42b9"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly can you please approve or request changes as necessary? @chelseakomlo, can you please also take a look?",
          "createdAt": "2022-09-21T13:08:45Z",
          "updatedAt": "2022-09-21T13:08:45Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> @dconnolly can you please approve or request changes as necessary? @chelseakomlo, can you please also take a look?\n\nreplied but yeah looking for feedback from @chelseakomlo ",
          "createdAt": "2022-09-21T16:05:19Z",
          "updatedAt": "2022-09-21T16:05:19Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Good with me, not sure if you wanted more eyes before merging",
          "createdAt": "2022-09-22T18:12:26Z",
          "updatedAt": "2022-09-22T18:12:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85CVP7h",
          "commit": {
            "abbreviatedOid": "ee068ae"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-19T20:51:30Z",
          "updatedAt": "2022-09-19T20:51:30Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Any reason to not recommend using H4 explicitly to pre-hash? ",
              "createdAt": "2022-09-19T20:51:30Z",
              "updatedAt": "2022-09-19T20:51:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CVQBN",
          "commit": {
            "abbreviatedOid": "ee068ae"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "A q: https://github.com/cfrg/draft-irtf-cfrg-frost/pull/275/files#r974679456",
          "createdAt": "2022-09-19T20:51:49Z",
          "updatedAt": "2022-09-19T20:51:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85CVrz9",
          "commit": {
            "abbreviatedOid": "ee068ae"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-19T23:25:48Z",
          "updatedAt": "2022-09-19T23:25:48Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Yeah, it doesn't seem safe to repurpose the internal random oracles for things outside of the protocol. ",
              "createdAt": "2022-09-19T23:25:48Z",
              "updatedAt": "2022-09-19T23:25:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CgIoQ",
          "commit": {
            "abbreviatedOid": "ee068ae"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-21T16:04:43Z",
          "updatedAt": "2022-09-21T16:04:43Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "If we can't/shouldn't 'just' use H4 for prehashing as well we should explain how to use H in a 'manner similar to H4' that is not just 'the same' as H4. Does this mean a different domain separator? If that's it we can say that but I am uncertain. @chelseakomlo does prehashing need to be domain separated from regular message hashing in the security model? I have not dug into this much",
              "createdAt": "2022-09-21T16:04:43Z",
              "updatedAt": "2022-09-21T16:04:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CgRWX",
          "commit": {
            "abbreviatedOid": "ee068ae"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-21T16:28:01Z",
          "updatedAt": "2022-09-21T16:28:02Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Yeah, I think it would need a different domain separator to be different from H4.",
              "createdAt": "2022-09-21T16:28:01Z",
              "updatedAt": "2022-09-21T16:28:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CgWML",
          "commit": {
            "abbreviatedOid": "ee068ae"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-21T16:42:48Z",
          "updatedAt": "2022-09-21T16:42:48Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "RFC 8032 does that: for regular Ed25519 it's H(msg), for prehashed is H(prefix + hash). For Ed448 it's H(prefix + hash) with different prefixes for prehashed and non-prehashed.",
              "createdAt": "2022-09-21T16:42:48Z",
              "updatedAt": "2022-09-21T16:42:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CmEh4",
          "commit": {
            "abbreviatedOid": "8972565"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-22T15:33:24Z",
          "updatedAt": "2022-09-22T15:33:24Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I added an example that describes how this pre-hash might be constructed. Please take a look, @dconnolly.",
              "createdAt": "2022-09-22T15:33:24Z",
              "updatedAt": "2022-09-22T15:33:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Cm4Pz",
          "commit": {
            "abbreviatedOid": "be1f280"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm! thank you :D",
          "createdAt": "2022-09-22T18:11:41Z",
          "updatedAt": "2022-09-22T18:11:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85Cm8xX",
          "commit": {
            "abbreviatedOid": "be1f280"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good",
          "createdAt": "2022-09-22T18:28:01Z",
          "updatedAt": "2022-09-22T18:28:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 276,
      "id": "PR_kwDOEpUZs84_Gq8q",
      "title": "Note that rejection sampling should be done in constant time",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/276",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I chose not to make special accommodations for curves whose order is close to a power of two. It just seems like more words for something that's a pretty minimal optimization.\r\n\r\nCloses #266.\r\n\r\ncc @pornin",
      "createdAt": "2022-09-16T14:29:39Z",
      "updatedAt": "2022-09-20T12:20:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c1142ae1886c6344009fbfcda8d0c7c8b0fbddad",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/constant-time-rejection-sampling",
      "headRefOid": "f1000b5d76bcaa599f5349b96eb9c80ec620f58d",
      "closedAt": "2022-09-20T12:20:08Z",
      "mergedAt": "2022-09-20T12:20:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9156a9108bbb2908ab944ed8ab8a8cb95e89cee6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85CU46R",
          "commit": {
            "abbreviatedOid": "f1000b5"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-09-19T19:35:23Z",
          "updatedAt": "2022-09-19T19:35:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85CVLtQ",
          "commit": {
            "abbreviatedOid": "f1000b5"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-19T20:35:06Z",
          "updatedAt": "2022-09-19T20:35:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 277,
      "id": "PR_kwDOEpUZs84_IY-1",
      "title": "Include nonce_generate randomness in test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/277",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #249 \r\n\r\ncc @pornin",
      "createdAt": "2022-09-16T22:47:03Z",
      "updatedAt": "2022-09-21T16:08:24Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "07df2c194780377e68e730b3bbbd87a8595125a9",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/specify-all-randomness",
      "headRefOid": "2e00cd6781ce4ede52e4453f57ba20aac6d0e2fa",
      "closedAt": "2022-09-21T16:08:24Z",
      "mergedAt": "2022-09-21T16:08:24Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e7bb0bab69e432dd404511a4e9a09ddca0c6014a"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly @chelseakomlo, please review! Also, @kayabaNerve, could you please take a look as well?",
          "createdAt": "2022-09-20T13:08:28Z",
          "updatedAt": "2022-09-20T13:08:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85CZEaV",
          "commit": {
            "abbreviatedOid": "9ad7acd"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83d\udc4d",
          "createdAt": "2022-09-20T13:52:23Z",
          "updatedAt": "2022-09-20T13:52:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 278,
      "id": "PR_kwDOEpUZs84_NjqR",
      "title": "Remove variable names before they are referenced",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/278",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses comment about referencing variables before they are defined in #273 @chris-wood ",
      "createdAt": "2022-09-19T16:10:41Z",
      "updatedAt": "2022-09-19T20:35:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c1142ae1886c6344009fbfcda8d0c7c8b0fbddad",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "define-variables",
      "headRefOid": "36b5cffb90bf3d220cbd65b307ee0be5d696f043",
      "closedAt": "2022-09-19T20:35:49Z",
      "mergedAt": "2022-09-19T20:35:49Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "72489c4fe5544ccba5839557a5358a8ace5c3fb7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85CVLcg",
          "commit": {
            "abbreviatedOid": "36b5cff"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-19T20:34:03Z",
          "updatedAt": "2022-09-19T20:34:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 279,
      "id": "PR_kwDOEpUZs84_NtVV",
      "title": "Reject identity from ristretto255",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/279",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses comment from @pornin in #250",
      "createdAt": "2022-09-19T16:46:16Z",
      "updatedAt": "2022-09-20T12:35:12Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "0a046f34020372500e69c9a5d8142af959593109",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "ristretto-255-reject",
      "headRefOid": "d35dce2d0d80e93b1114adf3802506046e9b4191",
      "closedAt": "2022-09-20T12:35:12Z",
      "mergedAt": "2022-09-20T12:35:12Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "984d3ee13d883a436414c0f2bca5a3e5aad2cb21"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85CUKSR",
          "commit": {
            "abbreviatedOid": "7ff2ab9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "LGTM! We also need to add this check to the reference implementation. If that's done in a separate PR let's open an issue and then merge this.",
          "createdAt": "2022-09-19T16:57:02Z",
          "updatedAt": "2022-09-19T16:57:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85CVF0e",
          "commit": {
            "abbreviatedOid": "7ff2ab9"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83d\udc4d",
          "createdAt": "2022-09-19T20:12:14Z",
          "updatedAt": "2022-09-19T20:12:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 280,
      "id": "PR_kwDOEpUZs84_Nwis",
      "title": "High level comment about relation between secret key and secret key shares",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/280",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses comment by @pornin in #257 by having a better pointer/explanation of an algorithm which explicitly defines this relationship.",
      "createdAt": "2022-09-19T17:00:10Z",
      "updatedAt": "2022-09-20T12:23:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c1142ae1886c6344009fbfcda8d0c7c8b0fbddad",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "key-relation",
      "headRefOid": "025b7f8c5a60f8e6e81408a2eb3a0c5114af3f8c",
      "closedAt": "2022-09-20T12:23:07Z",
      "mergedAt": "2022-09-20T12:23:07Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "124007e1b1e431e813186362f4adcce8388db871"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85CUiln",
          "commit": {
            "abbreviatedOid": "191846e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "LGTM pending some suggestions and one question.",
          "createdAt": "2022-09-19T18:16:42Z",
          "updatedAt": "2022-09-19T18:21:44Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\nalgorithm, defined in {{dep-shamir}}. Note that in the setting of threshold signatures, this algorithm is not needed, as signers\n```\n",
              "createdAt": "2022-09-19T18:16:42Z",
              "updatedAt": "2022-09-19T18:21:44Z"
            },
            {
              "originalPosition": 6,
              "body": "```suggestion\nshares of s, denoted `s_i` for `i = 0, ..., MAX_SIGNERS`, to be sent to all `MAX_SIGNERS` participants.\n```\n",
              "createdAt": "2022-09-19T18:18:19Z",
              "updatedAt": "2022-09-19T18:21:44Z"
            },
            {
              "originalPosition": 8,
              "body": "```suggestion\nbetween the secret key `s` and the `MAX_SIGNER` secret shares is formalized in the `secret_share_combine(shares)`\n```\n",
              "createdAt": "2022-09-19T18:20:27Z",
              "updatedAt": "2022-09-19T18:21:44Z"
            },
            {
              "originalPosition": 10,
              "body": "I get what this is trying to say, but it seems strange because this document exists in the threshold setting. Maybe this should say in settings without a trusted dealer instead?",
              "createdAt": "2022-09-19T18:21:27Z",
              "updatedAt": "2022-09-19T18:21:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CVE5p",
          "commit": {
            "abbreviatedOid": "191846e"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-19T20:09:22Z",
          "updatedAt": "2022-09-19T20:09:22Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I can just remove the \"Note that....\" entirely? I mainly wanted to say that we define `secret_share_combine` as a tool for understanding the mathematical structure, and it is not intended to actually be used anywhere in the draft. If you have a better way to say that, definitely open to suggestions. ",
              "createdAt": "2022-09-19T20:09:22Z",
              "updatedAt": "2022-09-19T20:09:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CYdp1",
          "commit": {
            "abbreviatedOid": "5f08018"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-20T12:21:27Z",
          "updatedAt": "2022-09-20T12:21:27Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Yeah, I might just remove that sentence.",
              "createdAt": "2022-09-20T12:21:27Z",
              "updatedAt": "2022-09-20T12:21:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CYdwe",
          "commit": {
            "abbreviatedOid": "5f08018"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-20T12:21:44Z",
          "updatedAt": "2022-09-20T12:21:46Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nalgorithm, defined in {{dep-shamir}}.\r\n```",
              "createdAt": "2022-09-20T12:21:45Z",
              "updatedAt": "2022-09-20T12:21:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 281,
      "id": "PR_kwDOEpUZs84_OLfq",
      "title": "Specify error when interpolating polynomial with duplicate points",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/281",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses point by @pornin in #255. Also moves the algorithm `polynomial_interpolation` to the appendix, as it is only used by `secret_share_combine`, which is also in the appendix. ",
      "createdAt": "2022-09-19T18:47:24Z",
      "updatedAt": "2022-09-20T12:36:35Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c1142ae1886c6344009fbfcda8d0c7c8b0fbddad",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "poly-interp",
      "headRefOid": "aabe7c8a10bab133ea7cdff243bce6c981637674",
      "closedAt": "2022-09-20T12:36:34Z",
      "mergedAt": "2022-09-20T12:36:34Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a3534a6e42fd4d5cd18c1e860e97156f5cad8e60"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85CU_mq",
          "commit": {
            "abbreviatedOid": "aabe7c8"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-19T20:00:24Z",
          "updatedAt": "2022-09-19T20:00:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85CYjPw",
          "commit": {
            "abbreviatedOid": "aabe7c8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-20T12:36:29Z",
          "updatedAt": "2022-09-20T12:36:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 282,
      "id": "PR_kwDOEpUZs84_SHOH",
      "title": "More clearly specify FROST configuration",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/282",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This includes identifier allocation and the corresponding constraints. It punts on configuration generation and the process for generating signing key shares.\r\n\r\nCloses #252.\r\nCloses #247.\r\nCloses #242.",
      "createdAt": "2022-09-20T14:56:58Z",
      "updatedAt": "2022-09-21T12:18:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "a3534a6e42fd4d5cd18c1e860e97156f5cad8e60",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/configuration",
      "headRefOid": "10a6815dd5a2206c1c6d6e6326f2cf1ef5f79104",
      "closedAt": "2022-09-21T12:18:53Z",
      "mergedAt": "2022-09-21T12:18:52Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "07df2c194780377e68e730b3bbbd87a8595125a9"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed offline. I'll merge this as-is and then file a new PR to address the signer/participant naming issue.",
          "createdAt": "2022-09-21T12:14:43Z",
          "updatedAt": "2022-09-21T12:14:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Cate6",
          "commit": {
            "abbreviatedOid": "78eb8cb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-20T18:30:31Z",
          "updatedAt": "2022-09-20T18:30:31Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Participant == signer in a lot of places\r\n```suggestion\r\nkey-recovery attack that is possible when even only one participating signer is malicious.\r\n```",
              "createdAt": "2022-09-20T18:30:31Z",
              "updatedAt": "2022-09-20T18:30:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CatkD",
          "commit": {
            "abbreviatedOid": "78eb8cb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-20T18:30:46Z",
          "updatedAt": "2022-09-20T18:30:46Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nthat an adversary can corrupt strictly fewer than a threshold number of participating signer.\r\n```",
              "createdAt": "2022-09-20T18:30:46Z",
              "updatedAt": "2022-09-20T18:30:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CauBN",
          "commit": {
            "abbreviatedOid": "78eb8cb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-20T18:32:21Z",
          "updatedAt": "2022-09-20T18:32:22Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-09-20T18:32:21Z",
              "updatedAt": "2022-09-20T18:32:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CauR4",
          "commit": {
            "abbreviatedOid": "78eb8cb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-20T18:33:15Z",
          "updatedAt": "2022-09-20T18:33:16Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "The type of the signer identifier i in the tuples is not specified",
              "createdAt": "2022-09-20T18:33:15Z",
              "updatedAt": "2022-09-20T18:33:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CavBE",
          "commit": {
            "abbreviatedOid": "78eb8cb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-20T18:35:54Z",
          "updatedAt": "2022-09-20T18:35:54Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "Not changed in this PR but the input `i` is described as an `Identifier` but that proper type is not defined in this version of the document",
              "createdAt": "2022-09-20T18:35:54Z",
              "updatedAt": "2022-09-20T18:35:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Ca5sY",
          "commit": {
            "abbreviatedOid": "78eb8cb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-20T19:12:51Z",
          "updatedAt": "2022-09-20T19:12:52Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-09-20T19:12:51Z",
              "updatedAt": "2022-09-20T19:12:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CbMCY",
          "commit": {
            "abbreviatedOid": "78eb8cb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Please back out the renaming of everything to 'signers' then it looks ok",
          "createdAt": "2022-09-20T20:17:58Z",
          "updatedAt": "2022-09-20T20:17:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85CelO5",
          "commit": {
            "abbreviatedOid": "78eb8cb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-21T12:18:10Z",
          "updatedAt": "2022-09-21T12:18:11Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "It's a signer identifier, which is defined to be a Scalar, no?",
              "createdAt": "2022-09-21T12:18:10Z",
              "updatedAt": "2022-09-21T12:18:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 285,
      "id": "PR_kwDOEpUZs84_XXfu",
      "title": "Converge on \"participant\"",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/285",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #284.",
      "createdAt": "2022-09-21T16:27:13Z",
      "updatedAt": "2022-09-21T18:45:04Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e7bb0bab69e432dd404511a4e9a09ddca0c6014a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/unify-on-participant",
      "headRefOid": "3e5affb57ea1521dcf424a060204fd1a7920b771",
      "closedAt": "2022-09-21T18:45:03Z",
      "mergedAt": "2022-09-21T18:45:03Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ec4effa9137973b31f5775ed4ad4238536874324"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly are more changes requested, or is your review still in progress?",
          "createdAt": "2022-09-21T17:04:19Z",
          "updatedAt": "2022-09-21T17:04:30Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> @dconnolly are more changes requested, or is your review still in progress?\n\nStill in progress, mobile gh is annoying ",
          "createdAt": "2022-09-21T17:14:14Z",
          "updatedAt": "2022-09-21T17:14:14Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @dconnolly -- those were good changes. I merged them.",
          "createdAt": "2022-09-21T18:44:52Z",
          "updatedAt": "2022-09-21T18:44:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85CgRh3",
          "commit": {
            "abbreviatedOid": "81446d8"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-21T16:28:36Z",
          "updatedAt": "2022-09-21T16:28:48Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\nSpecifically, this optimization removes the guarantee that the set of signer participants that started\n```\n",
              "createdAt": "2022-09-21T16:28:36Z",
              "updatedAt": "2022-09-21T16:28:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Cg1zX",
          "commit": {
            "abbreviatedOid": "39bce63"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Some minor suggested tweaks but otherwise looks good, can take or leave them but wanted eyes before just applying them",
          "createdAt": "2022-09-21T18:24:52Z",
          "updatedAt": "2022-09-21T18:31:19Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\nrequire cooperation among a threshold number of signing participants each holding a share\n```\n",
              "createdAt": "2022-09-21T18:24:52Z",
              "updatedAt": "2022-09-21T18:31:02Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\nfrom linear in the number of signing participants to constant, this draft does not specify that optimization\n```\n",
              "createdAt": "2022-09-21T18:25:05Z",
              "updatedAt": "2022-09-21T18:31:02Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\nround one of the protocol is the same set of signing participants that produced the signature output by\n```\n",
              "createdAt": "2022-09-21T18:25:17Z",
              "updatedAt": "2022-09-21T18:31:02Z"
            },
            {
              "originalPosition": 46,
              "body": "```suggestion\nsigning participant.\n```\n",
              "createdAt": "2022-09-21T18:25:32Z",
              "updatedAt": "2022-09-21T18:31:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 286,
      "id": "PR_kwDOEpUZs84_c2wT",
      "title": "Remove unused variables L and Nh",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/286",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Partly closes #259.",
      "createdAt": "2022-09-22T18:45:56Z",
      "updatedAt": "2022-09-22T19:53:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "a7fb046f22490a7c6e1014007a1e10a947089784",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/remove-unnused-variables",
      "headRefOid": "348504068588a770adb21ac86acb430ef8a31f62",
      "closedAt": "2022-09-22T19:53:11Z",
      "mergedAt": "2022-09-22T19:53:11Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "b1ab4392ad83ab9c63be8534c2690d33333dd224"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85CnTwo",
          "commit": {
            "abbreviatedOid": "3485040"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-22T19:53:05Z",
          "updatedAt": "2022-09-22T19:53:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 287,
      "id": "PR_kwDOEpUZs84_c4uV",
      "title": "Specify some lengths and bits",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/287",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Partly addresses #262 and and #259.",
      "createdAt": "2022-09-22T18:54:14Z",
      "updatedAt": "2022-09-22T22:45:10Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b1ab4392ad83ab9c63be8534c2690d33333dd224",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/specify-some-lengths-and-bits",
      "headRefOid": "00c2466adc60a5a95709636420e12f007ca19e49",
      "closedAt": "2022-09-22T22:45:10Z",
      "mergedAt": "2022-09-22T22:45:10Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3e5e8edde5e91975be5992e1dd9b647720bdd1c8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85CnY76",
          "commit": {
            "abbreviatedOid": "54f9024"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm but maybe @conradoplg may also give it a look-see",
          "createdAt": "2022-09-22T20:12:59Z",
          "updatedAt": "2022-09-22T20:12:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85Cna9V",
          "commit": {
            "abbreviatedOid": "54f9024"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-22T20:20:58Z",
          "updatedAt": "2022-09-22T20:21:04Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'm not sure if this is needed, the top three bits will always be zero due to how Scalar is defined. It doesn't hurt though, it's up to you.",
              "createdAt": "2022-09-22T20:20:58Z",
              "updatedAt": "2022-09-22T20:21:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Cn6di",
          "commit": {
            "abbreviatedOid": "54f9024"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-22T22:45:05Z",
          "updatedAt": "2022-09-22T22:45:05Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "It felt like @pornin's comment suggested we mention it. I feel like it can't hurt, so I'm inclined to keep it for now.",
              "createdAt": "2022-09-22T22:45:05Z",
              "updatedAt": "2022-09-22T22:45:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 288,
      "id": "PR_kwDOEpUZs84_gFKT",
      "title": "return public key in trusted_dealer_keygen",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/288",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Also fixed an inconsistent parameter name in a nearby function\r\n\r\nCloses https://github.com/cfrg/draft-irtf-cfrg-frost/issues/164",
      "createdAt": "2022-09-23T14:02:10Z",
      "updatedAt": "2022-09-23T14:29:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3e5e8edde5e91975be5992e1dd9b647720bdd1c8",
      "headRepository": "conradoplg/draft-irtf-cfrg-frost",
      "headRefName": "return-pk",
      "headRefOid": "c558209f7f4b08152ddbe6eb1f2c01b679af1d42",
      "closedAt": "2022-09-23T14:29:19Z",
      "mergedAt": "2022-09-23T14:29:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "af62d33795f45dbad36c561f84d909bb2ec907ce"
      },
      "comments": [
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "> Thanks! Could you please also update the reference implementation to match?\r\n\r\nOops, sure, done in c558209",
          "createdAt": "2022-09-23T14:20:51Z",
          "updatedAt": "2022-09-23T14:20:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Cq3kr",
          "commit": {
            "abbreviatedOid": "513f9a3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks! Could you please also update the reference implementation to match?",
          "createdAt": "2022-09-23T14:08:06Z",
          "updatedAt": "2022-09-23T14:08:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85CrAPh",
          "commit": {
            "abbreviatedOid": "c558209"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-23T14:29:15Z",
          "updatedAt": "2022-09-23T14:29:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 289,
      "id": "PR_kwDOEpUZs84_hM1H",
      "title": "Change secret_share_shard to receive coefficients as input",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/289",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/cfrg/draft-irtf-cfrg-frost/issues/173\r\n\r\nThings I'm not sure about:\r\n\r\n- Should `coefficients` in the test vectors include the secret key or not? (It currently doesn't)\r\n- In the sage code, the `coeffs=None` in `trusted_dealer_keygen` allows passing it as a parameter while the spec does not allow that, the goal is to both allow generating the test vector but also make the sage function similar to the spec function. Does this approach make sense?",
      "createdAt": "2022-09-23T19:13:08Z",
      "updatedAt": "2022-09-27T11:51:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "af62d33795f45dbad36c561f84d909bb2ec907ce",
      "headRepository": "conradoplg/draft-irtf-cfrg-frost",
      "headRefName": "secret-share-shard-randomness",
      "headRefOid": "5b6af985ff91fd98c8f192f26f3fed205f405136",
      "closedAt": "2022-09-27T11:51:51Z",
      "mergedAt": "2022-09-27T11:51:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "70ad03357c9247f88658ad723cd159a5cb7be942"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@conradoplg this looks good to me. Let's update the Sage code and then mark this as ready for review. Thanks!",
          "createdAt": "2022-09-24T13:20:24Z",
          "updatedAt": "2022-09-24T13:20:24Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "> @conradoplg this looks good to me. Let's update the Sage code and then mark this as ready for review. Thanks!\r\n\r\nDone! The PR description was also updated.",
          "createdAt": "2022-09-26T18:11:19Z",
          "updatedAt": "2022-09-26T18:11:19Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @conradoplg  -- I'd also include the secret key in the test vectors at this point so `secret_share_shard` can be tested in full. I think we'd also want to put these test vectors in the document, which would require changes to the formatting script. Do you want to include those changes in this PR, or would you prefer if I did them separately?",
          "createdAt": "2022-09-26T19:51:21Z",
          "updatedAt": "2022-09-26T19:51:21Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood I'll give it a shot.\r\n\r\nTo be clear the secret key is already in the test vector, in `group_secret_key`, I'm wondering if  `coefficients` should repeat it or not.",
          "createdAt": "2022-09-26T19:55:01Z",
          "updatedAt": "2022-09-26T19:55:01Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> To be clear the secret key is already in the test vector, in group_secret_key, I'm wondering if coefficients should repeat it or not.\r\n\r\n\ud83e\udd26 Of course. Sorry. I don't think it should repeat the secret.",
          "createdAt": "2022-09-26T20:08:10Z",
          "updatedAt": "2022-09-26T20:08:10Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> > To be clear the secret key is already in the test vector, in group_secret_key, I'm wondering if coefficients should repeat it or not.\r\n> \r\n> \ud83e\udd26 Of course. Sorry. I don't think it should repeat the secret.\r\n\r\nA little language to make this clear:\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/pull/289/files#r980473290",
          "createdAt": "2022-09-26T20:30:56Z",
          "updatedAt": "2022-09-26T20:30:56Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood @dconnolly added the test vector to the formatting script and the spec",
          "createdAt": "2022-09-26T22:15:10Z",
          "updatedAt": "2022-09-26T22:15:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Czu6J",
          "commit": {
            "abbreviatedOid": "af81ffe"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-26T20:25:54Z",
          "updatedAt": "2022-09-26T20:25:55Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n  - coefficients, an array of size MIN_PARTICIPANTS - 1 with randomly generated\r\n    Scalars\r\n```",
              "createdAt": "2022-09-26T20:25:54Z",
              "updatedAt": "2022-09-26T20:25:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CzyBb",
          "commit": {
            "abbreviatedOid": "9ca77c6"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-26T20:35:30Z",
          "updatedAt": "2022-09-26T20:35:31Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n  - coefficients, an array of size MIN_PARTICIPANTS - 1 with randomly generated\r\n    Scalars, not including the 0th coefficient of the polynomial\r\n```",
              "createdAt": "2022-09-26T20:35:30Z",
              "updatedAt": "2022-09-26T20:35:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CzyTT",
          "commit": {
            "abbreviatedOid": "248a7e9"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-26T20:36:26Z",
          "updatedAt": "2022-09-26T20:36:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85C3d6K",
          "commit": {
            "abbreviatedOid": "5b6af98"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I think we need to make one small tweak to the formatter, but I'll do that in a followup change.",
          "createdAt": "2022-09-27T11:51:47Z",
          "updatedAt": "2022-09-27T11:51:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 290,
      "id": "PR_kwDOEpUZs84_hM_-",
      "title": "Cite faster subgroup membership check",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/290",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #269 by @pornin ",
      "createdAt": "2022-09-23T19:13:33Z",
      "updatedAt": "2022-09-29T02:50:22Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "af62d33795f45dbad36c561f84d909bb2ec907ce",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "faster-subgroup-check",
      "headRefOid": "eaf3152eec848a8904adaeb0431dd381243e0e45",
      "closedAt": "2022-09-26T20:17:32Z",
      "mergedAt": "2022-09-26T20:17:32Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "38aa5e53b79c8930a373e71b6cdae24f64e7fdb7"
      },
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry to comment on a merged PR.\r\n\r\n> Signature verification is as specified in {{Section 5.1.7 of RFC8032}} with the\r\nconstraint that implementations MUST check the group equation [8][S]B = [8]R + [8][k]A'.\r\nThe alternative check [S]B = R + [k]A' is not safe or interoperable in practice.\r\nNote that optimizations for this check exist; see {{Pornin22}}.\r\n\r\nThis doesn't seem properly written. This describes a cleared torsion signature check. It doesn't describe a prime order signature check. This leads to malleability in the challenge, is against the original comments on being prime order, and the Pornin note as an alternative isn't correct as Pornin checks for torsion. This doesn't. I'd also note the torsioned clear signature check will accept more signatures than the original signature check AFAICT. Torsioned signatures require both sides to be torsioned the same, which requires public key and nonce torsioning. Torsion cleared signatures will accept any medley of torsion.\r\n\r\nPornin's work also isn't an optimization if the torsion clear is used instead. #221 describes using *8 to provide a prime order group, and it's 3 scalar additions. Pornin's work, which is ~40% a scalarmul, is still leagues behind three additions. #221 was closed for how large it was, and isn't something I personally endorse despite its performance (though it should be noted it requires a pre-communication scalarmul inv 8). The reason I didn't endorse it is this behavior is incredibly non-standard and I believe it's far reaching of this draft to define a prime order construction on top of Ed25519 which isn't Ristretto, beyond torsion checks.",
          "createdAt": "2022-09-27T21:14:45Z",
          "updatedAt": "2022-09-27T22:04:36Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "@kayabaNerve AFAIK the rationale is https://eprint.iacr.org/2020/1244.pdf, only the cofactored version is compatible between single and batch verification. In the prime-group scenario of FROST maybe it's not strictly needed, but it doesn't seem to hurt... which brings me to\r\n\r\n> This leads to malleability in the challenge\r\n\r\nCould you expand on this?\r\n\r\nAbout #221, I think the issue is RFC 8032 compatibility. With that constraint, Pornin's optimization seems to be the best available.\r\n",
          "createdAt": "2022-09-27T22:08:35Z",
          "updatedAt": "2022-09-27T22:08:35Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have no issue with Pornin's work on a torsion check. I love it. The paragraph I quoted does not cite a torsion check nor does it require it. A reference to Pornin's work there isn't optimally located as it's written \"Alternatively\", despite not being an alternative.\r\n\r\nAdditionally, that paragraph is problematic. With prime order elements, it's pointless. Without prime order elements, it's wider than the original statement AFAICT, which may not be considered an issue but I don't believe was the intention of that paragraph. This is reminiscent of my original comments with @chris-wood who wrote *8 as a torsion check, and I informed them it was a torsion clear, which is different.\r\n\r\nA given point has 8 different forms thanks to torsion, and will produce 8 different challenges. This torsion clear will have all of them resolve to the same value with the same scalar. This means a single scalar can have 8 challenges, and it's therefore malleable. While this isn't necessarily an issue, as Ed25519 sucks as-is and this creates a more supportive method of it being problematic, it doesn't seem to be the intention when it's written next to a \"torsion check\" which prevents these issues and prevents needing to use *8.\r\n\r\nI'd like to again re-iterate *8 is not a torsion check and suggesting Pornin's work is an alternative to *8 is invalid.",
          "createdAt": "2022-09-27T22:14:18Z",
          "updatedAt": "2022-09-27T22:14:18Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "Ahhh sorry, now that I'm paying attention to the context, I see where you're coming from. I think the intention was to mention Pornin's work in DeserializeElement, to optimize the order check. I'll discuss this with the others.\r\n\r\nAbout using the cofactored verification equation, I'll need to study a bit what you've explained and will get back to you.",
          "createdAt": "2022-09-27T22:19:49Z",
          "updatedAt": "2022-09-27T22:19:49Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@conradoplg I've decided to submit a PR for #221. It is perfectly compatible, so long as the original Serialize/Deserialize methods remain available along with the ones creating a prime order construction (where those methods remain faster than Pornin, who I truly love the work of). While I feel #221 increases scope too much for my preference, I believe there's been too much discussion/confusion over torsion and that outweighs it. And then yes, it's also the most performant. That should be relevant to any discussions you have.",
          "createdAt": "2022-09-27T22:26:10Z",
          "updatedAt": "2022-09-27T22:26:33Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "> A given point has 8 different forms thanks to torsion, and will produce 8 different challenges. This torsion clear will have all of them resolve to the same value with the same scalar. This means a single scalar can have 8 challenges, and it's therefore malleable. While this isn't necessarily an issue, as Ed25519 sucks as-is and this creates a more supportive method of it being problematic, it doesn't seem to be the intention when it's written next to a \"torsion check\" which prevents these issues and prevents needing to use *8.\r\n\r\nSorry, I don't get this. Are you talking about R? If R is changed then it will produce a different `h` (using RFC 8032 notation) and the signature verification will fail. Am I missing something? Also per https://eprint.iacr.org/2020/1244.pdf Algorithm 2, the only check on R if it's canonical; it uses the cofactored equation and is claimed to be strongly existentially unforgeable.\r\n\r\n(I agree the cofactored equation might not be _needed_, but I'm trying to understand if it's wrong using it)",
          "createdAt": "2022-09-28T17:37:30Z",
          "updatedAt": "2022-09-28T17:37:30Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My comment was on R's discrete logarithm having 8 different forms. I was not casting into doubt the signature's malleability after creation, nor the signature's security, though the cofactored equation is a wide net for signature validity.\r\n\r\nWith regards to the cofactor signature check, my only comment here is it's unnecessary if the key itself is prime order, since R will be as the commitments are. I'm also unsure if calling non-cofactored verification unsafe is accurate, while implicitly saying cofactored verification is, but that isn't something I care to argue.",
          "createdAt": "2022-09-29T02:48:03Z",
          "updatedAt": "2022-09-29T02:50:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85CtKDL",
          "commit": {
            "abbreviatedOid": "ae6d3ff"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-09-24T01:28:27Z",
          "updatedAt": "2022-09-24T01:28:31Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "We should repeat this note for Ed448 as well, I think.",
              "createdAt": "2022-09-24T01:28:28Z",
              "updatedAt": "2022-09-24T01:28:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CzsUH",
          "commit": {
            "abbreviatedOid": "eaf3152"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-26T20:17:28Z",
          "updatedAt": "2022-09-26T20:17:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 291,
      "id": "PR_kwDOEpUZs84_iqqm",
      "title": "Prime-order group clarifications and updates",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/291",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #256.",
      "createdAt": "2022-09-24T13:23:43Z",
      "updatedAt": "2022-09-26T19:49:25Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "af62d33795f45dbad36c561f84d909bb2ec907ce",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/pog-updates",
      "headRefOid": "8b16338647a0da4a4e1c181403abdd8ca5559aac",
      "closedAt": "2022-09-26T19:49:25Z",
      "mergedAt": "2022-09-26T19:49:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d498be7f55c8ae407617a35b0b97670b2d5e05a3"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thomas didn't comment on DeserializeScalar, so I left it out for now. \ud83e\udd37 ",
          "createdAt": "2022-09-26T19:49:13Z",
          "updatedAt": "2022-09-26T19:49:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85CzeLi",
          "commit": {
            "abbreviatedOid": "8b16338"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Should `DeserializeScalar` also mention that the input must be canonical?\r\n\r\nBut it looks goods either way",
          "createdAt": "2022-09-26T19:32:11Z",
          "updatedAt": "2022-09-26T19:32:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 292,
      "id": "PR_kwDOEpUZs84_irCE",
      "title": "Complete the hash-to-field description",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/292",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #262.",
      "createdAt": "2022-09-24T13:30:43Z",
      "updatedAt": "2022-09-26T19:47:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "af62d33795f45dbad36c561f84d909bb2ec907ce",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/complete-hash-to-field",
      "headRefOid": "a6fedaf42b00c62c19b8f9dc68d86618b977b259",
      "closedAt": "2022-09-26T19:47:56Z",
      "mergedAt": "2022-09-26T19:47:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "82b64ae8f8555b2a5d34e6a12c31a480a856fb51"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Czeuf",
          "commit": {
            "abbreviatedOid": "de9d4a3"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good, there's just a small detail to fix",
          "createdAt": "2022-09-26T19:34:15Z",
          "updatedAt": "2022-09-26T19:47:13Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I just noticed this, the other items mention 5.2\r\n\r\n```suggestion\r\n  - H1(m): Implemented as hash_to_field(m, 1) from {{!HASH-TO-CURVE=I-D.irtf-cfrg-hash-to-curve, Section 5.2}}\r\n```",
              "createdAt": "2022-09-26T19:34:15Z",
              "updatedAt": "2022-09-26T19:47:13Z"
            },
            {
              "originalPosition": 38,
              "body": "```suggestion\r\n  - H1(m): Implemented as hash_to_field(m, 1) from {{!HASH-TO-CURVE=I-D.irtf-cfrg-hash-to-curve, Section 5.2}}\r\n```",
              "createdAt": "2022-09-26T19:34:27Z",
              "updatedAt": "2022-09-26T19:47:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 293,
      "id": "PR_kwDOEpUZs84_oFq8",
      "title": "Complement RFC8032 signer routines for completeness",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/293",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We previously just had the verification step, which meant that there was a gap for non-RFC8032 groups. This plugs the gap.",
      "createdAt": "2022-09-26T17:21:04Z",
      "updatedAt": "2022-09-26T20:23:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "af62d33795f45dbad36c561f84d909bb2ec907ce",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/complement-rfc8032",
      "headRefOid": "e275e4036a25853ee8cb6a291d632923e6bed87c",
      "closedAt": "2022-09-26T20:23:40Z",
      "mergedAt": "2022-09-26T20:23:40Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d06a1733af95431848be72bc9277a257e6610b60"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "There's nothing to specify for key generation since a signing key is a randomly generated scalar.",
          "createdAt": "2022-09-26T20:08:49Z",
          "updatedAt": "2022-09-26T20:08:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Czhml",
          "commit": {
            "abbreviatedOid": "950d393"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks good to me, but it seems incomplete without also a key generation algorithm? But we can open a separate PR for that to not block this.",
          "createdAt": "2022-09-26T19:45:12Z",
          "updatedAt": "2022-09-26T19:45:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85Czov3",
          "commit": {
            "abbreviatedOid": "950d393"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-26T20:06:37Z",
          "updatedAt": "2022-09-26T20:06:37Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\ud83d\udc4d ",
              "createdAt": "2022-09-26T20:06:37Z",
              "updatedAt": "2022-09-26T20:06:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Czpjq",
          "commit": {
            "abbreviatedOid": "950d393"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-26T20:09:43Z",
          "updatedAt": "2022-09-26T20:09:43Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Any enthusiasm for qualifying these routines (or at least the signing routine) as 'singleton' or using a single, fully-capable keypair, to distinguish with threshold? I think the context implies it but I figure I'd ask.",
              "createdAt": "2022-09-26T20:09:43Z",
              "updatedAt": "2022-09-26T20:09:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CzpwV",
          "commit": {
            "abbreviatedOid": "950d393"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-26T20:10:29Z",
          "updatedAt": "2022-09-26T20:10:29Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'm not sure I understand the suggestion -- can you clarify?",
              "createdAt": "2022-09-26T20:10:29Z",
              "updatedAt": "2022-09-26T20:10:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CzslJ",
          "commit": {
            "abbreviatedOid": "950d393"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-26T20:18:23Z",
          "updatedAt": "2022-09-26T20:18:24Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nThe function `prime_order_sign` produces a Schnorr signature over a message given a full secret signing\r\nkey as input (as opposed to a key share.)\r\n```",
              "createdAt": "2022-09-26T20:18:23Z",
              "updatedAt": "2022-09-26T20:18:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CzsoL",
          "commit": {
            "abbreviatedOid": "950d393"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-26T20:18:35Z",
          "updatedAt": "2022-09-26T20:18:36Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Suggested this tweak:\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/pull/293/files#r980463725",
              "createdAt": "2022-09-26T20:18:36Z",
              "updatedAt": "2022-09-26T20:18:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CztAy",
          "commit": {
            "abbreviatedOid": "950d393"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-26T20:19:50Z",
          "updatedAt": "2022-09-26T20:19:52Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Keeping `sk` lowercase as it is a Scalar, per convention\r\n\r\n```suggestion\r\n  - sk, secret key, a Scalar\r\n\r\n  Outputs: (R, z), a Schnorr signature consisting of an Element R and Scalar z.\r\n\r\n  def prime_order_sign(msg, sk):\r\n    r = G.RandomScalar()\r\n    R = G.ScalarBaseMult(r)\r\n    PK = G.ScalarBaseMult(sk)\r\n    comm_enc = G.SerializeElement(R)\r\n    pk_enc = G.SerializeElement(PK)\r\n    challenge_input = comm_enc || pk_enc || msg\r\n    c = H2(challenge_input)\r\n    z = r + (c * sk) // Scalar addition and multiplication\r\n    return (R, z)\r\n~~~\r\n```",
              "createdAt": "2022-09-26T20:19:50Z",
              "updatedAt": "2022-09-26T20:19:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Czt3K",
          "commit": {
            "abbreviatedOid": "6921154"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-26T20:22:01Z",
          "updatedAt": "2022-09-26T20:22:02Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Missed one:\r\n\r\n```suggestion\r\n  prime_order_sign(msg, sk):\r\n``",
              "createdAt": "2022-09-26T20:22:01Z",
              "updatedAt": "2022-09-26T20:22:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85CzuIb",
          "commit": {
            "abbreviatedOid": "e275e40"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83d\udc4d ",
          "createdAt": "2022-09-26T20:23:02Z",
          "updatedAt": "2022-09-26T20:23:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 294,
      "id": "PR_kwDOEpUZs84_sEuB",
      "title": "Fix the secret share polynomial coefficient indexes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/294",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Small fix to the coefficient index after #289. After this, we can cut a new version.\r\n\r\ncc @conradoplg",
      "createdAt": "2022-09-27T11:59:40Z",
      "updatedAt": "2022-09-27T13:34:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "70ad03357c9247f88658ad723cd159a5cb7be942",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/fix-index",
      "headRefOid": "c196f221df14ca3f664404c17962ce6b13495a18",
      "closedAt": "2022-09-27T13:34:56Z",
      "mergedAt": "2022-09-27T13:34:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "290b055c4db4064b18bac634525401793da3c603"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85C30y7",
          "commit": {
            "abbreviatedOid": "c196f22"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Yep that's much better, thanks!",
          "createdAt": "2022-09-27T12:54:39Z",
          "updatedAt": "2022-09-27T12:54:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 295,
      "id": "PR_kwDOEpUZs84_uKWy",
      "title": "Tweaks from feedback",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/295",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-09-27T19:33:17Z",
      "updatedAt": "2022-09-27T19:34:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "7b648b1a5cb90a35472b5daba7066eae6160497c",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "iang-tweaks",
      "headRefOid": "2a3334cc86deaa4f3caddf13263847e4ccacbd78",
      "closedAt": "2022-09-27T19:34:49Z",
      "mergedAt": "2022-09-27T19:34:49Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e1ed92552229e630323d8b003b48c28cc957ac50"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85C6R9w",
          "commit": {
            "abbreviatedOid": "2a3334c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-27T19:33:59Z",
          "updatedAt": "2022-09-27T19:33:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 296,
      "id": "PR_kwDOEpUZs84_uLfx",
      "title": "Update version string and add change log",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/296",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Oops.",
      "createdAt": "2022-09-27T19:38:19Z",
      "updatedAt": "2022-09-27T19:43:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e1ed92552229e630323d8b003b48c28cc957ac50",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/update-version-string",
      "headRefOid": "a6a1b1a1272998ce164657bc9ada479693d85de1",
      "closedAt": "2022-09-27T19:43:19Z",
      "mergedAt": "2022-09-27T19:43:19Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "81157640a6f6bd666d44c9a08550be4fd172d3b0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85C6UXK",
          "commit": {
            "abbreviatedOid": "a6a1b1a"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-09-27T19:42:44Z",
          "updatedAt": "2022-09-27T19:42:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85C6Uek",
          "commit": {
            "abbreviatedOid": "a6a1b1a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2022-09-27T19:43:07Z",
          "updatedAt": "2022-09-27T19:43:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 297,
      "id": "PR_kwDOEpUZs84_ul9C",
      "title": "More tweaks",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/297",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-09-27T21:15:59Z",
      "updatedAt": "2022-09-28T10:39:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "81157640a6f6bd666d44c9a08550be4fd172d3b0",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-2",
      "headRefOid": "07d14ca82432bd9f9187de2b0b462a9624f0468d",
      "closedAt": "2022-09-28T10:38:59Z",
      "mergedAt": "2022-09-28T10:38:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2b6faf8118e69453f7af3c2be53215461b6b73d7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85C9m5V",
          "commit": {
            "abbreviatedOid": "07d14ca"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-28T10:38:55Z",
          "updatedAt": "2022-09-28T10:38:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 298,
      "id": "PR_kwDOEpUZs84_vCtC",
      "title": "Prime order construction",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/298",
      "state": "CLOSED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Removes all existing commentary on how to deal with torsion for a first-class promotion of cofactors and a universal solution. This solution is the most efficient known way to deal with torsion for signing groups where n > 2. This removes the frustration of torsion check/clear confusion, where the current comments on the matter were invalid. This maintains full public key/signature compatibility, as it ended up solely requiring modifying how commitments are communicated.\r\n\r\nCloses #221.",
      "createdAt": "2022-09-27T23:51:49Z",
      "updatedAt": "2022-09-28T22:44:09Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "81157640a6f6bd666d44c9a08550be4fd172d3b0",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "prime-order",
      "headRefOid": "e5f46ddf2d95f77f63960ea746b537a6b3e48c7c",
      "closedAt": "2022-09-28T22:41:58Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm sure there'll be style comments on this, which I'm happy to resolve. I'm also happy to simply correct the location of the note acknowledging Pornin's work, which is currently incorrectly placed yet would also be an acceptable solution if the prime order construction detailed is too much of a scope creep.\r\n\r\nWith regards to performance, Pornin noted the torsion check being 80% of a scalarmul. I'm not sure how, unless their argument is that the fixed scalar allows a vartime scalarmul to be constant time, since its only vartime with respect to the scalar, and that creates a 20% speedup. Their successive halvings, which only apply to twisted edwards curves and have a decent amount of implementation complexity, achieve a 40% of a scalarmul performance cost (and accordingly should be used to check for torsion where needed).\r\n\r\nThis by passes torsion checks entirely for torsion clears. Torsion clears for Ed448 are two point additions, and three point additions for Ed25519. While this requires a scalarmul when serializing, that is 1 scalarmul and 3n scalar additions, where n is the amount of parties deserializing them. Pornin's work is 0.4 scalarmuls n.\r\n\r\nAn Ed25519 scalarmul is efficiently represented with a 4-bit (16-wide) window. This has 14 additions to create the window, and then is used 64 times. This is 78 additions. Accordingly, a torsion clear system can be written as 1 + 0.04n scalarmuls. \r\n\r\nFor 3 signers, it becomes 1.2 scalarmuls vs 1.12, and this method becomes the more efficient option.\r\n\r\nSignatures are now guaranteed to be prime order, given a prime order key, since their commitments are.\r\n\r\nAnd then I know I was requested to hold off so I don't waste my time, yet I only saw that after having completed the spec changes, sorry. I completed the PR to fully demonstrate the compatibility, as it was only an additional half hour of work from there.",
          "createdAt": "2022-09-28T00:01:02Z",
          "updatedAt": "2022-09-28T00:02:32Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks a lot for working on this. I think it's super interesting (after finally understanding it :sweat_smile: ), and I agree it's more efficient, but we decided it's too much of a scope creep on a RFC that is near completion. Hopefully [this PR](https://github.com/cfrg/draft-irtf-cfrg-frost/pull/299) should solve the misunderstanding with the Pornin's work citation.\r\n\r\nLike we discussed, this optimization can be added by implementers in a way that produces compatible signatures; it just breaks compatibility with in-protocol messages but that may be a acceptable compromise to obtain increased performance.\r\n\r\n\r\n",
          "createdAt": "2022-09-28T22:34:46Z",
          "updatedAt": "2022-09-28T22:34:46Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing per https://github.com/cfrg/draft-irtf-cfrg-frost/pull/298#issuecomment-1261531606",
          "createdAt": "2022-09-28T22:44:09Z",
          "updatedAt": "2022-09-28T22:44:09Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 299,
      "id": "PR_kwDOEpUZs84_y7OS",
      "title": "Move Pornin22 citation to DeserializeElement",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/299",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Thanks @kayabaNerve for pointing this out.\r\n\r\nI also added some text that was present in Ed25519 but not in Ed448",
      "createdAt": "2022-09-28T17:00:14Z",
      "updatedAt": "2022-09-29T02:50:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2b6faf8118e69453f7af3c2be53215461b6b73d7",
      "headRepository": "conradoplg/draft-irtf-cfrg-frost",
      "headRefName": "move-pornin-citation",
      "headRefOid": "254f547ff08cdfbc5a3044286d7883df4b021dba",
      "closedAt": "2022-09-28T22:50:48Z",
      "mergedAt": "2022-09-28T22:50:48Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "c12fa99b171b90c0e75caff7d0560ca09f4cb894"
      },
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM. Thanks for doing this :)",
          "createdAt": "2022-09-29T02:50:36Z",
          "updatedAt": "2022-09-29T02:50:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85DBA1-",
          "commit": {
            "abbreviatedOid": "254f547"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm; // @chris-wood, just in case",
          "createdAt": "2022-09-28T20:48:26Z",
          "updatedAt": "2022-09-28T20:48:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85DBGG_",
          "commit": {
            "abbreviatedOid": "254f547"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm also fine with this resolution.",
          "createdAt": "2022-09-28T21:08:49Z",
          "updatedAt": "2022-09-28T21:08:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 300,
      "id": "PR_kwDOEpUZs84_2Zoy",
      "title": "Update modular-frost to v10 with all ciphersuites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/300",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/serai-dex/serai/commit/2b7c9378c0ee4d43d8562153874b9cc9dcb5d932 for the commit doing so, which includes the new vectors and passes CI. The crate has also been pushed to crates.io.",
      "createdAt": "2022-09-29T11:51:44Z",
      "updatedAt": "2022-09-29T12:31:57Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c12fa99b171b90c0e75caff7d0560ca09f4cb894",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "patch-2",
      "headRefOid": "833f4c028ec204fe15f87fd8b83b57c816609191",
      "closedAt": "2022-09-29T12:05:43Z",
      "mergedAt": "2022-09-29T12:05:43Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c3ba6cb0992dca727d4018655705ba2029f4e188"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 301,
      "id": "PR_kwDOEpUZs85AD9Sc",
      "title": "Remaining Ian comments",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/301",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-03T14:36:48Z",
      "updatedAt": "2022-10-04T13:20:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c3ba6cb0992dca727d4018655705ba2029f4e188",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "iang_notes_20220927",
      "headRefOid": "70be519208d69288acba5eae2687160f93cc8f68",
      "closedAt": "2022-10-04T13:20:27Z",
      "mergedAt": "2022-10-04T13:20:27Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "49d07a39cb98ad3422191a4c6afac889d318af58"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85DWSGe",
          "commit": {
            "abbreviatedOid": "f5ca042"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-04T13:18:21Z",
          "updatedAt": "2022-10-04T13:18:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 302,
      "id": "PR_kwDOEpUZs85AJWsP",
      "title": "Make implicit ciphersuite requirements explicit",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/302",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-04T15:35:19Z",
      "updatedAt": "2022-10-04T19:46:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "49d07a39cb98ad3422191a4c6afac889d318af58",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/clarify-suite-requirements",
      "headRefOid": "fa84c60a61382b1f9c4aa99d1c19127158a2eb87",
      "closedAt": "2022-10-04T19:46:47Z",
      "mergedAt": "2022-10-04T19:46:47Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5ce4d721e01c5dddcf2309f9d1516718734b79f8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85DYISq",
          "commit": {
            "abbreviatedOid": "fa84c60"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM!",
          "createdAt": "2022-10-04T17:59:20Z",
          "updatedAt": "2022-10-04T17:59:26Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "Just to confirm, was the intention to actually replace the old text? These seem unrelated and we could arguably include both paragraphs. I don't mind either way though.",
              "createdAt": "2022-10-04T17:59:20Z",
              "updatedAt": "2022-10-04T17:59:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85DYauc",
          "commit": {
            "abbreviatedOid": "fa84c60"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T19:01:28Z",
          "updatedAt": "2022-10-04T19:01:29Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "Same question here. ",
              "createdAt": "2022-10-04T19:01:28Z",
              "updatedAt": "2022-10-04T19:01:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85DYbH7",
          "commit": {
            "abbreviatedOid": "fa84c60"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T19:02:52Z",
          "updatedAt": "2022-10-04T19:02:53Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "Yeah, the intention was to replace the old text with this. The old text didn't apply to all suites and assumed too much of the internals of DeserializeScalar. This new text avoids both problems. ",
              "createdAt": "2022-10-04T19:02:52Z",
              "updatedAt": "2022-10-04T19:02:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85DYnES",
          "commit": {
            "abbreviatedOid": "fa84c60"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "All of this looks like nice improvements. Thanks @chris-wood ",
          "createdAt": "2022-10-04T19:46:09Z",
          "updatedAt": "2022-10-04T19:46:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 303,
      "id": "PR_kwDOEpUZs85AJ0MN",
      "title": "replace 'DeserializeError' with 'an error'",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/303",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is just a suggestion.\r\n\r\nI found `DeserializeError` odd since it's not defined anywhere and a similar notation is not used anywhere else.\r\n",
      "createdAt": "2022-10-04T17:32:51Z",
      "updatedAt": "2022-10-04T17:52:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "49d07a39cb98ad3422191a4c6afac889d318af58",
      "headRepository": "conradoplg/draft-irtf-cfrg-frost",
      "headRefName": "remove-deserializeerror",
      "headRefOid": "c4912d181a4245cd539fb434f827d5f7981e5b38",
      "closedAt": "2022-10-04T17:52:40Z",
      "mergedAt": "2022-10-04T17:52:40Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2108259d4fdd2c4bfa8cc1411d0cb740e81a82eb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85DYCaZ",
          "commit": {
            "abbreviatedOid": "c4912d1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Im cool with this, @chris-wood wdyt",
          "createdAt": "2022-10-04T17:40:56Z",
          "updatedAt": "2022-10-04T17:40:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85DYF9S",
          "commit": {
            "abbreviatedOid": "c4912d1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-04T17:52:19Z",
          "updatedAt": "2022-10-04T17:52:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 305,
      "id": "PR_kwDOEpUZs85ANSuw",
      "title": "Bump actions/checkout from 3.0.1 to 3.1.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/305",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/checkout](https://github.com/actions/checkout) from 3.0.1 to 3.1.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/releases\">actions/checkout's releases</a>.</em></p>\n<blockquote>\n<h2>v3.1.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Inject GitHub host to be able to clone from another GitHub instance by <a href=\"https://github.com/peter-murray\"><code>@\u200bpeter-murray</code></a> in <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/922\">actions/checkout#922</a></li>\n<li>Bump <code>@\u200bactions/core</code> to 1.10.0 by <a href=\"https://github.com/rentziass\"><code>@\u200brentziass</code></a> in <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/939\">actions/checkout#939</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/peter-murray\"><code>@\u200bpeter-murray</code></a> made their first contribution in <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/922\">actions/checkout#922</a></li>\n<li><a href=\"https://github.com/rentziass\"><code>@\u200brentziass</code></a> made their first contribution in <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/939\">actions/checkout#939</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3.0.2...v3.1.0\">https://github.com/actions/checkout/compare/v3.0.2...v3.1.0</a></p>\n<h2>v3.0.2</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Add set-safe-directory input to allow customers to take control. by <a href=\"https://github.com/TingluoHuang\"><code>@\u200bTingluoHuang</code></a> in <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/770\">actions/checkout#770</a></li>\n<li>Prepare changelog for v3.0.2. by <a href=\"https://github.com/TingluoHuang\"><code>@\u200bTingluoHuang</code></a> in <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/777\">actions/checkout#777</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3...v3.0.2\">https://github.com/actions/checkout/compare/v3...v3.0.2</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/blob/main/CHANGELOG.md\">actions/checkout's changelog</a>.</em></p>\n<blockquote>\n<h2>v3.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/939\">Use <code>@\u200bactions/core</code> <code>saveState</code> and <code>getState</code></a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/922\">Add <code>github-server-url</code> input</a></li>\n</ul>\n<h2>v3.0.2</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/770\">Add input <code>set-safe-directory</code></a></li>\n</ul>\n<h2>v3.0.1</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/762\">Fixed an issue where checkout failed to run in container jobs due to the new git setting <code>safe.directory</code></a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/744\">Bumped various npm package versions</a></li>\n</ul>\n<h2>v3.0.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/689\">Update to node 16</a></li>\n</ul>\n<h2>v2.3.1</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></li>\n</ul>\n<h2>v2.3.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></li>\n</ul>\n<h2>v2.2.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/157\">Add submodule support</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/144\">Follow proxy settings</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/141\">Fix ref for pr closed event when a pr is merged</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/128\">Fix issue checking detached when git less than 2.22</a></li>\n</ul>\n<h2>v2.0.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/108\">Do not pass cred on command line</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/107\">Add input persist-credentials</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/104\">Fallback to REST API to download repo</a></li>\n</ul>\n<h2>v2 (beta)</h2>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/checkout/commit/93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\"><code>93ea575</code></a> Prepare release v3.1.0 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/940\">#940</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/6a84743051be17cee477b0a26bd866b5dba996e4\"><code>6a84743</code></a> Bump <code>@\u200bactions/core</code> to 1.10.0 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/939\">#939</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/e6d535c99c374d0c3f6d8cd8086a57b43c6c700a\"><code>e6d535c</code></a> Inject GitHub host to be able to clone from another GitHub instance (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/922\">#922</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/2541b1294d2704b0964813337f33b291d3f8596b\"><code>2541b12</code></a> Prepare changelog for v3.0.2. (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/777\">#777</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/0ffe6f9c5599e73776da5b7f113e994bc0a76ede\"><code>0ffe6f9</code></a> Add set-safe-directory input to allow customers to take control. (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/770\">#770</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/checkout/compare/v3.0.1...v3.1.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/checkout&package-manager=github_actions&previous-version=3.0.1&new-version=3.1.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-10-05T11:45:47Z",
      "updatedAt": "2022-11-21T19:51:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "5ce4d721e01c5dddcf2309f9d1516718734b79f8",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/checkout-3.1.0",
      "headRefOid": "45061182395364fe72091e668154fdc31d4ac3ab",
      "closedAt": "2022-11-21T19:51:19Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
          "createdAt": "2022-11-21T19:51:21Z",
          "updatedAt": "2022-11-21T19:51:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85DeIZA",
          "commit": {
            "abbreviatedOid": "4506118"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-05T19:57:17Z",
          "updatedAt": "2022-10-05T19:57:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 306,
      "id": "PR_kwDOEpUZs85AW6bM",
      "title": "Raise an error if SerializeElement tries to serialize the identity Element",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/306",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #304",
      "createdAt": "2022-10-07T00:41:32Z",
      "updatedAt": "2022-10-07T13:37:43Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "29bc723075cd8eaa63837b3111fcb2305bf76c63",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "304",
      "headRefOid": "efb516cab83ccb5f7c87f3731c74368305fd681b",
      "closedAt": "2022-10-07T13:37:42Z",
      "mergedAt": "2022-10-07T13:37:42Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "31de6f67a236cef6c95e2d8e90f7af08ee352134"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85DnysI",
          "commit": {
            "abbreviatedOid": "efb516c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-07T13:37:37Z",
          "updatedAt": "2022-10-07T13:37:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 307,
      "id": "PR_kwDOEpUZs85AXDAK",
      "title": "Update homebrew recipes before trying to install latest sage",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/307",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-07T01:41:17Z",
      "updatedAt": "2022-10-07T02:05:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "5ce4d721e01c5dddcf2309f9d1516718734b79f8",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "homebrew-update",
      "headRefOid": "1a1cb287863f9cdb9b7515bf782020c960f09a60",
      "closedAt": "2022-10-07T02:05:16Z",
      "mergedAt": "2022-10-07T02:05:16Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "29bc723075cd8eaa63837b3111fcb2305bf76c63"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 308,
      "id": "PR_kwDOEpUZs85AZUP0",
      "title": "Add change log and update the version",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/308",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-07T13:42:20Z",
      "updatedAt": "2022-10-07T13:43:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "31de6f67a236cef6c95e2d8e90f7af08ee352134",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/change-log-and-version",
      "headRefOid": "fed8211716b9a0a24953119744e79bfb82b0a78d",
      "closedAt": "2022-10-07T13:43:20Z",
      "mergedAt": "2022-10-07T13:43:20Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "dc3f9492d4df896cb9cda5ab76d518660ee209e4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 309,
      "id": "PR_kwDOEpUZs85AfWby",
      "title": "Bump actions/setup-python from 4.1.0 to 4.3.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/309",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4.1.0 to 4.3.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>v4.3.0</h2>\n<ul>\n<li>Update <code>@\u200bactions/core</code> to 1.10.0 version <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/517\">#517</a></li>\n<li>Update <code>@\u200bactions/cache</code> to 3.0.4 version <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/499\">#499</a></li>\n<li>Only use github.token on github.com <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/443\">#443</a></li>\n<li>Improvement of documentation <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/477\">#477</a>  <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/479\">#479</a> <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/491\">#491</a>  <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/492\">#492</a></li>\n</ul>\n<h2>Add check-latest input and bug fixes</h2>\n<p>In scope of this release we add the\u00a0<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/406\">check-latest</a>\u00a0input. If\u00a0check-latest\u00a0is set to\u00a0true, the action first checks if the cached version is the latest one. If the locally cached version is not the most up-to-date, the version will then be downloaded from\u00a0<a href=\"https://github.com/actions/python-versions\">python-versions</a>\u00a0repository. By default\u00a0check-latest\u00a0is set to\u00a0false. For PyPy it will to try to reach <a href=\"https://downloads.python.org/pypy/versions.json\">https://downloads.python.org/pypy/versions.json</a></p>\n<h3>Example of usage:</h3>\n<pre lang=\"yaml\"><code>steps:\n  - uses: actions/checkout@v3\n  - uses: actions/setup-python@v4\n    with:\n      python-version: '3.9'\n      check-latest: true\n  - run: python --version\n</code></pre>\n<p>Besides, it includes such changes as</p>\n<ul>\n<li>Resolved logs for python-version and file inputs: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/465\">actions/setup-python#465</a></li>\n<li>Added linux os release info to primary key: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/467\">actions/setup-python#467</a></li>\n<li>Added fix to change Python versions for poetry: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/445\">actions/setup-python#445</a></li>\n<li>Fix Tool Path handling for self-hosted runners: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/466\">actions/setup-python#466</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/13ae5bb136fac2878aff31522b9efb785519f984\"><code>13ae5bb</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/517\">#517</a> from rentziass/rentziass/update-actions-core</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/0c4d7b878c451046f4c9003d4b7c6a28d18e16d7\"><code>0c4d7b8</code></a> Update <code>@\u200bactions/core</code> to 1.10.0</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/13a464fa1180c0025831475fa35bb1878b1a4728\"><code>13a464f</code></a> Fix typo (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/503\">#503</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/b4fe97ecda6b7a5fcd2448cdbf6a8fc76b3bedb0\"><code>b4fe97e</code></a> upgrade <code>@\u200bactions/cache</code> so it respects SEGMENT_DOWNLOAD_TIMEOUT_MINS (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/499\">#499</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/434aeabbb4286782ee8393c55a08efe7edd89027\"><code>434aeab</code></a> Bump <code>@\u200bactions/core</code> from 1.7.0 to 1.9.1 (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/495\">#495</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/98c991d13f3149457a7c1ac4083885d0d9db98e1\"><code>98c991d</code></a> Only use github.token on github.com (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/443\">#443</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/397a35f9886aa9c6f22fb1dc41eefccf99deb2fb\"><code>397a35f</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/492\">#492</a> from al-cheb/al-cheb/update-runner-link</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/48a0f006ffb715bfd0eb1ae1a2d62f61a7fa231f\"><code>48a0f00</code></a> Update runner links</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/978fd06d1f249d7f080233457c2ae6324d08eac2\"><code>978fd06</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/491\">#491</a> from lkfortuna/patch-2</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/050e616f665562657a663dd1cc4b9ac6fb194d28\"><code>050e616</code></a> Update README.md</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v4.1.0...v4.3.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=4.1.0&new-version=4.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-10-10T12:19:54Z",
      "updatedAt": "2022-11-21T19:51:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "dc3f9492d4df896cb9cda5ab76d518660ee209e4",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.3.0",
      "headRefOid": "687fcfe6fde89bf024978e2cb470fe46bf8926aa",
      "closedAt": "2022-11-21T19:51:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
          "createdAt": "2022-11-21T19:51:22Z",
          "updatedAt": "2022-11-21T19:51:22Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 310,
      "id": "PR_kwDOEpUZs85A3hjd",
      "title": "Mark modular-frost as v11 compliant",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/310",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/serai-dex/serai/commit/a0a54eb0de0b37bfcaee73bec324624bb1f1b852, which now directly includes the test vectors, and https://github.com/serai-dex/serai/commit/9d376d29e12150136aa1ae54c6931e3e420ac5a1, which includes a passing CI run. The delay in the two is because there was unrelated CI issues.\r\n\r\nThe crate is published.\r\n\r\nSince v11 made minimal functional changes, I debated not bothering with a PR, yet doing so seems minor enough that it's best to keep all ducks in a row.",
      "createdAt": "2022-10-16T03:07:24Z",
      "updatedAt": "2022-10-16T12:47:22Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "dc3f9492d4df896cb9cda5ab76d518660ee209e4",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "patch-2",
      "headRefOid": "fa89cb6d48a12ef13840cce285e3f80d3f1a6f5d",
      "closedAt": "2022-10-16T12:41:01Z",
      "mergedAt": "2022-10-16T12:41:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "113bd5a74e44725fc83d0e1c05f7b7ffdd5837cc"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 311,
      "id": "PR_kwDOEpUZs85DZRxj",
      "title": "Generalize secret sharing",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/311",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The secret sharing components of this draft have value outside of FROST. This PR is one way we could repurpose them. We could also spin out a separate draft entirely that covers secret sharing. \r\n\r\nThe crux of the change is that secret sharing is done _deterministically_ using freshly generated randomness. In other words, rather than generate the polynomial coefficients at random, the coefficients are derived from a suitable amount of entropy. This allows the secret sharing mechanics to be repurposed elsewhere, such as in STAR.\r\n\r\nKeeping this as a draft for now while we solicit feedback. This is a big change to a draft that's in RGLC, so I'm not convinced we should land it. But I'm also not enthusiastic about spinning up an entirely new draft just for the purposes of formalizing some things that are already here (and potentially further delaying FROST).",
      "createdAt": "2022-11-21T22:22:07Z",
      "updatedAt": "2022-12-15T16:09:41Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "113bd5a74e44725fc83d0e1c05f7b7ffdd5837cc",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/generalize-secret-sharing",
      "headRefOid": "208fbe1a03a0a4922a1f4401e4dfdd365ff6cd52",
      "closedAt": "2022-12-15T16:09:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a large divergence, and as you said, the draft is already in RGLC. The vote by @dconnolly, @conradoplg, and I is to keep the draft as is, and the generalization of secret sharing to a deterministic variant (from a random seed) be a different draft. ",
          "createdAt": "2022-12-06T20:15:40Z",
          "updatedAt": "2022-12-06T20:15:40Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood Ok if we close this PR?",
          "createdAt": "2022-12-15T14:42:41Z",
          "updatedAt": "2022-12-15T14:42:41Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, let's close this.",
          "createdAt": "2022-12-15T16:09:40Z",
          "updatedAt": "2022-12-15T16:09:40Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 313,
      "id": "PR_kwDOEpUZs85DguZ5",
      "title": "minor edits to draft-irtf-cfrg-frost.md",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/313",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-11-23T02:08:54Z",
      "updatedAt": "2022-11-30T23:30:43Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "113bd5a74e44725fc83d0e1c05f7b7ffdd5837cc",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "text-edits",
      "headRefOid": "5eb122b034beb22f28cbfaa1569f9078c73e7c89",
      "closedAt": "2022-11-30T23:13:43Z",
      "mergedAt": "2022-11-30T23:13:43Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ce0427f803a7b13bc498ceebfd0840c4b57073bb"
      },
      "comments": [
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @chris-wood , a gentle ping here requesting your review :)",
          "createdAt": "2022-11-29T13:05:04Z",
          "updatedAt": "2022-11-29T13:05:04Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry for the delay @aldenml -- I'll get to this ASAP!",
          "createdAt": "2022-11-30T23:12:59Z",
          "updatedAt": "2022-11-30T23:12:59Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "... and by ASAP I mean right now. =)",
          "createdAt": "2022-11-30T23:13:36Z",
          "updatedAt": "2022-11-30T23:13:36Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85HiPMq",
          "commit": {
            "abbreviatedOid": "5eb122b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-30T23:13:26Z",
          "updatedAt": "2022-11-30T23:13:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 314,
      "id": "PR_kwDOEpUZs85D6QFl",
      "title": "make the SHAKE256 length explicit for the Ed448 ciphersuite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/314",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is not a big deal, not sure if we can still can get some changes in\r\n\r\nWhile implementing Ed448 support I noticed that the length of SHAKE256 in the Ed448 ciphersuite is not explicit. You can deduce it from the context but I thought this makes it clearer.",
      "createdAt": "2022-11-29T17:58:44Z",
      "updatedAt": "2022-12-06T20:18:23Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "113bd5a74e44725fc83d0e1c05f7b7ffdd5837cc",
      "headRepository": "conradoplg/draft-irtf-cfrg-frost",
      "headRefName": "shake256-length",
      "headRefOid": "f3f06d709f39302a87e6578c2ef3ac52927a26d3",
      "closedAt": "2022-12-06T20:18:22Z",
      "mergedAt": "2022-12-06T20:18:22Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "d3322a4c4418f50f3285547e359170eb88e311d5"
      },
      "comments": [
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "> Good catch -- I think this is the only variable-length output hash we have. I wonder if we should make clear in the ciphersuites requirements section that each hash function produces a fixed-length output?\r\n\r\n@chris-wood I think it's not strictly required but it can makes things clearer, I gave it a shot in f3f06d7",
          "createdAt": "2022-12-02T17:37:23Z",
          "updatedAt": "2022-12-02T17:37:23Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85HiQTy",
          "commit": {
            "abbreviatedOid": "584d3a2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Good catch -- I think this is the only variable-length output hash we have. I wonder if we should make clear in the ciphersuites requirements section that each hash function produces a fixed-length output?",
          "createdAt": "2022-11-30T23:16:50Z",
          "updatedAt": "2022-11-30T23:16:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85Hi0UV",
          "commit": {
            "abbreviatedOid": "584d3a2"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-01T03:16:01Z",
          "updatedAt": "2022-12-01T03:16:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 346,
      "id": "PR_kwDOEpUZs85E5l65",
      "title": "Bump actions/setup-python from 4.1.0 to 4.3.1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/346",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4.1.0 to 4.3.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>Improve error handling and messages</h2>\n<p>In scope of this release we added improved error message to put operating system and its version in the logs (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/559\">actions/setup-python#559</a>). Besides, the release</p>\n<ul>\n<li>fixes issue about <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/518\">specifying architecture for pypy-nightly on Windows</a> with related <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/520\">pull request</a>.</li>\n<li>improves error handling for Http Errors (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/511\">actions/setup-python#511</a>).</li>\n<li>updates minimatch (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/558\">actions/setup-python#558</a>).</li>\n</ul>\n<h2>v4.3.0</h2>\n<ul>\n<li>Update <code>@\u200bactions/core</code> to 1.10.0 version <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/517\">#517</a></li>\n<li>Update <code>@\u200bactions/cache</code> to 3.0.4 version <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/499\">#499</a></li>\n<li>Only use github.token on github.com <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/443\">#443</a></li>\n<li>Improvement of documentation <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/477\">#477</a>  <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/479\">#479</a> <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/491\">#491</a>  <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/492\">#492</a></li>\n</ul>\n<h2>Add check-latest input and bug fixes</h2>\n<p>In scope of this release we add the\u00a0<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/406\">check-latest</a>\u00a0input. If\u00a0check-latest\u00a0is set to\u00a0true, the action first checks if the cached version is the latest one. If the locally cached version is not the most up-to-date, the version will then be downloaded from\u00a0<a href=\"https://github.com/actions/python-versions\">python-versions</a>\u00a0repository. By default\u00a0check-latest\u00a0is set to\u00a0false. For PyPy it will to try to reach <a href=\"https://downloads.python.org/pypy/versions.json\">https://downloads.python.org/pypy/versions.json</a></p>\n<h3>Example of usage:</h3>\n<pre lang=\"yaml\"><code>steps:\n  - uses: actions/checkout@v3\n  - uses: actions/setup-python@v4\n    with:\n      python-version: '3.9'\n      check-latest: true\n  - run: python --version\n</code></pre>\n<p>Besides, it includes such changes as</p>\n<ul>\n<li>Resolved logs for python-version and file inputs: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/465\">actions/setup-python#465</a></li>\n<li>Added linux os release info to primary key: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/467\">actions/setup-python#467</a></li>\n<li>Added fix to change Python versions for poetry: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/445\">actions/setup-python#445</a></li>\n<li>Fix Tool Path handling for self-hosted runners: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/466\">actions/setup-python#466</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/2c3dd9e7e29afd70cc0950079bde6c979d1f69f9\"><code>2c3dd9e</code></a> Add OS info to the error message (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/559\">#559</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/76bbdfadd7792e54db5b82bd04a77913663d4dd6\"><code>76bbdfa</code></a> Update minimatch (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/558\">#558</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/1aafadcfb96443dc8b2c66d464369fad6ead5571\"><code>1aafadc</code></a> Caching projects that use setup.py (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/549\">#549</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/b80efd6bc5dcdc82c015d69ecd3e39320d0095e6\"><code>b80efd6</code></a> Update to latest <code>actions/publish-action</code> (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/546\">#546</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/5cddb278857fec730853802fad5126d9d78895d5\"><code>5cddb27</code></a> Recommend setting python-version (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/545\">#545</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/47c4a7af1d72897a511c975c95a5335bb6329dec\"><code>47c4a7a</code></a> fix(ci): run <code>.github/workflows/workflow.yml</code> on ubuntu-20.04 (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/535\">#535</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/af57b6499414c9dd25c305c7c008a5109c5a188f\"><code>af57b64</code></a> Extend docu regarding rate limit issues. (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/510\">#510</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/4818a5a1535387fb9d6e71f7ace82ad3b405804b\"><code>4818a5a</code></a> Handle download HTTP error (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/511\">#511</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/8bcd2560e267a43fbd8ff66c50da8a61825a0782\"><code>8bcd256</code></a> Add architecture input check for PyPy for Windows platform (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/520\">#520</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/13ae5bb136fac2878aff31522b9efb785519f984\"><code>13ae5bb</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/517\">#517</a> from rentziass/rentziass/update-actions-core</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v4.1.0...v4.3.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=4.1.0&new-version=4.3.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-12-09T12:06:12Z",
      "updatedAt": "2022-12-13T19:15:04Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d3322a4c4418f50f3285547e359170eb88e311d5",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.3.1",
      "headRefOid": "1cb5f45d3128e3e54163c0b06368da67b4f7cb4b",
      "closedAt": "2022-12-13T19:14:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
          "createdAt": "2022-12-13T19:14:50Z",
          "updatedAt": "2022-12-13T19:14:50Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 347,
      "id": "PR_kwDOEpUZs85E8I4r",
      "title": "fix Ed448 Scalar size",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/347",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/cfrg/draft-irtf-cfrg-frost/issues/338",
      "createdAt": "2022-12-09T19:59:33Z",
      "updatedAt": "2022-12-09T23:08:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d3322a4c4418f50f3285547e359170eb88e311d5",
      "headRepository": "conradoplg/draft-irtf-cfrg-frost",
      "headRefName": "ed448-scalar-size",
      "headRefOid": "927303b90fe755626ef1087931afaf4d4fd36281",
      "closedAt": "2022-12-09T23:08:14Z",
      "mergedAt": "2022-12-09T23:08:14Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2ba899ee0de3d0fc4fee28c6e11385626c6f984f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85IQuKv",
          "commit": {
            "abbreviatedOid": "927303b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-09T23:08:09Z",
          "updatedAt": "2022-12-09T23:08:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 348,
      "id": "PR_kwDOEpUZs85FOLti",
      "title": "poin both secp256r1/k1 point deserialization to SEC1 spec",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/348",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/cfrg/draft-irtf-cfrg-frost/issues/339\r\n\r\nBoth algorithms do the same thing, but to avoid confusion, I thought it would be simpler to point both to SEC1. Also SEC1 is specifies that the point multiplication is not necessary when not needed (cofactor 1) while SP800-56A requires it.\r\n\r\nI also made the descriptions consistent across both ciphersuites, and fixed the name of the pointed routine (it's not partial validation which is in 3.2.3.1; it's full validation which is what we want, while still allowing skipping the order check)",
      "createdAt": "2022-12-12T17:49:14Z",
      "updatedAt": "2022-12-13T19:10:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2ba899ee0de3d0fc4fee28c6e11385626c6f984f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "deserialize-point-spec",
      "headRefOid": "eb419458dc351aba2d2b729e0c525b00a0296ab8",
      "closedAt": "2022-12-13T19:10:35Z",
      "mergedAt": "2022-12-13T19:10:35Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c804a5b49dc4118249a5a3f98debd69020dd626e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85IfvAe",
          "commit": {
            "abbreviatedOid": "eb41945"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-13T19:10:31Z",
          "updatedAt": "2022-12-13T19:10:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 349,
      "id": "PR_kwDOEpUZs85FOVeI",
      "title": "remove unneded sorting requirements",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/349",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/cfrg/draft-irtf-cfrg-frost/issues/332. See discussion there on whether this is the approach we want to take or not.",
      "createdAt": "2022-12-12T18:13:45Z",
      "updatedAt": "2022-12-13T19:11:44Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2ba899ee0de3d0fc4fee28c6e11385626c6f984f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "remove-sorting-requirements",
      "headRefOid": "3d9ef3e6dab1108a21c160548f3c3b8bd4370098",
      "closedAt": "2022-12-13T19:11:44Z",
      "mergedAt": "2022-12-13T19:11:44Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "19f4b0674da98e0465d26f7dfa00f116cafd2e18"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85IfvVS",
          "commit": {
            "abbreviatedOid": "3d9ef3e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-13T19:11:40Z",
          "updatedAt": "2022-12-13T19:11:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 350,
      "id": "PR_kwDOEpUZs85FOj4L",
      "title": "fix and clarify polynomial representation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/350",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/cfrg/draft-irtf-cfrg-frost/issues/331",
      "createdAt": "2022-12-12T18:49:47Z",
      "updatedAt": "2022-12-13T20:14:24Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2ba899ee0de3d0fc4fee28c6e11385626c6f984f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "polynomial-clarification",
      "headRefOid": "e2b2040a94bfe172894f4315fea4e8518f7148b8",
      "closedAt": "2022-12-13T19:14:41Z",
      "mergedAt": "2022-12-13T19:14:41Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d7ccb134fdcb7f63d4022055fe991e26a6d8c2c2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85IfwMi",
          "commit": {
            "abbreviatedOid": "e2b2040"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-13T19:14:36Z",
          "updatedAt": "2022-12-13T19:14:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85IgA7f",
          "commit": {
            "abbreviatedOid": "e2b2040"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-13T20:13:10Z",
          "updatedAt": "2022-12-13T20:13:11Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "> the constant term of the polynomial is in the first position \r\n\r\n> [3, 2, 1]\r\n\r\nShouldn't this be reversed? @conradoplg ",
              "createdAt": "2022-12-13T20:13:10Z",
              "updatedAt": "2022-12-13T20:13:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85IgBPi",
          "commit": {
            "abbreviatedOid": "e2b2040"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-13T20:14:24Z",
          "updatedAt": "2022-12-13T20:14:24Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "No -- the constant term is `3` for the polynomial example, so it shows up first. ",
              "createdAt": "2022-12-13T20:14:24Z",
              "updatedAt": "2022-12-13T20:14:24Z"
            }
          ]
        }
      ]
    },
    {
      "number": 351,
      "id": "PR_kwDOEpUZs85FXGO-",
      "title": "Typo fix",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/351",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-13T19:13:27Z",
      "updatedAt": "2022-12-13T20:14:22Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "19f4b0674da98e0465d26f7dfa00f116cafd2e18",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "fix-binding_factor_list-typo",
      "headRefOid": "577c7b85e5d115e6d017e21f734989704769f33d",
      "closedAt": "2022-12-13T20:14:18Z",
      "mergedAt": "2022-12-13T20:14:18Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "cad6521bef73fee6b31ef285ae075cdb3f7eb01a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85IfzzD",
          "commit": {
            "abbreviatedOid": "577c7b8"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-13T19:26:53Z",
          "updatedAt": "2022-12-13T19:26:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85IgBL8",
          "commit": {
            "abbreviatedOid": "577c7b8"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-13T20:14:11Z",
          "updatedAt": "2022-12-13T20:14:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 352,
      "id": "PR_kwDOEpUZs85FXOCB",
      "title": "Address RFC8032 compatibility clarity and tidy up intro",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/352",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #326\r\n\r\ncc @cjpatton and @armfazh for a look at the changes regarding RFC8032 compatibility (and signature indistinguishability)",
      "createdAt": "2022-12-13T19:40:17Z",
      "updatedAt": "2022-12-21T19:31:44Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "18388b3ecdafae489e9989b0634bd912ca1dbd55",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/rfc8032-compat-and-intro",
      "headRefOid": "832b01badd7b1faf3f458841f17c1016ca6de99c",
      "closedAt": "2022-12-21T19:31:43Z",
      "mergedAt": "2022-12-21T19:31:43Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e7ff0a2c61b9b2220fc0b027ce8f3b8c6fde8f30"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think Ed25519-compliant seems more clear than verifier-compliant, so I'm going to keep this as-is.",
          "createdAt": "2022-12-13T22:35:12Z",
          "updatedAt": "2022-12-13T22:35:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85IgPbF",
          "commit": {
            "abbreviatedOid": "b344e3e"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-13T20:57:53Z",
          "updatedAt": "2022-12-13T20:57:55Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "```suggestion\r\nTwo ciphersuites can be used to produce signatures that are compatible with Ed25519 and Ed448 as\r\n```",
              "createdAt": "2022-12-13T20:57:54Z",
              "updatedAt": "2022-12-13T20:57:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85IgcOC",
          "commit": {
            "abbreviatedOid": "e6d504c"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-13T21:41:40Z",
          "updatedAt": "2022-12-13T21:41:41Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nverifier. However, unlike {{!RFC8032}}, the signatures produced by FROST are not deterministic,\r\n```",
              "createdAt": "2022-12-13T21:41:40Z",
              "updatedAt": "2022-12-13T21:41:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85IghIE",
          "commit": {
            "abbreviatedOid": "f685422"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This is a suggestion to define `verification-compatible` (or some other terminology) to define the compatibility with RFC8032.",
          "createdAt": "2022-12-13T21:58:33Z",
          "updatedAt": "2022-12-13T22:03:17Z",
          "comments": [
            {
              "originalPosition": 81,
              "body": "a bit more verbose.\r\n\r\n```suggestion\r\nmeant to produce verification-compliant Ed25519 signatures as specified in {{!RFC8032}}.\r\n```",
              "createdAt": "2022-12-13T21:58:33Z",
              "updatedAt": "2022-12-13T22:03:17Z"
            },
            {
              "originalPosition": 100,
              "body": "```suggestion\r\nmeant to produce verification-compliant Ed448 signatures as specified in {{!RFC8032}}.\r\n```",
              "createdAt": "2022-12-13T21:59:08Z",
              "updatedAt": "2022-12-13T22:03:17Z"
            },
            {
              "originalPosition": 46,
              "body": "```suggestion\r\nTwo ciphersuites can be used to produce signatures that are verification-compatible with Ed25519 and Ed448 as\r\n```",
              "createdAt": "2022-12-13T22:01:03Z",
              "updatedAt": "2022-12-13T22:03:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85IhgV7",
          "commit": {
            "abbreviatedOid": "f685422"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-14T03:47:58Z",
          "updatedAt": "2022-12-14T03:47:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 353,
      "id": "PR_kwDOEpUZs85FXQ1m",
      "title": "Application specific checks may be about syntax or content",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/353",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #325 \r\n\r\ncc @real-or-random for \ud83d\udc40 ",
      "createdAt": "2022-12-13T19:49:34Z",
      "updatedAt": "2022-12-13T20:20:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d7ccb134fdcb7f63d4022055fe991e26a6d8c2c2",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/application-specific-checks-syntax-or-content",
      "headRefOid": "b9016d72c95a90d8968e4e84fcb69c9da414bd56",
      "closedAt": "2022-12-13T20:20:13Z",
      "mergedAt": "2022-12-13T20:20:13Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "7a43b9ebe9799149184318617cf2447ee0155458"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85If7N6",
          "commit": {
            "abbreviatedOid": "de12145"
          },
          "author": "real-or-random",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-13T19:53:22Z",
          "updatedAt": "2022-12-13T19:53:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85IgCjN",
          "commit": {
            "abbreviatedOid": "de12145"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-13T20:19:09Z",
          "updatedAt": "2022-12-13T20:19:09Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nthis setting, signing participants might require the raw TLS handshake messages\r\n```",
              "createdAt": "2022-12-13T20:19:09Z",
              "updatedAt": "2022-12-13T20:19:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85IgCtJ",
          "commit": {
            "abbreviatedOid": "b9016d7"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-13T20:19:42Z",
          "updatedAt": "2022-12-13T20:19:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 354,
      "id": "PR_kwDOEpUZs85FXTuf",
      "title": "Describe fictional context",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/354",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #328 \r\n\r\ncc @cjpatton for \ud83d\udc40 ",
      "createdAt": "2022-12-13T19:59:09Z",
      "updatedAt": "2022-12-13T20:24:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d7ccb134fdcb7f63d4022055fe991e26a6d8c2c2",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/fictional-context",
      "headRefOid": "192eec0abf3a671284fe3dd3f1bee0253f06299c",
      "closedAt": "2022-12-13T20:24:52Z",
      "mergedAt": "2022-12-13T20:24:51Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "efb522bb0e34649dc0456adecb67890365faab03"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85IgA1k",
          "commit": {
            "abbreviatedOid": "192eec0"
          },
          "author": "cjpatton",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Yup, that's what I was thinking :)",
          "createdAt": "2022-12-13T20:12:48Z",
          "updatedAt": "2022-12-13T20:12:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85IgEv6",
          "commit": {
            "abbreviatedOid": "192eec0"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-13T20:24:39Z",
          "updatedAt": "2022-12-13T20:24:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 355,
      "id": "PR_kwDOEpUZs85FXZPD",
      "title": "Fixup poynomial coefficients example",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/355",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-13T20:15:58Z",
      "updatedAt": "2022-12-14T00:43:06Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "cad6521bef73fee6b31ef285ae075cdb3f7eb01a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-3",
      "headRefOid": "78232089b0035b67ccce01591ba205140a74bf87",
      "closedAt": "2022-12-14T00:43:02Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think this is correct. See comment on the other PR.",
          "createdAt": "2022-12-13T20:16:25Z",
          "updatedAt": "2022-12-13T20:16:25Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah the constant term is 3 and the highest-degree is 1, so \r\n\r\n> where the constant term of the polynomial is in the first position and the highest-degree coefficient is in the last position.\r\n\r\nmeans it's `[3,2,1]`",
          "createdAt": "2022-12-13T21:00:09Z",
          "updatedAt": "2022-12-13T21:00:09Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "OH damn, my reading comprehension \ud83e\udd26\u200d\u2642\ufe0f",
          "createdAt": "2022-12-14T00:43:02Z",
          "updatedAt": "2022-12-14T00:43:02Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 356,
      "id": "PR_kwDOEpUZs85FX2YQ",
      "title": "ROAST citation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/356",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #317\r\n",
      "createdAt": "2022-12-13T21:52:49Z",
      "updatedAt": "2022-12-14T00:49:38Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "efb522bb0e34649dc0456adecb67890365faab03",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "extensions-raost",
      "headRefOid": "9c248ff6bf13959fc936cd770bd17f86f639fd6d",
      "closedAt": "2022-12-14T00:44:01Z",
      "mergedAt": "2022-12-14T00:44:01Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "dedeef1a715b7bb3ca766907d7ac603bf5e59ba3"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we move this citation? It doesn't seem good to cite something like this randomly in the middle of the protocol description. I think mentioning it in the security considerations is probably better.",
          "createdAt": "2022-12-14T00:49:38Z",
          "updatedAt": "2022-12-14T00:49:38Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85IhCzv",
          "commit": {
            "abbreviatedOid": "9c248ff"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-14T00:43:29Z",
          "updatedAt": "2022-12-14T00:43:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 357,
      "id": "PR_kwDOEpUZs85FX48i",
      "title": "Fix up reference to conference version",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/357",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #319",
      "createdAt": "2022-12-13T22:01:42Z",
      "updatedAt": "2022-12-15T14:42:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "efb522bb0e34649dc0456adecb67890365faab03",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "reference",
      "headRefOid": "c4842ecfdc45602b12c3cd208395379efa88d1c9",
      "closedAt": "2022-12-15T14:41:57Z",
      "mergedAt": "2022-12-15T14:41:57Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "b5646183360369f5425e353da75f04566ccc7ae1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Im9R6",
          "commit": {
            "abbreviatedOid": "c4842ec"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-14T20:03:07Z",
          "updatedAt": "2022-12-14T20:03:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 358,
      "id": "PR_kwDOEpUZs85FX7pf",
      "title": "Nonce wording",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/358",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #320\r\n\r\nSome of the wording is arguably still up for debate, so suggestions here are very welcome.",
      "createdAt": "2022-12-13T22:10:45Z",
      "updatedAt": "2022-12-15T17:42:12Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "efb522bb0e34649dc0456adecb67890365faab03",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "nonces",
      "headRefOid": "f0046cea9d0805e398c98d67bfcb7a8d592d7289",
      "closedAt": "2022-12-15T14:35:30Z",
      "mergedAt": "2022-12-15T14:35:30Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "3e9f79fdd9ffd567a2ce6e078da529f4d8ee82d5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85IhDG4",
          "commit": {
            "abbreviatedOid": "f0046ce"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-14T00:45:28Z",
          "updatedAt": "2022-12-14T00:45:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85Im9FH",
          "commit": {
            "abbreviatedOid": "f0046ce"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This LGTM. \r\n\r\n@real-or-random, @armfazh, and @cjpatton, can you please take a look and let us know if this addresses your comments?",
          "createdAt": "2022-12-14T20:02:27Z",
          "updatedAt": "2022-12-14T20:02:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85Iqawk",
          "commit": {
            "abbreviatedOid": "f0046ce"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2022-12-15T11:57:48Z",
          "updatedAt": "2022-12-15T11:57:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85Isu2r",
          "commit": {
            "abbreviatedOid": "f0046ce"
          },
          "author": "real-or-random",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "lgtm",
          "createdAt": "2022-12-15T17:42:12Z",
          "updatedAt": "2022-12-15T17:42:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 359,
      "id": "PR_kwDOEpUZs85FX_hM",
      "title": "Min participants = 1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/359",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #321 comment for generalizing the threshold to 1\r\n\r\n",
      "createdAt": "2022-12-13T22:26:34Z",
      "updatedAt": "2022-12-15T17:49:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "efb522bb0e34649dc0456adecb67890365faab03",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "arbitrary-t",
      "headRefOid": "23307e7e90cf9ecdb82f14dbe1953e5d3a2df146",
      "closedAt": "2022-12-15T17:39:36Z",
      "mergedAt": "2022-12-15T17:39:36Z",
      "mergedBy": "conradoplg",
      "mergeCommit": {
        "oid": "0765e8fd7dcc530c0d9005c4047b0b99179f5db3"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood mind looking this over?",
          "createdAt": "2022-12-15T14:41:19Z",
          "updatedAt": "2022-12-15T14:41:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Imoqb",
          "commit": {
            "abbreviatedOid": "a11261d"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-12-14T19:16:50Z",
          "updatedAt": "2022-12-14T19:17:19Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nMIN_PARTICIPANTS = 2\r\n```\r\n\r\nI don't think this is what we want, here it's specifying the threshold for generating the test vectors, and not the minimum limit for all thresholds",
              "createdAt": "2022-12-14T19:16:50Z",
              "updatedAt": "2022-12-14T19:17:19Z"
            },
            {
              "originalPosition": 14,
              "body": "But this looks good :+1: ",
              "createdAt": "2022-12-14T19:17:04Z",
              "updatedAt": "2022-12-14T19:17:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85IrbF1",
          "commit": {
            "abbreviatedOid": "a11261d"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-15T14:40:56Z",
          "updatedAt": "2022-12-15T14:40:56Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Good point, thanks @conradoplg ! ",
              "createdAt": "2022-12-15T14:40:56Z",
              "updatedAt": "2022-12-15T14:40:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85IsJ5f",
          "commit": {
            "abbreviatedOid": "23307e7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T16:13:58Z",
          "updatedAt": "2022-12-15T16:13:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85IstYx",
          "commit": {
            "abbreviatedOid": "23307e7"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T17:38:29Z",
          "updatedAt": "2022-12-15T17:38:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85IsxKA",
          "commit": {
            "abbreviatedOid": "23307e7"
          },
          "author": "real-or-random",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-15T17:49:14Z",
          "updatedAt": "2022-12-15T17:49:14Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "editorial: maybe `if MIN_PARTICIPANTS < 1` (because you use `>` in the first part of the sentence)\r\n\r\n",
              "createdAt": "2022-12-15T17:49:14Z",
              "updatedAt": "2022-12-15T17:49:15Z"
            }
          ]
        }
      ]
    },
    {
      "number": 360,
      "id": "PR_kwDOEpUZs85FYB_V",
      "title": "Discussion of optimization for verification",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/360",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses comments in #322",
      "createdAt": "2022-12-13T22:38:31Z",
      "updatedAt": "2022-12-20T18:49:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "efb522bb0e34649dc0456adecb67890365faab03",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "sig-verify",
      "headRefOid": "a9176649b848063e40e7e1595a2d08297dc91bbe",
      "closedAt": "2022-12-20T18:49:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we can probably spell this somewhat differently. @chelseakomlo, if it's OK with you, I'd like to propose an alternative to this change.",
          "createdAt": "2022-12-15T16:15:32Z",
          "updatedAt": "2022-12-15T16:15:40Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood Sure, please do\r\n",
          "createdAt": "2022-12-16T16:02:07Z",
          "updatedAt": "2022-12-16T16:02:07Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo my alternative is up in #376.",
          "createdAt": "2022-12-20T13:07:54Z",
          "updatedAt": "2022-12-20T13:07:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85IhHSe",
          "commit": {
            "abbreviatedOid": "bdbe242"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-14T01:11:53Z",
          "updatedAt": "2022-12-14T01:11:54Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nPerforming `verify_signature_share` enables identifying misbehaving participants\r\nif any participant submitted an invalid signature share.\r\n```",
              "createdAt": "2022-12-14T01:11:54Z",
              "updatedAt": "2022-12-14T01:11:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85IyJSS",
          "commit": {
            "abbreviatedOid": "a917664"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-16T16:14:19Z",
          "updatedAt": "2022-12-16T16:14:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 361,
      "id": "PR_kwDOEpUZs85FdJg0",
      "title": "Move ROAST citation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/361",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-14T14:19:29Z",
      "updatedAt": "2022-12-15T14:40:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "dedeef1a715b7bb3ca766907d7ac603bf5e59ba3",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/move-roast",
      "headRefOid": "36711a28c1b08eea96fd2588504582780cb1aa2e",
      "closedAt": "2022-12-15T14:40:04Z",
      "mergedAt": "2022-12-15T14:40:04Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "f8651299b53f03be7990be32b7f2895598645954"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85IranW",
          "commit": {
            "abbreviatedOid": "36711a2"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T14:39:57Z",
          "updatedAt": "2022-12-15T14:39:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 362,
      "id": "PR_kwDOEpUZs85FdXxg",
      "title": "Introduce NonZeroScalar for identifier types",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/362",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #333 ",
      "createdAt": "2022-12-14T14:49:31Z",
      "updatedAt": "2022-12-21T19:20:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "dedeef1a715b7bb3ca766907d7ac603bf5e59ba3",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/identifier-type",
      "headRefOid": "ac309df1a9726178057660990f4bbf020393f128",
      "closedAt": "2022-12-21T19:20:51Z",
      "mergedAt": "2022-12-21T19:20:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e77fc68b782ec616261cfffe7deeefa1d7807f34"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Good catch on the trusted dealer section, @conradoplg! I think I'll keep the explicit type next to all use of `identifier` for now, just to avoid any possible confusion. It may be redundant, but I hope it reduces the probability of misinterpretation.",
          "createdAt": "2022-12-21T19:20:28Z",
          "updatedAt": "2022-12-21T19:20:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85JBH31",
          "commit": {
            "abbreviatedOid": "d91d6c8"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks good, I'm personally fine with merging this as is, but I have two suggestions/ideas:\r\n\r\n- Also change the Trusted Dealer Section, e.g. \r\n\r\n\r\n```diff\r\n-   - participant_private_keys, MAX_PARTICIPANTS shares of the secret key s, each a tuple\r\n-    consisting of the participant identifier and the key share (a Scalar).\r\n+   - participant_private_keys, MAX_PARTICIPANTS shares of the secret key s, each a tuple\r\n+    consisting of the participant identifier (a NonZeroScalar) and the key share (a Scalar).    \r\n```\r\n  there are 3 instances in total where `identifier` is mentioned there.\r\n  \r\n- Simply use `Identifier` instead of `NonZeroScalar` so that we can write e.g. \"indicates an Identifier i\" instead of \"indicates a NonZeroScalar identifier i\"",
          "createdAt": "2022-12-20T19:33:56Z",
          "updatedAt": "2022-12-20T19:33:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 363,
      "id": "PR_kwDOEpUZs85FdwYi",
      "title": "Make pseudocode descriptions consistent",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/363",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #330\r\n\r\nBuilds on #333 -- merge that first.",
      "createdAt": "2022-12-14T15:45:07Z",
      "updatedAt": "2022-12-22T19:45:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e7ff0a2c61b9b2220fc0b027ce8f3b8c6fde8f30",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/consistent-pseudocode",
      "headRefOid": "bae5fc8936ba7e3539772007c944eaac8cd6dd9c",
      "closedAt": "2022-12-22T19:45:00Z",
      "mergedAt": "2022-12-22T19:45:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a069bcefb460fc8801f472deb42a394454a74f7f"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@conradoplg can you please take another look?",
          "createdAt": "2022-12-21T19:26:05Z",
          "updatedAt": "2022-12-21T19:26:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85ImwLv",
          "commit": {
            "abbreviatedOid": "7d95d87"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-14T19:42:57Z",
          "updatedAt": "2022-12-14T19:46:12Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "```suggestion\r\n  - identifiers, a list of NonZeroScalar values.\r\n```",
              "createdAt": "2022-12-14T19:42:58Z",
              "updatedAt": "2022-12-14T19:46:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JBIou",
          "commit": {
            "abbreviatedOid": "dec3996"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good, added a comment about a conflict with https://github.com/cfrg/draft-irtf-cfrg-frost/pull/373 ",
          "createdAt": "2022-12-20T19:36:44Z",
          "updatedAt": "2022-12-20T19:44:57Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "The output name will change in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/373",
              "createdAt": "2022-12-20T19:36:44Z",
              "updatedAt": "2022-12-20T19:44:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JHTt3",
          "commit": {
            "abbreviatedOid": "dec3996"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-21T19:25:12Z",
          "updatedAt": "2022-12-21T19:25:12Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Rebased to resolve conflicts!",
              "createdAt": "2022-12-21T19:25:12Z",
              "updatedAt": "2022-12-21T19:25:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JH2A7",
          "commit": {
            "abbreviatedOid": "bae5fc8"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-21T21:53:37Z",
          "updatedAt": "2022-12-21T21:53:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 364,
      "id": "PR_kwDOEpUZs85Fd95u",
      "title": "Langrage basis naming",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/364",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #335",
      "createdAt": "2022-12-14T16:21:02Z",
      "updatedAt": "2022-12-20T11:58:41Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "dedeef1a715b7bb3ca766907d7ac603bf5e59ba3",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "lagrange-naming",
      "headRefOid": "6fc43a00d9aa9d15b075aaae504297dc6c4690ae",
      "closedAt": "2022-12-20T11:58:41Z",
      "mergedAt": "2022-12-20T11:58:41Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "88639423494de2d020d54146e5be6a1b2b5b78b7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85ImHr1",
          "commit": {
            "abbreviatedOid": "fb44344"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Please also update the name of the function in the reference implementation.",
          "createdAt": "2022-12-14T17:43:40Z",
          "updatedAt": "2022-12-14T17:43:58Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "We should update this section title to match.",
              "createdAt": "2022-12-14T17:43:40Z",
              "updatedAt": "2022-12-14T17:43:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85IueA9",
          "commit": {
            "abbreviatedOid": "fb44344"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-16T00:49:01Z",
          "updatedAt": "2022-12-16T00:49:01Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "```suggestion\r\n### Lagrange bases\r\n```",
              "createdAt": "2022-12-16T00:49:01Z",
              "updatedAt": "2022-12-16T00:49:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85I-ngW",
          "commit": {
            "abbreviatedOid": "6fc43a0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-20T11:58:24Z",
          "updatedAt": "2022-12-20T11:58:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 365,
      "id": "PR_kwDOEpUZs85FeGBh",
      "title": "Key relation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/365",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #336",
      "createdAt": "2022-12-14T16:42:57Z",
      "updatedAt": "2022-12-20T12:40:31Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "dedeef1a715b7bb3ca766907d7ac603bf5e59ba3",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "key-relation",
      "headRefOid": "70cbc79347c556129a269dafe8d4b819ab25eff2",
      "closedAt": "2022-12-20T12:40:31Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing in favor of #374 ",
          "createdAt": "2022-12-20T12:40:31Z",
          "updatedAt": "2022-12-20T12:40:31Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85ImJJx",
          "commit": {
            "abbreviatedOid": "70cbc79"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This particular change looks good, but we should not merge this until the Lagrange function update PR is merged. Alternatively, @chelseakomlo, can you please move this change to a separate branch?",
          "createdAt": "2022-12-14T17:47:27Z",
          "updatedAt": "2022-12-14T17:47:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85IueNp",
          "commit": {
            "abbreviatedOid": "70cbc79"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-16T00:50:24Z",
          "updatedAt": "2022-12-16T00:50:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 366,
      "id": "PR_kwDOEpUZs85FeL8V",
      "title": "Add info about vss distribution",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/366",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #342. \r\n\r\n",
      "createdAt": "2022-12-14T16:57:16Z",
      "updatedAt": "2022-12-14T21:15:18Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "dedeef1a715b7bb3ca766907d7ac603bf5e59ba3",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "vss-clarify",
      "headRefOid": "55023c18f8b1724222b3fe11925c761411a55bda",
      "closedAt": "2022-12-14T21:15:14Z",
      "mergedAt": "2022-12-14T21:15:14Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "a9fa0cb6562161445cab03e364eb4cfd160ad40e"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging but @conradoplg please let us know if there is anything more that can be clarified here. ",
          "createdAt": "2022-12-14T21:15:10Z",
          "updatedAt": "2022-12-14T21:15:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85ImJtH",
          "commit": {
            "abbreviatedOid": "0e8bc42"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-14T17:49:05Z",
          "updatedAt": "2022-12-14T17:49:09Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nThe dealer can use a secure broadcast channel to ensure each participant has a consistent view of this commitment.\r\n```",
              "createdAt": "2022-12-14T17:49:06Z",
              "updatedAt": "2022-12-14T17:49:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Im4BR",
          "commit": {
            "abbreviatedOid": "0e8bc42"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-14T19:56:17Z",
          "updatedAt": "2022-12-14T19:56:17Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I don't get this - the dealer already sends the private key and commitments though a secure channel. What else is needed here? I kinda assumed that participants had to talk between themselves to check if they have the same commitments, but I'm not sure.",
              "createdAt": "2022-12-14T19:56:17Z",
              "updatedAt": "2022-12-14T19:56:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85InQ9s",
          "commit": {
            "abbreviatedOid": "0e8bc42"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-14T21:14:08Z",
          "updatedAt": "2022-12-14T21:14:08Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Exactly, but if they talk amongst themselves to check if they have the same commitments, it has be done in a way that it fulfills the properties of a broadcast channel. Otherwise, some players could cheat and send inconsistent commitments, etc. ",
              "createdAt": "2022-12-14T21:14:08Z",
              "updatedAt": "2022-12-14T21:14:08Z"
            }
          ]
        }
      ]
    },
    {
      "number": 367,
      "id": "PR_kwDOEpUZs85Fepz2",
      "title": "add period in 'Order()' items; make explicit that DeserializeElement can return an error",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/367",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/cfrg/draft-irtf-cfrg-frost/issues/334",
      "createdAt": "2022-12-14T18:30:00Z",
      "updatedAt": "2022-12-15T17:45:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "dedeef1a715b7bb3ca766907d7ac603bf5e59ba3",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "deserialize-return-error",
      "headRefOid": "c3d987b0854ecfc02a7a32aa60fba74a5586c724",
      "closedAt": "2022-12-15T17:45:05Z",
      "mergedAt": "2022-12-15T17:45:05Z",
      "mergedBy": "conradoplg",
      "mergeCommit": {
        "oid": "3551c6ef2b3e25356cd7aaa9b4849ab992524bc2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Im0ih",
          "commit": {
            "abbreviatedOid": "c3d987b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-14T19:52:34Z",
          "updatedAt": "2022-12-14T19:52:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 368,
      "id": "PR_kwDOEpUZs85FetLe",
      "title": "add input restriction to 'polynomial_interpolation'",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/368",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/cfrg/draft-irtf-cfrg-frost/issues/340 but not sure about it, see discussion in the issue",
      "createdAt": "2022-12-14T18:40:54Z",
      "updatedAt": "2022-12-15T17:45:25Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "dedeef1a715b7bb3ca766907d7ac603bf5e59ba3",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "polynomial-interpolation-input-restriction",
      "headRefOid": "f29fe5d45ed6dc800700854bbfdee9f8a42cdb03",
      "closedAt": "2022-12-15T17:45:25Z",
      "mergedAt": "2022-12-15T17:45:25Z",
      "mergedBy": "conradoplg",
      "mergeCommit": {
        "oid": "f66b018eceab63108651ae8aca9a6fc66464c06f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Im2K_",
          "commit": {
            "abbreviatedOid": "f29fe5d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I don't feel strongly about this, so this seems fine to me.",
          "createdAt": "2022-12-14T19:54:13Z",
          "updatedAt": "2022-12-14T19:54:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 369,
      "id": "PR_kwDOEpUZs85Fe-IO",
      "title": "change RFC 8032 verification equation notation to match the spec",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/369",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/cfrg/draft-irtf-cfrg-frost/issues/337\r\n\r\nBut we still need to address the reasoning, see discussion.",
      "createdAt": "2022-12-14T19:37:51Z",
      "updatedAt": "2022-12-21T19:21:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "dedeef1a715b7bb3ca766907d7ac603bf5e59ba3",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "match-verification-notation",
      "headRefOid": "d5fbd7711c77fca212c82c62fa17f34bc6f696c1",
      "closedAt": "2022-12-21T19:21:51Z",
      "mergedAt": "2022-12-21T19:21:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "18388b3ecdafae489e9989b0634bd912ca1dbd55"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> How about just dropping \"safe\" here? The fact that it's not interoperable seems to be the reason it's not safe for given applications, as it does not lead to consensus for different implementations that need it.\r\n\r\nI'm good removing 'safe', would a 'not interoperable nor recommended in practice' be acceptable? It's not just that it's not interoperable",
          "createdAt": "2022-12-16T00:54:23Z",
          "updatedAt": "2022-12-16T00:54:23Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly  Why is \"not interoperable\" insufficient? ",
          "createdAt": "2022-12-16T15:08:25Z",
          "updatedAt": "2022-12-20T11:51:03Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Absent objections, I'm merging this. @dconnolly, if desired, please follow up on the issue with your rationale for why \"not interoperable\" is insufficient here.",
          "createdAt": "2022-12-21T19:21:48Z",
          "updatedAt": "2022-12-21T19:21:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Im5gz",
          "commit": {
            "abbreviatedOid": "7a8652e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "How about just dropping \"safe\" here? The fact that it's not interoperable seems to be the reason it's not safe for given applications, as it does not lead to consensus for different implementations that need it.",
          "createdAt": "2022-12-14T19:57:54Z",
          "updatedAt": "2022-12-14T19:58:46Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nThe alternative check [z]B = R + [c]PK is not interoperable in practice.\r\n```",
              "createdAt": "2022-12-14T19:57:54Z",
              "updatedAt": "2022-12-14T19:58:46Z"
            },
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nThe alternative check [z]B = R + [c]PK is not interoperable in practice.\r\n```",
              "createdAt": "2022-12-14T19:58:01Z",
              "updatedAt": "2022-12-14T19:58:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JHSCJ",
          "commit": {
            "abbreviatedOid": "d5fbd77"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-21T19:21:12Z",
          "updatedAt": "2022-12-21T19:21:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 370,
      "id": "PR_kwDOEpUZs85FymOr",
      "title": "Add CFRG document status requirement",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/370",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-19T14:55:07Z",
      "updatedAt": "2022-12-19T20:16:09Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "f66b018eceab63108651ae8aca9a6fc66464c06f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/doc-status",
      "headRefOid": "37371891268c47de852d40f848b3b4746672e79b",
      "closedAt": "2022-12-19T20:16:08Z",
      "mergedAt": "2022-12-19T20:16:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c61d528b974712b9a4ae4ffa1a2d7431e073e86a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85I6dYY",
          "commit": {
            "abbreviatedOid": "3737189"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-19T17:39:32Z",
          "updatedAt": "2022-12-19T17:39:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 371,
      "id": "PR_kwDOEpUZs85F3HaV",
      "title": "Fix exponent rendering",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/371",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #345",
      "createdAt": "2022-12-20T11:55:38Z",
      "updatedAt": "2022-12-20T21:17:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c61d528b974712b9a4ae4ffa1a2d7431e073e86a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/fix-render",
      "headRefOid": "5cf347a65d0260417d18f7c3cbd80c296165568d",
      "closedAt": "2022-12-20T21:17:52Z",
      "mergedAt": "2022-12-20T21:17:52Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "1556df19eaf490a48e62c7236639780e27660f96"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85I_QiD",
          "commit": {
            "abbreviatedOid": "5cf347a"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good\r\n\r\n![image](https://user-images.githubusercontent.com/35766/208683673-6e1c82ce-a96e-40c9-9d15-7626d8b0ba86.png)\r\n\r\n![image](https://user-images.githubusercontent.com/35766/208683790-1f34a01d-106b-49d3-9b20-5bf00ba66e80.png)\r\n",
          "createdAt": "2022-12-20T14:00:34Z",
          "updatedAt": "2022-12-20T14:00:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 372,
      "id": "PR_kwDOEpUZs85F3Nik",
      "title": "Revert \"Langrage basis naming\"",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/372",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Reverts cfrg/draft-irtf-cfrg-frost#364",
      "createdAt": "2022-12-20T12:17:09Z",
      "updatedAt": "2022-12-20T12:17:14Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "88639423494de2d020d54146e5be6a1b2b5b78b7",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "revert-364-lagrange-naming",
      "headRefOid": "9fbc561ab826235b203e495885e8a222875e423f",
      "closedAt": "2022-12-20T12:17:14Z",
      "mergedAt": "2022-12-20T12:17:14Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4f44023c6aeaf38d603e0ee8615694789e60af82"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 373,
      "id": "PR_kwDOEpUZs85F3S6a",
      "title": "Clarify polynomial math (and the names)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/373",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #341 \r\nCloses #335\r\n\r\ncc @armfazh for \ud83d\udc40 ",
      "createdAt": "2022-12-20T12:38:26Z",
      "updatedAt": "2022-12-21T21:53:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f44023c6aeaf38d603e0ee8615694789e60af82",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/consolidate-poly-ops",
      "headRefOid": "a761dc59d6e485d804cc88b203ebe26c95b26138",
      "closedAt": "2022-12-21T19:16:04Z",
      "mergedAt": "2022-12-21T19:16:04Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "8e63e1b6cc6ae83bcf9ade4a2bb0ec65171b3ea9"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "\ud83e\udd26 Good catch on the typo! I fixed it and also removed mention of \"Lagrange coefficient\".",
          "createdAt": "2022-12-20T17:04:01Z",
          "updatedAt": "2022-12-20T17:04:01Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "body": "All these changes look good to me, and I also added this https://github.com/cfrg/draft-irtf-cfrg-frost/pull/380",
          "createdAt": "2022-12-21T21:53:49Z",
          "updatedAt": "2022-12-21T21:53:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85JAXa1",
          "commit": {
            "abbreviatedOid": "3fd725d"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good, there is just a typo.\r\n\r\nJust to confirm, do you also want to change these lines to not mention Lagrange too?\r\n\r\n```\r\nOutputs: L_i, the i-th Lagrange coefficient\r\n```\r\n\r\n```\r\n# Compute Lagrange coefficient\r\n```\r\n\r\nPersonally I don't mind either way",
          "createdAt": "2022-12-20T16:58:30Z",
          "updatedAt": "2022-12-20T17:00:06Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "```suggestion\r\n    s = polynomial_interpolate_constant(shares)\r\n```\r\n",
              "createdAt": "2022-12-20T16:58:31Z",
              "updatedAt": "2022-12-20T17:00:06Z"
            },
            {
              "originalPosition": 135,
              "body": "```suggestion\r\ni.e., computing `y = f(x)`. The other function, `polynomial_interpolate_constant`, is for\r\n```",
              "createdAt": "2022-12-20T16:58:41Z",
              "updatedAt": "2022-12-20T17:00:06Z"
            },
            {
              "originalPosition": 161,
              "body": "```suggestion\r\nThe function `polynomial_interpolate_constant` is defined as follows.\r\n```",
              "createdAt": "2022-12-20T16:58:51Z",
              "updatedAt": "2022-12-20T17:00:06Z"
            },
            {
              "originalPosition": 170,
              "body": "```suggestion\r\n  def polynomial_interpolate_constant(points):\r\n```",
              "createdAt": "2022-12-20T16:59:00Z",
              "updatedAt": "2022-12-20T17:00:06Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\n    def polynomial_interpolate_constant(points):\r\n```",
              "createdAt": "2022-12-20T16:59:14Z",
              "updatedAt": "2022-12-20T17:00:06Z"
            },
            {
              "originalPosition": 36,
              "body": "```suggestion\r\n    s = polynomial_interpolate_constant(shares[:t])\r\n```",
              "createdAt": "2022-12-20T16:59:21Z",
              "updatedAt": "2022-12-20T17:00:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JAbtN",
          "commit": {
            "abbreviatedOid": "a761dc5"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-20T17:11:10Z",
          "updatedAt": "2022-12-20T17:11:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 374,
      "id": "PR_kwDOEpUZs85F3TT2",
      "title": "Add more detail on relation between secret signing key and shares",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/374",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #336",
      "createdAt": "2022-12-20T12:40:02Z",
      "updatedAt": "2022-12-21T19:16:22Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f44023c6aeaf38d603e0ee8615694789e60af82",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/key-relation",
      "headRefOid": "fa91549eb818494ff37ade861ec66bbf4dc6e273",
      "closedAt": "2022-12-21T19:16:22Z",
      "mergedAt": "2022-12-21T19:16:22Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "af8025f827c641927e08c2d7a3bc4341b32561be"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85JAaiW",
          "commit": {
            "abbreviatedOid": "865e967"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-12-20T17:07:35Z",
          "updatedAt": "2022-12-20T17:07:40Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "In the spec, `sk_i` is just a Scalar, forming a point together with `i`. Not sure the best wording here, maybe just\r\n\r\n```suggestion\r\n  of the group signing key `s`. In particular, `sk_i` is the value `f(i)` on a secret polynomial `f`, where `s` is `f(0)`.\r\n```\r\n\r\nAlso maybe we can expand what the polynomial is, e.g. \"a secret polynomial with of degree MIN_PARTICIPANTS-1 with randomly generated coefficients, where `s` is `f(0)`.",
              "createdAt": "2022-12-20T17:07:35Z",
              "updatedAt": "2022-12-20T17:07:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JAa_L",
          "commit": {
            "abbreviatedOid": "865e967"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-20T17:08:57Z",
          "updatedAt": "2022-12-20T17:08:57Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Using `value` is better. ",
              "createdAt": "2022-12-20T17:08:57Z",
              "updatedAt": "2022-12-20T17:08:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JAnY_",
          "commit": {
            "abbreviatedOid": "fa91549"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-20T17:48:05Z",
          "updatedAt": "2022-12-20T17:48:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85JA_le",
          "commit": {
            "abbreviatedOid": "fa91549"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-20T19:03:58Z",
          "updatedAt": "2022-12-20T19:03:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 375,
      "id": "PR_kwDOEpUZs85F3V5d",
      "title": "Name this thing FROST",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/375",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #327\r\n\r\nI'm open to hearing alternatives here, but it is quite confusing to see this written as \"a variant of FROST.\" Calling this thing FROST establishes itself as a concrete protocol. Other variants of the protocol, such as those that require just a single round, can be specified separately and named accordingly.",
      "createdAt": "2022-12-20T12:50:05Z",
      "updatedAt": "2022-12-21T19:16:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f44023c6aeaf38d603e0ee8615694789e60af82",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/name-the-thing",
      "headRefOid": "dd0b3fdcfc89c99b9eaca2b88d11bad427c3877b",
      "closedAt": "2022-12-21T19:16:32Z",
      "mergedAt": "2022-12-21T19:16:32Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a68fac60bf1f6813bc15507bf7a418f433e30ce4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85JA6H6",
          "commit": {
            "abbreviatedOid": "dd0b3fd"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me! Thanks @chris-wood ",
          "createdAt": "2022-12-20T18:43:55Z",
          "updatedAt": "2022-12-20T18:43:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 376,
      "id": "PR_kwDOEpUZs85F3a8x",
      "title": "Aggregate then verify",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/376",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #322\r\nAlternative to #360 \r\n",
      "createdAt": "2022-12-20T13:07:44Z",
      "updatedAt": "2022-12-21T19:29:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f44023c6aeaf38d603e0ee8615694789e60af82",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/aggregate-then-verify",
      "headRefOid": "e893c60f9537ad3598147352826297cf295a56ec",
      "closedAt": "2022-12-21T19:29:08Z",
      "mergedAt": "2022-12-21T19:29:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5a9fd068d0c1a32c59609ecb1203a28b4ecb16f6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85JANMI",
          "commit": {
            "abbreviatedOid": "9c09623"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-12-20T16:29:16Z",
          "updatedAt": "2022-12-20T16:32:13Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "Point to verification algorithms in the appendix. ",
              "createdAt": "2022-12-20T16:29:16Z",
              "updatedAt": "2022-12-20T16:32:13Z"
            },
            {
              "originalPosition": 97,
              "body": "Point to the verification algorithm in the appendix. ",
              "createdAt": "2022-12-20T16:30:03Z",
              "updatedAt": "2022-12-20T16:32:13Z"
            },
            {
              "originalPosition": 61,
              "body": "We should include this discussion that the resulting signature is invalid if any signature share is invalid (and the subset of valid signature shares will *not* create a valid signature) somewhere as it is request from a prior review: https://mailarchive.ietf.org/arch/msg/cfrg/ZkRsbR8nsadkSZ5KAJz4wS-h0IM/",
              "createdAt": "2022-12-20T16:31:25Z",
              "updatedAt": "2022-12-20T16:32:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JAaFU",
          "commit": {
            "abbreviatedOid": "9c09623"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-20T17:06:15Z",
          "updatedAt": "2022-12-20T17:06:15Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "This should point to the ciphersuite-specific verification routine, not the appendix, so I did that.",
              "createdAt": "2022-12-20T17:06:15Z",
              "updatedAt": "2022-12-20T17:06:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JAaVO",
          "commit": {
            "abbreviatedOid": "9972f7f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-20T17:06:57Z",
          "updatedAt": "2022-12-20T17:06:57Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "This is already stated in the PR. Please suggest clarifications if you think further clarifications are needed.",
              "createdAt": "2022-12-20T17:06:57Z",
              "updatedAt": "2022-12-20T17:06:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JAbMR",
          "commit": {
            "abbreviatedOid": "9c09623"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-20T17:09:34Z",
          "updatedAt": "2022-12-20T17:09:35Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "See above. This should NOT point to the appendix. ",
              "createdAt": "2022-12-20T17:09:34Z",
              "updatedAt": "2022-12-20T17:09:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JAf-f",
          "commit": {
            "abbreviatedOid": "9972f7f"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "IMO this looks clear to me, but I'll leave the final decision to @chelseakomlo ",
          "createdAt": "2022-12-20T17:23:14Z",
          "updatedAt": "2022-12-20T17:23:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85JAzPk",
          "commit": {
            "abbreviatedOid": "9972f7f"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good, thanks for adding those clarifications! ",
          "createdAt": "2022-12-20T18:19:55Z",
          "updatedAt": "2022-12-20T18:19:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85JA5cZ",
          "commit": {
            "abbreviatedOid": "9972f7f"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-20T18:41:24Z",
          "updatedAt": "2022-12-20T18:41:24Z",
          "comments": [
            {
              "originalPosition": 110,
              "body": "```suggestion\r\nand only if all signature shares are valid (and subsets of valid signature shares will themselves not define any valid signature), this order of operations is more expensive\r\n```",
              "createdAt": "2022-12-20T18:41:24Z",
              "updatedAt": "2022-12-20T18:41:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JBDlj",
          "commit": {
            "abbreviatedOid": "e893c60"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-20T19:18:16Z",
          "updatedAt": "2022-12-20T19:18:17Z",
          "comments": [
            {
              "originalPosition": 110,
              "body": "I went with a different framing up above. Please take a look!",
              "createdAt": "2022-12-20T19:18:17Z",
              "updatedAt": "2022-12-20T19:18:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JBDr0",
          "commit": {
            "abbreviatedOid": "e893c60"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-20T19:18:39Z",
          "updatedAt": "2022-12-20T19:18:40Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "@chelseakomlo this is the new text -- does this work?",
              "createdAt": "2022-12-20T19:18:39Z",
              "updatedAt": "2022-12-20T19:18:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JBGGz",
          "commit": {
            "abbreviatedOid": "e893c60"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-20T19:27:18Z",
          "updatedAt": "2022-12-20T19:27:18Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "@chris-wood Looks great \ud83d\udc4d ",
              "createdAt": "2022-12-20T19:27:18Z",
              "updatedAt": "2022-12-20T19:27:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 377,
      "id": "PR_kwDOEpUZs85F5THv",
      "title": "Threat model and trim section about performing FROST with no coordinator",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/377",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #324",
      "createdAt": "2022-12-20T19:00:18Z",
      "updatedAt": "2022-12-31T11:42:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f44023c6aeaf38d603e0ee8615694789e60af82",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "threat-model-clarify",
      "headRefOid": "1a2948b9451f271de2979202d9f5b013397d3674",
      "closedAt": "2022-12-31T11:42:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood Want to take a look at this? ",
          "createdAt": "2022-12-21T18:13:57Z",
          "updatedAt": "2022-12-21T18:13:57Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing in favor of #378.",
          "createdAt": "2022-12-31T11:42:08Z",
          "updatedAt": "2022-12-31T11:42:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85JA_eI",
          "commit": {
            "abbreviatedOid": "1a2948b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-20T19:03:33Z",
          "updatedAt": "2022-12-20T19:03:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 378,
      "id": "PR_kwDOEpUZs85F_HMg",
      "title": "Clarify threat model",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/378",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #324 \r\nAlternative to #377\r\n",
      "createdAt": "2022-12-21T19:58:12Z",
      "updatedAt": "2023-01-25T00:17:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f6e9708a95df0c0c32172039fe56e86540f4e1f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/threat-model",
      "headRefOid": "5bbd6f98958c600be580d70199b87372cabd0b14",
      "closedAt": "2023-01-11T18:52:46Z",
      "mergedAt": "2023-01-11T18:52:46Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c6c6dc3fe061bc54522ac84e3359e5f092a6a243"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo please re-review!",
          "createdAt": "2022-12-31T11:43:16Z",
          "updatedAt": "2022-12-31T11:43:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85JIRCN",
          "commit": {
            "abbreviatedOid": "05bd4c1"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-21T23:43:40Z",
          "updatedAt": "2022-12-21T23:43:41Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "```suggestion\r\nCoordinator is trusted to not perform a denial of service attack, and to report parties that misbehaved during protocol execution.\r\n```",
              "createdAt": "2022-12-21T23:43:40Z",
              "updatedAt": "2022-12-21T23:43:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JQzTj",
          "commit": {
            "abbreviatedOid": "a0d9f29"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-23T16:02:31Z",
          "updatedAt": "2022-12-23T16:02:32Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "```suggestion\r\nFROST does not provide robustness; i.e, all participants are required to complete the protocol honestly in order to generate a valid signature. As such, a misbehaving participant can cause a denial-of-service\r\n```",
              "createdAt": "2022-12-23T16:02:31Z",
              "updatedAt": "2022-12-23T16:02:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JQzrI",
          "commit": {
            "abbreviatedOid": "a0d9f29"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-23T16:03:19Z",
          "updatedAt": "2022-12-23T16:03:19Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "```suggestion\r\non the signing protocol, such as by contributing malformed signature shares or refusing to participate. \r\n```",
              "createdAt": "2022-12-23T16:03:19Z",
              "updatedAt": "2022-12-27T12:24:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JQ0GX",
          "commit": {
            "abbreviatedOid": "a0d9f29"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-23T16:04:08Z",
          "updatedAt": "2022-12-23T16:04:09Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "```suggestion\r\nFor example, one approach would be to remove the misbehaving participant from the set of allowed\r\n```",
              "createdAt": "2022-12-23T16:04:09Z",
              "updatedAt": "2022-12-23T16:04:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JQ1Gc",
          "commit": {
            "abbreviatedOid": "a0d9f29"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-23T16:06:15Z",
          "updatedAt": "2022-12-23T16:06:16Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "```suggestion\r\nFROST allows for identifying misbehaving participants that caused the protocol to abort; preventing this attack in future runs of the protocol requires the Coordinator to honestly report the misbehaving\r\n```",
              "createdAt": "2022-12-23T16:06:15Z",
              "updatedAt": "2022-12-23T16:06:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JQ1MS",
          "commit": {
            "abbreviatedOid": "a0d9f29"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-23T16:06:27Z",
          "updatedAt": "2022-12-23T16:06:27Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nparticipant such that applications can take corrective action.\r\n```",
              "createdAt": "2022-12-23T16:06:27Z",
              "updatedAt": "2022-12-23T16:06:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JQ2Wm",
          "commit": {
            "abbreviatedOid": "a0d9f29"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-23T16:10:26Z",
          "updatedAt": "2022-12-23T16:10:27Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "```suggestion\r\nCoordinator is trusted to not perform a denial of service attacks and to identify misbehaving participants. To prevent denial-of-service\r\n```",
              "createdAt": "2022-12-23T16:10:27Z",
              "updatedAt": "2023-01-06T03:21:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JWiAT",
          "commit": {
            "abbreviatedOid": "a0d9f29"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-27T12:27:40Z",
          "updatedAt": "2022-12-27T12:27:40Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "I don't agree with this suggestion, since (1) it assumes that the underlying channel has been authenticated as is required for public key shares to be associated with the desired entities and (2) we haven't said what \"honestly reporting\" even means. ",
              "createdAt": "2022-12-27T12:27:40Z",
              "updatedAt": "2022-12-27T12:27:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JWiHp",
          "commit": {
            "abbreviatedOid": "a0d9f29"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-27T12:28:22Z",
          "updatedAt": "2022-12-27T12:28:22Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "I don't agree with this suggestion since this is the purpose of aborting. That is, to me, DoS resistance is the security property we get from identifiable aborts.",
              "createdAt": "2022-12-27T12:28:22Z",
              "updatedAt": "2022-12-27T12:28:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JWiNA",
          "commit": {
            "abbreviatedOid": "a0d9f29"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-27T12:28:52Z",
          "updatedAt": "2022-12-27T12:28:52Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "As above, I don't agree with this suggestion since we have not described what \"reporting\" means.",
              "createdAt": "2022-12-27T12:28:52Z",
              "updatedAt": "2022-12-27T12:28:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JWlCJ",
          "commit": {
            "abbreviatedOid": "c25454f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-27T12:46:14Z",
          "updatedAt": "2022-12-27T12:46:14Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Please take a look at the latest commit and let me know what you think!",
              "createdAt": "2022-12-27T12:46:14Z",
              "updatedAt": "2022-12-27T12:46:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JjbzE",
          "commit": {
            "abbreviatedOid": "9446a98"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-03T01:19:09Z",
          "updatedAt": "2023-01-03T01:19:09Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "```suggestion\r\n* The Coordinator and at most `(MIN_PARTICIPANTS-1)` participants may be corrupted.\r\n```",
              "createdAt": "2023-01-03T01:19:09Z",
              "updatedAt": "2023-01-03T01:19:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Jjb3S",
          "commit": {
            "abbreviatedOid": "9446a98"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-03T01:20:35Z",
          "updatedAt": "2023-01-03T01:20:36Z",
          "comments": [
            {
              "originalPosition": 125,
              "body": "```suggestion\r\n  to identify and act on misbehaving participants; see {{abort}} for more information. While FROST\r\n```",
              "createdAt": "2023-01-03T01:20:36Z",
              "updatedAt": "2023-01-03T01:20:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Jjb50",
          "commit": {
            "abbreviatedOid": "fddea7b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Mostly lgtm once we resolve the remaining suggestions from @chelseakomlo ",
          "createdAt": "2023-01-03T01:21:28Z",
          "updatedAt": "2023-01-03T01:21:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85JyM78",
          "commit": {
            "abbreviatedOid": "1e65d7d"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-01-05T19:00:51Z",
          "updatedAt": "2023-01-05T19:14:51Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "```suggestion\r\nFROST assumes the network channel is authenticated to identify which signer misbehaved .\r\n```",
              "createdAt": "2023-01-05T19:00:51Z",
              "updatedAt": "2023-01-05T19:14:51Z"
            },
            {
              "originalPosition": 105,
              "body": "I'm fine leaving out the reporting language then.",
              "createdAt": "2023-01-05T19:04:10Z",
              "updatedAt": "2023-01-05T19:14:52Z"
            },
            {
              "originalPosition": 73,
              "body": "```suggestion\r\none reasonable approach would be to remove the misbehaving participant from the set of allowed\r\n```",
              "createdAt": "2023-01-05T19:10:04Z",
              "updatedAt": "2023-01-05T19:14:51Z"
            },
            {
              "originalPosition": 115,
              "body": "This language is a bit too precise; the Coordinator is also trusted to honestly perform coordination in order to prevent itself from performing denial of service. ",
              "createdAt": "2023-01-05T19:14:42Z",
              "updatedAt": "2023-01-05T19:14:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85J1tF6",
          "commit": {
            "abbreviatedOid": "0397b03"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-06T13:07:23Z",
          "updatedAt": "2023-01-06T13:07:23Z",
          "comments": [
            {
              "originalPosition": 115,
              "body": "We already say that the coordinator is trusted to not perform a DoS attack, so I'm not really sure what you're getting at here?",
              "createdAt": "2023-01-06T13:07:23Z",
              "updatedAt": "2023-01-06T13:07:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85J27t2",
          "commit": {
            "abbreviatedOid": "4e2dd02"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-06T17:17:55Z",
          "updatedAt": "2023-01-06T17:17:55Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nSHOULD abort if the signature is invalid; see {{abort}} for more information about dealing\r\n```",
              "createdAt": "2023-01-06T17:17:55Z",
              "updatedAt": "2023-01-06T17:17:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85J27x5",
          "commit": {
            "abbreviatedOid": "4e2dd02"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-06T17:18:10Z",
          "updatedAt": "2023-01-06T17:18:10Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "This is to be consistent with our language elsewhere",
              "createdAt": "2023-01-06T17:18:10Z",
              "updatedAt": "2023-01-06T17:18:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85J2797",
          "commit": {
            "abbreviatedOid": "4e2dd02"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-06T17:18:53Z",
          "updatedAt": "2023-01-06T17:18:53Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nto identify misbehaving participants,\r\n```",
              "createdAt": "2023-01-06T17:18:53Z",
              "updatedAt": "2023-01-06T17:18:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85J28Hj",
          "commit": {
            "abbreviatedOid": "4e2dd02"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-06T17:19:25Z",
          "updatedAt": "2023-01-06T17:19:26Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I think that sentence is still true in general, and is less specific?",
              "createdAt": "2023-01-06T17:19:25Z",
              "updatedAt": "2023-01-06T17:19:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85J283w",
          "commit": {
            "abbreviatedOid": "4e2dd02"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-06T17:22:09Z",
          "updatedAt": "2023-01-06T17:22:10Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "```suggestion\r\nFROST assumes the network channel is authenticated to identify which signer misbehaved.\r\n```",
              "createdAt": "2023-01-06T17:22:09Z",
              "updatedAt": "2023-01-06T17:22:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85J29TZ",
          "commit": {
            "abbreviatedOid": "4e2dd02"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good, with a few minor suggestions.",
          "createdAt": "2023-01-06T17:23:42Z",
          "updatedAt": "2023-01-06T17:23:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85KEwRB",
          "commit": {
            "abbreviatedOid": "5bbd6f9"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-10T18:24:26Z",
          "updatedAt": "2023-01-10T18:24:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85KPt6A",
          "commit": {
            "abbreviatedOid": "5bbd6f9"
          },
          "author": "real-or-random",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "that indeed resolves my confusion around \"honest-but-curious\" :)",
          "createdAt": "2023-01-12T13:49:05Z",
          "updatedAt": "2023-01-12T13:52:55Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "note: I don't think \"if and only if\" holds. If the shares are valid, then the aggregate signature will be valid but I don't think the other direction holds.",
              "createdAt": "2023-01-12T13:49:05Z",
              "updatedAt": "2023-01-12T13:52:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85KSsri",
          "commit": {
            "abbreviatedOid": "5bbd6f9"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-12T20:15:51Z",
          "updatedAt": "2023-01-12T20:15:51Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "@real-or-random example? ",
              "createdAt": "2023-01-12T20:15:51Z",
              "updatedAt": "2023-01-12T20:15:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85LnD18",
          "commit": {
            "abbreviatedOid": "5bbd6f9"
          },
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-25T00:16:23Z",
          "updatedAt": "2023-01-25T00:16:24Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "One share is off by -1, yet another is off by +1. Each share is invalid yet the aggregate will be fully valid. There's also random chance for two invalid, randomly derived shares, to collide.\r\n\r\n(old post, I know, doing upgrade review and saw this hanging)",
              "createdAt": "2023-01-25T00:16:24Z",
              "updatedAt": "2023-01-25T00:17:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 379,
      "id": "PR_kwDOEpUZs85F_el3",
      "title": "No Ed448 context string",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/379",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-21T21:46:34Z",
      "updatedAt": "2022-12-22T18:26:26Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e7ff0a2c61b9b2220fc0b027ce8f3b8c6fde8f30",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/no-ed448-context",
      "headRefOid": "a9cd33b13a28a71eb644cecfbf435bb5e9ecba5b",
      "closedAt": "2022-12-22T18:26:26Z",
      "mergedAt": "2022-12-22T18:26:26Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "bc347149942537b32ce30c736ba2b2e17d2e80b8"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm assuming the downsides of not allowing this context strong are strongly outweighed by the upsides of having consistency among the ciphersuites. ",
          "createdAt": "2022-12-22T17:43:40Z",
          "updatedAt": "2022-12-22T17:43:50Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Mostly that no one cares about context strings, and if they do, we could define a ciphersuite in the future to use them.",
          "createdAt": "2022-12-22T17:44:28Z",
          "updatedAt": "2022-12-22T17:44:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85JMlsF",
          "commit": {
            "abbreviatedOid": "7284f08"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks @chris-wood ! ",
          "createdAt": "2022-12-22T17:42:40Z",
          "updatedAt": "2022-12-22T17:42:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85JMvRz",
          "commit": {
            "abbreviatedOid": "7284f08"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-22T18:13:42Z",
          "updatedAt": "2022-12-22T18:13:42Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "This can be a bit confusing, because it's talking about two different context strings in sequence. Here's a suggestion but it's not great\r\n\r\n```suggestion\r\nmeant to produce Ed448-compliant signatures as specified in {{!RFC8032}}. Note that this\r\nciphersuite does not allow applications to specify a context string as is allowed for Ed448\r\nin {{RFC8032}}, and always sets the {{RFC8032}} context string to the empty string. The value of the (internal to FROST) contextString parameter is \"FROST-ED448-SHAKE256-v11\".\r\n```",
              "createdAt": "2022-12-22T18:13:42Z",
              "updatedAt": "2022-12-22T18:13:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 380,
      "id": "PR_kwDOEpUZs85F_fum",
      "title": "minor nits",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/380",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-21T21:53:15Z",
      "updatedAt": "2022-12-22T19:44:06Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "bc347149942537b32ce30c736ba2b2e17d2e80b8",
      "headRepository": "armfazh/draft-irtf-cfrg-frost",
      "headRefName": "patch-1",
      "headRefOid": "b723f980ecbb41f7d5aa7e61fe7051ab3ba6c307",
      "closedAt": "2022-12-22T19:44:05Z",
      "mergedAt": "2022-12-22T19:44:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "1d0dd3c50c3fbe3ccf3c0f98bf06168f84f1576b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85JMlDj",
          "commit": {
            "abbreviatedOid": "dd96458"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good, thanks @armfazh ! ",
          "createdAt": "2022-12-22T17:41:34Z",
          "updatedAt": "2022-12-22T17:41:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85JMmCm",
          "commit": {
            "abbreviatedOid": "dd96458"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-12-22T17:43:49Z",
          "updatedAt": "2022-12-22T17:43:53Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "The other changes look good, but please revert this change. I think it's less clear without much benefit (saving one line).",
              "createdAt": "2022-12-22T17:43:49Z",
              "updatedAt": "2022-12-22T17:43:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JMyrg",
          "commit": {
            "abbreviatedOid": "dd96458"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-22T18:21:33Z",
          "updatedAt": "2022-12-22T18:21:33Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "I changed this to be in line with the code for `polynomial_evaluate`, which also uses similar syntax. \r\n\r\n```\r\nfor coeff in reverse(coeffs):\r\n      value *= x\r\n      value += coeff\r\n```",
              "createdAt": "2022-12-22T18:21:33Z",
              "updatedAt": "2022-12-22T18:21:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JM0-N",
          "commit": {
            "abbreviatedOid": "dd96458"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-22T18:27:30Z",
          "updatedAt": "2022-12-22T18:27:30Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "The difference, to me, is that this one line now does two things: it multiplies two values, and then adds the result to the accumulator. The examples in `polynomial_evaluate` just do one thing. ",
              "createdAt": "2022-12-22T18:27:30Z",
              "updatedAt": "2022-12-22T18:27:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JNDHS",
          "commit": {
            "abbreviatedOid": "dd96458"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-22T19:20:26Z",
          "updatedAt": "2022-12-22T19:20:26Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "updated now.",
              "createdAt": "2022-12-22T19:20:26Z",
              "updatedAt": "2022-12-22T19:20:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JNI7x",
          "commit": {
            "abbreviatedOid": "b723f98"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-22T19:44:01Z",
          "updatedAt": "2022-12-22T19:44:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 381,
      "id": "PR_kwDOEpUZs85GFIZO",
      "title": "expand aggregate parameters",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/381",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is just a suggestion.\r\n\r\nAfter reordering the aggregate section, it's not clear how the `group_commitment` is computed since it's described only in `verify_signature_share` which is listed later.\r\n\r\nThis changes `aggregate` to compute `group_commitment` from `commitment_list` and `msg`.\r\n\r\nWe could also additionally change `verify_signature_share` to receive a `group_commitment`.",
      "createdAt": "2022-12-22T21:46:45Z",
      "updatedAt": "2022-12-23T13:10:13Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "a069bcefb460fc8801f472deb42a394454a74f7f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "expand-aggregate-params",
      "headRefOid": "f6f41b7bbc4bc85b15ced9db9044936cffef33ac",
      "closedAt": "2022-12-23T13:10:13Z",
      "mergedAt": "2022-12-23T13:10:13Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "45172f37a278ce26048759fc445bae19698201b9"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is fine \ud83d\udc4d Can you please also update the reference implementation to match?",
          "createdAt": "2022-12-22T22:45:36Z",
          "updatedAt": "2022-12-22T22:45:36Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think this is fine +1 Can you please also update the reference implementation to match?\r\n\r\nSure, done in f6f41b7",
          "createdAt": "2022-12-23T13:04:55Z",
          "updatedAt": "2022-12-23T13:04:55Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85JQGPq",
          "commit": {
            "abbreviatedOid": "f6f41b7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-23T13:10:07Z",
          "updatedAt": "2022-12-23T13:10:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 382,
      "id": "PR_kwDOEpUZs85GFSTu",
      "title": "Reminder about where public key material comes from when used in verification",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/382",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #344 cc @armfazh ",
      "createdAt": "2022-12-22T22:41:33Z",
      "updatedAt": "2022-12-27T12:22:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "a069bcefb460fc8801f472deb42a394454a74f7f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "clarify-coord-inputs",
      "headRefOid": "6bd04ad8118646e9da7b1942f6fd3386569c4eaa",
      "closedAt": "2022-12-27T12:22:52Z",
      "mergedAt": "2022-12-27T12:22:52Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6da660691e1af605408a4952dbfc8cc4f0c1f2aa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85JNyrD",
          "commit": {
            "abbreviatedOid": "be7891d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-12-22T22:43:59Z",
          "updatedAt": "2022-12-22T22:44:01Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Can we move this down to L828? It doesn't seem useful here. ",
              "createdAt": "2022-12-22T22:43:59Z",
              "updatedAt": "2022-12-22T22:44:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JRsaO",
          "commit": {
            "abbreviatedOid": "be7891d"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-23T19:47:38Z",
          "updatedAt": "2022-12-23T19:47:38Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Line 828? Done.",
              "createdAt": "2022-12-23T19:47:38Z",
              "updatedAt": "2022-12-23T19:47:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JRtEm",
          "commit": {
            "abbreviatedOid": "1a48fab"
          },
          "author": "armfazh",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-23T19:54:45Z",
          "updatedAt": "2022-12-23T19:54:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85JWhKJ",
          "commit": {
            "abbreviatedOid": "1a48fab"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-27T12:22:30Z",
          "updatedAt": "2022-12-27T12:22:30Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nThe function for verifying a signature share, denoted `verify_signature_share`, is described below.\r\nRecall that the Coordinator is configured with \"group info\" which contains\r\nthe group public key `PK` and public keys `PK_i` for each participant.\r\n```",
              "createdAt": "2022-12-27T12:22:30Z",
              "updatedAt": "2022-12-27T12:22:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JWhMn",
          "commit": {
            "abbreviatedOid": "6bd04ad"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-27T12:22:45Z",
          "updatedAt": "2022-12-27T12:22:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 383,
      "id": "PR_kwDOEpUZs85GHb0m",
      "title": "Bump actions/setup-python from 4.1.0 to 4.4.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/383",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4.1.0 to 4.4.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>Add support to install multiple python versions</h2>\n<p>In scope of this release we added support to <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/567\">install multiple python versions</a>. For this you can try to use this snippet:</p>\n<pre lang=\"yaml\"><code>    - uses: actions/setup-python@v4\n      with:\n        python-version: |\n            3.8\n            3.9\n            3.10\n</code></pre>\n<p>Besides, we changed logic with throwing the error for GHES if cache is unavailable to warn (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/566\">actions/setup-python#566</a>).</p>\n<h2>Improve error handling and messages</h2>\n<p>In scope of this release we added improved error message to put operating system and its version in the logs (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/559\">actions/setup-python#559</a>). Besides, the release</p>\n<ul>\n<li>fixes issue about <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/518\">specifying architecture for pypy-nightly on Windows</a> with related <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/520\">pull request</a>.</li>\n<li>improves error handling for Http Errors (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/511\">actions/setup-python#511</a>).</li>\n<li>updates minimatch (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/558\">actions/setup-python#558</a>).</li>\n</ul>\n<h2>v4.3.0</h2>\n<ul>\n<li>Update <code>@\u200bactions/core</code> to 1.10.0 version <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/517\">#517</a></li>\n<li>Update <code>@\u200bactions/cache</code> to 3.0.4 version <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/499\">#499</a></li>\n<li>Only use github.token on github.com <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/443\">#443</a></li>\n<li>Improvement of documentation <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/477\">#477</a>  <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/479\">#479</a> <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/491\">#491</a>  <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/492\">#492</a></li>\n</ul>\n<h2>Add check-latest input and bug fixes</h2>\n<p>In scope of this release we add the\u00a0<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/406\">check-latest</a>\u00a0input. If\u00a0check-latest\u00a0is set to\u00a0true, the action first checks if the cached version is the latest one. If the locally cached version is not the most up-to-date, the version will then be downloaded from\u00a0<a href=\"https://github.com/actions/python-versions\">python-versions</a>\u00a0repository. By default\u00a0check-latest\u00a0is set to\u00a0false. For PyPy it will to try to reach <a href=\"https://downloads.python.org/pypy/versions.json\">https://downloads.python.org/pypy/versions.json</a></p>\n<h3>Example of usage:</h3>\n<pre lang=\"yaml\"><code>steps:\n  - uses: actions/checkout@v3\n  - uses: actions/setup-python@v4\n    with:\n      python-version: '3.9'\n      check-latest: true\n  - run: python --version\n</code></pre>\n<p>Besides, it includes such changes as</p>\n<ul>\n<li>Resolved logs for python-version and file inputs: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/465\">actions/setup-python#465</a></li>\n<li>Added linux os release info to primary key: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/467\">actions/setup-python#467</a></li>\n<li>Added fix to change Python versions for poetry: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/445\">actions/setup-python#445</a></li>\n<li>Fix Tool Path handling for self-hosted runners: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/466\">actions/setup-python#466</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/5ccb29d8773c3f3f653e1705f474dfaa8a06a912\"><code>5ccb29d</code></a> Install multiple python versions (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/567\">#567</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/c3e033939cccc2ea50f0194cbc59de6fc5265be6\"><code>c3e0339</code></a> Update action to use reusable workflows (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/569\">#569</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/206e984b94c0532e57811bc170b0832bc4515975\"><code>206e984</code></a> refactor: Use early return pattern to avoid nested conditions (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/566\">#566</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/2c3dd9e7e29afd70cc0950079bde6c979d1f69f9\"><code>2c3dd9e</code></a> Add OS info to the error message (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/559\">#559</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/76bbdfadd7792e54db5b82bd04a77913663d4dd6\"><code>76bbdfa</code></a> Update minimatch (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/558\">#558</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/1aafadcfb96443dc8b2c66d464369fad6ead5571\"><code>1aafadc</code></a> Caching projects that use setup.py (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/549\">#549</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/b80efd6bc5dcdc82c015d69ecd3e39320d0095e6\"><code>b80efd6</code></a> Update to latest <code>actions/publish-action</code> (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/546\">#546</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/5cddb278857fec730853802fad5126d9d78895d5\"><code>5cddb27</code></a> Recommend setting python-version (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/545\">#545</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/47c4a7af1d72897a511c975c95a5335bb6329dec\"><code>47c4a7a</code></a> fix(ci): run <code>.github/workflows/workflow.yml</code> on ubuntu-20.04 (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/535\">#535</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/af57b6499414c9dd25c305c7c008a5109c5a188f\"><code>af57b64</code></a> Extend docu regarding rate limit issues. (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/510\">#510</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v4.1.0...v4.4.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=4.1.0&new-version=4.4.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-12-23T12:04:39Z",
      "updatedAt": "2022-12-31T11:42:06Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "a069bcefb460fc8801f472deb42a394454a74f7f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.4.0",
      "headRefOid": "cef3576dd71c9cbf4ad8145b54bc705fe007dfb1",
      "closedAt": "2022-12-31T11:41:55Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
          "createdAt": "2022-12-31T11:41:57Z",
          "updatedAt": "2022-12-31T11:41:57Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 384,
      "id": "PR_kwDOEpUZs85GPxt1",
      "title": "Apply RGLC edits",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/384",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Partially closes #329. @cjpatton's line wrapping comment isn't addressed here, and I'm torn between addressing it now or letting the RFC editor deal with it. Note that addressing some will require using different notation or parameter names. I'll chew on that this week...",
      "createdAt": "2022-12-27T13:15:21Z",
      "updatedAt": "2023-01-06T13:10:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "6da660691e1af605408a4952dbfc8cc4f0c1f2aa",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/rglc-editorial",
      "headRefOid": "7d2ada79c49b3e6f9aba5fe2f9aee34046afc6c6",
      "closedAt": "2023-01-06T13:10:36Z",
      "mergedAt": "2023-01-06T13:10:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "768d83825c4f51b7004562e0729f68fc60591c59"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Jjabk",
          "commit": {
            "abbreviatedOid": "978a762"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-03T00:45:51Z",
          "updatedAt": "2023-01-03T00:45:52Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "Meh, ok",
              "createdAt": "2023-01-03T00:45:51Z",
              "updatedAt": "2023-01-03T00:45:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JjadE",
          "commit": {
            "abbreviatedOid": "978a762"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-03T00:46:27Z",
          "updatedAt": "2023-01-03T00:46:28Z",
          "comments": [
            {
              "originalPosition": 130,
              "body": "```suggestion\r\nkey `s` is Shamir secret-shared amongst each of the `MAX_PARTICIPANTS` participants\r\n```",
              "createdAt": "2023-01-03T00:46:28Z",
              "updatedAt": "2023-01-03T00:46:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Jjamu",
          "commit": {
            "abbreviatedOid": "7d2ada7"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-03T00:50:18Z",
          "updatedAt": "2023-01-03T00:50:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 385,
      "id": "PR_kwDOEpUZs85GlNQ7",
      "title": "Fix minor inconsistencies",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/385",
      "state": "MERGED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "cc @chris-wood",
      "createdAt": "2023-01-04T01:21:21Z",
      "updatedAt": "2023-01-06T13:11:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "6da660691e1af605408a4952dbfc8cc4f0c1f2aa",
      "headRepository": "bytemare/draft-irtf-cfrg-frost",
      "headRefName": "patch-1",
      "headRefOid": "e2e901a280cf3c62a035fc955667fa9e92e31a76",
      "closedAt": "2023-01-06T13:11:39Z",
      "mergedAt": "2023-01-06T13:11:39Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4f6e9708a95df0c0c32172039fe56e86540f4e1f"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Nice catches \ud83d\udc4d ",
          "createdAt": "2023-01-04T10:44:11Z",
          "updatedAt": "2023-01-04T10:44:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Jpv9d",
          "commit": {
            "abbreviatedOid": "f6c3c57"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-04T10:44:03Z",
          "updatedAt": "2023-01-04T10:44:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85JzR2H",
          "commit": {
            "abbreviatedOid": "f6c3c57"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-05T23:43:16Z",
          "updatedAt": "2023-01-05T23:43:17Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "@chris-wood we don't define the Scalar += operation in this document, do we need to? We define the + operation for group Elements and the '=' as assignment, and use '+=' in places, but haven't defined '+=' explicitly for Elements, so perhaps we don't _need_ to, but I figured I'd ask",
              "createdAt": "2023-01-05T23:43:17Z",
              "updatedAt": "2023-01-05T23:45:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85JzTCi",
          "commit": {
            "abbreviatedOid": "f6c3c57"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-05T23:52:53Z",
          "updatedAt": "2023-01-05T23:52:53Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Oh, you're right ! I did that change to harmonize the usage of this operator throughout function definitions, but did not consider the nature of the receivers.",
              "createdAt": "2023-01-05T23:52:53Z",
              "updatedAt": "2023-01-05T23:52:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85J1t-p",
          "commit": {
            "abbreviatedOid": "f6c3c57"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-06T13:10:59Z",
          "updatedAt": "2023-01-06T13:11:00Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n      z = z + z_i\r\n```",
              "createdAt": "2023-01-06T13:10:59Z",
              "updatedAt": "2023-01-06T13:11:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85J1uDA",
          "commit": {
            "abbreviatedOid": "e2e901a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-06T13:11:10Z",
          "updatedAt": "2023-01-06T13:11:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85J1uG3",
          "commit": {
            "abbreviatedOid": "f6c3c57"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-06T13:11:24Z",
          "updatedAt": "2023-01-06T13:11:24Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Good catch. I reverted the change.",
              "createdAt": "2023-01-06T13:11:24Z",
              "updatedAt": "2023-01-06T13:11:24Z"
            }
          ]
        }
      ]
    },
    {
      "number": 389,
      "id": "PR_kwDOEpUZs85G7jO6",
      "title": "Reformat vector structures",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/389",
      "state": "MERGED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed with @chris-wood offline, this reformats the vector structures, mainly to include the participant identifier as a json struct value and not a key. This allows test code ingesting the json vectors to not depend on the identifiers as struct keys, and hence be more adaptable.",
      "createdAt": "2023-01-08T23:43:56Z",
      "updatedAt": "2023-05-23T11:25:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f6e9708a95df0c0c32172039fe56e86540f4e1f",
      "headRepository": "bytemare/draft-irtf-cfrg-frost",
      "headRefName": "dbz/reformat-vectors",
      "headRefOid": "18243d62ea72eeb3075601ea4596cbfb34a0af99",
      "closedAt": "2023-05-23T11:25:46Z",
      "mergedAt": "2023-05-23T11:25:46Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "18243d62ea72eeb3075601ea4596cbfb34a0af99"
      },
      "comments": [
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "~Something curious: my implementation verifies the former vectors, even in the new format. But a re-run of `make test` creates new values for hiding and binding nonce randomness, which should be valid values, but my implementation does not validate the result. Not sure what's going on :/~\r\n\r\n**UPDATE: fixed it.**",
          "createdAt": "2023-01-09T00:09:49Z",
          "updatedAt": "2023-04-17T21:49:59Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 390,
      "id": "PR_kwDOEpUZs85HAS05",
      "title": "Fix leftover MAX_SIGNER to MAX_PARTICIPANTS",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/390",
      "state": "MERGED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-01-09T18:39:33Z",
      "updatedAt": "2023-01-09T19:52:43Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f6e9708a95df0c0c32172039fe56e86540f4e1f",
      "headRepository": "bytemare/draft-irtf-cfrg-frost",
      "headRefName": "patch-2",
      "headRefOid": "027d1dbdc3e387715326ac254ab9f5f7c3a19e80",
      "closedAt": "2023-01-09T19:52:12Z",
      "mergedAt": "2023-01-09T19:52:12Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "b66f187a34a3c4a5c9f4c1fe358149d36ff46f4e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85J-dYy",
          "commit": {
            "abbreviatedOid": "027d1db"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-09T19:52:07Z",
          "updatedAt": "2023-01-09T19:52:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 391,
      "id": "PR_kwDOEpUZs85HPXDu",
      "title": "Bump actions/setup-python from 4.1.0 to 4.5.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/391",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4.1.0 to 4.5.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>Fix cache issue for Poetry projects located in subfolders</h2>\n<p>In scope of this release we fixed cache issue for Poetry projects located in subfolders (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/446\">actions/setup-python#446</a>). Besides that we updated json5 version from 2.2.0 to 2.2.3 (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/579\">actions/setup-python#579</a>).</p>\n<h2>Add support to install multiple python versions</h2>\n<p>In scope of this release we added support to <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/567\">install multiple python versions</a>. For this you can try to use this snippet:</p>\n<pre lang=\"yaml\"><code>    - uses: actions/setup-python@v4\n      with:\n        python-version: |\n            3.8\n            3.9\n            3.10\n</code></pre>\n<p>Besides, we changed logic with throwing the error for GHES if cache is unavailable to warn (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/566\">actions/setup-python#566</a>).</p>\n<h2>Improve error handling and messages</h2>\n<p>In scope of this release we added improved error message to put operating system and its version in the logs (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/559\">actions/setup-python#559</a>). Besides, the release</p>\n<ul>\n<li>fixes issue about <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/518\">specifying architecture for pypy-nightly on Windows</a> with related <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/520\">pull request</a>.</li>\n<li>improves error handling for Http Errors (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/511\">actions/setup-python#511</a>).</li>\n<li>updates minimatch (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/558\">actions/setup-python#558</a>).</li>\n</ul>\n<h2>v4.3.0</h2>\n<ul>\n<li>Update <code>@\u200bactions/core</code> to 1.10.0 version <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/517\">#517</a></li>\n<li>Update <code>@\u200bactions/cache</code> to 3.0.4 version <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/499\">#499</a></li>\n<li>Only use github.token on github.com <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/443\">#443</a></li>\n<li>Improvement of documentation <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/477\">#477</a>  <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/479\">#479</a> <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/491\">#491</a>  <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/492\">#492</a></li>\n</ul>\n<h2>Add check-latest input and bug fixes</h2>\n<p>In scope of this release we add the\u00a0<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/406\">check-latest</a>\u00a0input. If\u00a0check-latest\u00a0is set to\u00a0true, the action first checks if the cached version is the latest one. If the locally cached version is not the most up-to-date, the version will then be downloaded from\u00a0<a href=\"https://github.com/actions/python-versions\">python-versions</a>\u00a0repository. By default\u00a0check-latest\u00a0is set to\u00a0false. For PyPy it will to try to reach <a href=\"https://downloads.python.org/pypy/versions.json\">https://downloads.python.org/pypy/versions.json</a></p>\n<h3>Example of usage:</h3>\n<pre lang=\"yaml\"><code>steps:\n  - uses: actions/checkout@v3\n  - uses: actions/setup-python@v4\n    with:\n      python-version: '3.9'\n      check-latest: true\n  - run: python --version\n</code></pre>\n<p>Besides, it includes such changes as</p>\n<ul>\n<li>Resolved logs for python-version and file inputs: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/465\">actions/setup-python#465</a></li>\n<li>Added linux os release info to primary key: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/467\">actions/setup-python#467</a></li>\n<li>Added fix to change Python versions for poetry: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/445\">actions/setup-python#445</a></li>\n<li>Fix Tool Path handling for self-hosted runners: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/466\">actions/setup-python#466</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435\"><code>d27e3f3</code></a> Fix outdated ref to actions/setup-python@v3 in doc (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/581\">#581</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/dec86ecf4e7508d3930ae42abcdc575f35ea490d\"><code>dec86ec</code></a> Bump json5 from 2.2.0 to 2.2.3 (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/579\">#579</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/4dcd67678fa3503efac0834f974a48946bcc8037\"><code>4dcd676</code></a> Update CODEOWNERS (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/576\">#576</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/8b89ef08a08c1818d354fdb6c8af1ae93a2acb01\"><code>8b89ef0</code></a> Use correct Poetry config when collecting Poetry projects (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/447\">#447</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/5ccb29d8773c3f3f653e1705f474dfaa8a06a912\"><code>5ccb29d</code></a> Install multiple python versions (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/567\">#567</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/c3e033939cccc2ea50f0194cbc59de6fc5265be6\"><code>c3e0339</code></a> Update action to use reusable workflows (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/569\">#569</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/206e984b94c0532e57811bc170b0832bc4515975\"><code>206e984</code></a> refactor: Use early return pattern to avoid nested conditions (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/566\">#566</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/2c3dd9e7e29afd70cc0950079bde6c979d1f69f9\"><code>2c3dd9e</code></a> Add OS info to the error message (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/559\">#559</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/76bbdfadd7792e54db5b82bd04a77913663d4dd6\"><code>76bbdfa</code></a> Update minimatch (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/558\">#558</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/1aafadcfb96443dc8b2c66d464369fad6ead5571\"><code>1aafadc</code></a> Caching projects that use setup.py (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/549\">#549</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v4.1.0...v4.5.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=4.1.0&new-version=4.5.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2023-01-12T12:05:21Z",
      "updatedAt": "2023-01-12T23:32:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c6c6dc3fe061bc54522ac84e3359e5f092a6a243",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.5.0",
      "headRefOid": "1a9053808d8ef87db38cc11609452ea43b70ae86",
      "closedAt": "2023-01-12T23:32:46Z",
      "mergedAt": "2023-01-12T23:32:46Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "263094c7e87fd4cfa1527b674b22129ff13cb308"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85KT3Zf",
          "commit": {
            "abbreviatedOid": "1a90538"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-12T23:32:41Z",
          "updatedAt": "2023-01-12T23:32:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 392,
      "id": "PR_kwDOEpUZs85HRMXm",
      "title": "fix some warnings when generating output",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/392",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "All there is left are \"Too long line\" warnings, not sure if we need to solve those",
      "createdAt": "2023-01-12T17:48:11Z",
      "updatedAt": "2023-01-12T17:51:10Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c6c6dc3fe061bc54522ac84e3359e5f092a6a243",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "fix-warnings",
      "headRefOid": "4859ad48868b2d634a5808a3e069a48a667832da",
      "closedAt": "2023-01-12T17:51:10Z",
      "mergedAt": "2023-01-12T17:51:10Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "dc4799499f053a926e18029e0d2a7f704277e415"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85KRsK4",
          "commit": {
            "abbreviatedOid": "4859ad4"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-12T17:48:26Z",
          "updatedAt": "2023-01-12T17:49:18Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Unused reference",
              "createdAt": "2023-01-12T17:48:26Z",
              "updatedAt": "2023-01-12T17:49:18Z"
            },
            {
              "originalPosition": 19,
              "body": "The brackets were being interpreted as references. We could escape them, but this seems easier and better looking",
              "createdAt": "2023-01-12T17:48:53Z",
              "updatedAt": "2023-01-12T17:49:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85KRtiZ",
          "commit": {
            "abbreviatedOid": "4859ad4"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-12T17:50:54Z",
          "updatedAt": "2023-01-12T17:50:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 393,
      "id": "PR_kwDOEpUZs85HSOno",
      "title": "Remove false example",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/393",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @conradoplg, @real-or-random",
      "createdAt": "2023-01-12T22:21:59Z",
      "updatedAt": "2023-01-13T11:14:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "1d3e08bdf539aa571762424a071b4296e5203629",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "remove-false-example",
      "headRefOid": "7b10688fbf294ff3c93bbf3d4c4b7dd48bdacc01",
      "closedAt": "2023-01-13T11:14:56Z",
      "mergedAt": "2023-01-13T11:14:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "08c05d5067081cedef075d96d619d1ba18b5b5c7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85KTrFr",
          "commit": {
            "abbreviatedOid": "7b10688"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-12T22:27:49Z",
          "updatedAt": "2023-01-12T22:27:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85KWNg3",
          "commit": {
            "abbreviatedOid": "7b10688"
          },
          "author": "real-or-random",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-13T10:28:07Z",
          "updatedAt": "2023-01-13T10:28:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 394,
      "id": "PR_kwDOEpUZs85Hi9te",
      "title": "clarify how group info is used in verify_signature_share",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/394",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/cfrg/draft-irtf-cfrg-frost/issues/387",
      "createdAt": "2023-01-17T14:21:53Z",
      "updatedAt": "2023-01-17T21:22:35Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "08c05d5067081cedef075d96d619d1ba18b5b5c7",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "clarify-group-info-usage",
      "headRefOid": "6d4498f0999d96105663e1ed6402ec6f0d19f7e0",
      "closedAt": "2023-01-17T21:22:35Z",
      "mergedAt": "2023-01-17T21:22:35Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "cc8104782bf68f631809324f87f18f236e7f077a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85KoW4M",
          "commit": {
            "abbreviatedOid": "6d4498f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-17T17:24:14Z",
          "updatedAt": "2023-01-17T17:24:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 395,
      "id": "PR_kwDOEpUZs85Hkkni",
      "title": "Remove min_participatnts from secret_share_shard",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/395",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses issue #386",
      "createdAt": "2023-01-17T19:43:02Z",
      "updatedAt": "2023-01-18T21:24:59Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "08c05d5067081cedef075d96d619d1ba18b5b5c7",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "min-participants-update",
      "headRefOid": "ff1107c4cd4a9e3ec53e2aa5129bccbbc3b1ed89",
      "closedAt": "2023-01-18T21:24:54Z",
      "mergedAt": "2023-01-18T21:24:54Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "6e59dc933d41d7588f129b75e10d75627c9b3279"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @dconnolly ! Hopefully I got all of them now, please point out/make suggestions to any remaining if you spot them.",
          "createdAt": "2023-01-17T20:23:26Z",
          "updatedAt": "2023-01-17T20:23:26Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly this LGTM now. Please merge if you approve!",
          "createdAt": "2023-01-18T15:56:21Z",
          "updatedAt": "2023-01-18T15:56:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85KpUKJ",
          "commit": {
            "abbreviatedOid": "8c6669d"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "MIN_PARTICIPANTS is still part of the shard routine signature ",
          "createdAt": "2023-01-17T19:45:50Z",
          "updatedAt": "2023-01-17T19:45:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85KuwLg",
          "commit": {
            "abbreviatedOid": "ff1107c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-18T15:56:00Z",
          "updatedAt": "2023-01-18T15:56:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85LJjA2",
          "commit": {
            "abbreviatedOid": "ff1107c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-18T21:24:30Z",
          "updatedAt": "2023-01-18T21:24:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85LJjFg",
          "commit": {
            "abbreviatedOid": "ff1107c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-18T21:24:46Z",
          "updatedAt": "2023-01-18T21:24:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 396,
      "id": "PR_kwDOEpUZs85HlNX6",
      "title": "Address side channels in security considerations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/396",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #388",
      "createdAt": "2023-01-17T22:58:36Z",
      "updatedAt": "2023-01-20T19:14:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "cc8104782bf68f631809324f87f18f236e7f077a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "side-channels",
      "headRefOid": "1f32f0ac14641b2308f24dce9cecd3ee78c9f639",
      "closedAt": "2023-01-19T20:43:09Z",
      "mergedAt": "2023-01-19T20:43:09Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d2a882f900c4bd84623ee853f1ad282c8db8291d"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> Looks good. I just wonder about `DeserializeScalar` and its handling of out-of-range inputs, does that needs to be constant time? I'm not sure.\r\n> \r\n> Also we might want to wrap the paragraphs like the rest of the file.\r\n\r\nDid a line wrap \ud83e\uddf5\r\n\r\nEach description of `DeserializeScalar()` including for each ciphersuite describes a finite number of bytes they are trying to parse into a Scalar (32 bytes, 57 bytes, etc), so in practice, there are only a small number of values that can be represented in 'the rest of the last byte' that are out of range, parsing those also in constant-time seems fine? Am I missing something? \r\n",
          "createdAt": "2023-01-19T01:36:29Z",
          "updatedAt": "2023-01-19T01:36:29Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "> Each description of `DeserializeScalar()` including for each ciphersuite describes a finite number of bytes they are trying to parse into a Scalar (32 bytes, 57 bytes, etc), so in practice, there are only a small number of values that can be represented in 'the rest of the last byte' that are out of range, parsing those also in constant-time seems fine? Am I missing something?\r\n\r\nYeah thinking about this more it's seems easier to just require it to be constant time.\r\n\r\nHere's what I was writing before I reached that conclusion and ended up rambling, feel free to ignore :rofl: :\r\n\r\nWhat I'm wondering is if leaking the fact the input is outside of the expected range needs to be avoided or not. The reason I thought of this is that `curve25519-dalek` `4.0.0-pre.1` code (which we use) isn't constant time (though `pre.4` is, as I've just discovered):\r\n\r\n```rust\r\n    pub fn from_canonical_bytes(bytes: [u8; 32]) -> Option<Scalar> {\r\n        // Check that the high bit is not set\r\n        if (bytes[31] >> 7) != 0u8 {\r\n            return None;\r\n        }\r\n        let candidate = Scalar::from_bits(bytes);\r\n\r\n        if candidate.is_canonical() {\r\n            Some(candidate)\r\n        } else {\r\n            None\r\n        }\r\n    }\r\n```\r\n\r\nIn the end the function will return an error so there will be a different codepath anyway. And I can't come up with a scenario where an attacker can exploit this, scalars are either decoded by the entity that had encoded it (and thus it will be correct), or the aggregator is decoding a signer share (in that case only the signer could try to exploit a side channel, but there would be no reason to do that).\r\n\r\nBut it seems simpler to just require it to be constant time, the only possible confusion that could arise is that fact that the function needs to return an error in the out-of-range case so it will never be truly \"constant time\" but I think trying to explain that would be even more confusing...\r\n",
          "createdAt": "2023-01-19T14:19:58Z",
          "updatedAt": "2023-01-19T14:19:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85KvzAP",
          "commit": {
            "abbreviatedOid": "9aad90c"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Looks good. I just wonder about `DeserializeScalar` and its handling of out-of-range inputs, does that needs to be constant time? I'm not sure.\r\n\r\nAlso we might want to wrap the paragraphs like the rest of the file.",
          "createdAt": "2023-01-18T18:01:55Z",
          "updatedAt": "2023-01-18T18:01:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85LKXnt",
          "commit": {
            "abbreviatedOid": "9aad90c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-19T01:30:56Z",
          "updatedAt": "2023-01-19T01:30:57Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nSeveral routines process secret values (nonces, signing keys / shares), and depending \r\non the implementation and deployment environment, mitigating side-channels may be\r\npertinent; specifically, implementing `G.ScalarMult()`, `G.ScalarBaseMult()`, \r\n`G.SerializeScalar()`, and `G.DeserializeScalar()` in constant (value-independent) time.\r\nThe various ciphersuites lend themselves differently to specific implementation techniques \r\nand ease of achieving side-channel resistance, but can be implemented using complete \r\nformulas and value-independent branching to mitigate side-channels.\r\n```",
              "createdAt": "2023-01-19T01:30:56Z",
              "updatedAt": "2023-01-19T01:30:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85LNxp6",
          "commit": {
            "abbreviatedOid": "2630b2e"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-19T14:20:25Z",
          "updatedAt": "2023-01-19T14:20:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85LN7Ku",
          "commit": {
            "abbreviatedOid": "2630b2e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Only minor rewording requests. Otherwise this LGTM.",
          "createdAt": "2023-01-19T14:40:52Z",
          "updatedAt": "2023-01-19T14:43:02Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\npertinent. Mitigating these side-channels requires implementing `G.ScalarMult()`, `G.ScalarBaseMult()`, \r\n`G.SerializeScalar()`, and `G.DeserializeScalar()` in constant (value-independent) time.\r\n```",
              "createdAt": "2023-01-19T14:40:52Z",
              "updatedAt": "2023-01-19T14:43:02Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nand ease of achieving side-channel resistance, though ultimately avoiding value-dependent\r\ncomputation or branching is the goal.\r\n```\r\n\r\nThe bit about complete formulas seems overly specific to elliptic curves, and I think so far we've avoided that level of specificity. ",
              "createdAt": "2023-01-19T14:42:49Z",
              "updatedAt": "2023-01-19T14:43:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85LQaRE",
          "commit": {
            "abbreviatedOid": "1f32f0a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-19T20:43:02Z",
          "updatedAt": "2023-01-19T20:43:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 397,
      "id": "PR_kwDOEpUZs85Hph8Y",
      "title": "use DeserializeScalar instead of DeserializeElement for signatures shares",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/397",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-01-18T18:06:40Z",
      "updatedAt": "2023-01-18T21:22:41Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "cc8104782bf68f631809324f87f18f236e7f077a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "aggregation-deserialize-fix",
      "headRefOid": "be7292c2d83f8aa4bcd3aadba0ec9a1d271680c7",
      "closedAt": "2023-01-18T21:22:41Z",
      "mergedAt": "2023-01-18T21:22:41Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "f9f556e1eba25efc4b24e7b5795bba6125d3ede6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85KwE63",
          "commit": {
            "abbreviatedOid": "be7292c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-18T18:51:32Z",
          "updatedAt": "2023-01-18T18:51:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85LJieT",
          "commit": {
            "abbreviatedOid": "be7292c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "great catch!",
          "createdAt": "2023-01-18T21:22:35Z",
          "updatedAt": "2023-01-18T21:22:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 398,
      "id": "PR_kwDOEpUZs85IFFC_",
      "title": "update c implementation in readme",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/398",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Quite a difference `v02` -> `main` :)\r\n\r\nRelevant files:\r\n\r\nhttps://github.com/aldenml/ecc/blob/master/src/frost.h\r\nhttps://github.com/aldenml/ecc/blob/master/src/frost.c\r\nhttps://github.com/aldenml/ecc/blob/master/test/test_frost.c\r\n\r\nTest vectors (copied from this repo `master` branch):\r\n\r\nhttps://github.com/aldenml/ecc/blob/master/test/data/frost/frost-ristretto255-sha512.json\r\n",
      "createdAt": "2023-01-19T00:03:35Z",
      "updatedAt": "2023-01-19T12:55:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "6e59dc933d41d7588f129b75e10d75627c9b3279",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "update-c-impl",
      "headRefOid": "b2c3d21949f0f73cdcf267068dab80f7a9bdeb0d",
      "closedAt": "2023-01-19T12:54:43Z",
      "mergedAt": "2023-01-19T12:54:43Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "15e8278d7fad187ebf7fcd94df102c263f5efa07"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 399,
      "id": "PR_kwDOEpUZs85IXxxs",
      "title": "Address Ian's feedback",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/399",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-01-23T22:31:58Z",
      "updatedAt": "2023-01-24T17:47:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d2a882f900c4bd84623ee853f1ad282c8db8291d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/ian-review",
      "headRefOid": "e15b57daadf0a0463ca9ca9bfb931b055a9cfd75",
      "closedAt": "2023-01-24T15:34:38Z",
      "mergedAt": "2023-01-24T15:34:38Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "25994e33d10c57db4b282b11188d600857ad21a2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Li_j0",
          "commit": {
            "abbreviatedOid": "17c1150"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me",
          "createdAt": "2023-01-24T13:07:11Z",
          "updatedAt": "2023-01-24T13:07:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85LjRZ8",
          "commit": {
            "abbreviatedOid": "17c1150"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T13:52:03Z",
          "updatedAt": "2023-01-24T13:52:04Z",
          "comments": [
            {
              "originalPosition": 155,
              "body": "```suggestion\r\nat the time of signing can be performed over a public channel, as long as it is\r\n```",
              "createdAt": "2023-01-24T13:52:04Z",
              "updatedAt": "2023-01-24T13:52:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Lk7UO",
          "commit": {
            "abbreviatedOid": "e15b57d"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T17:46:53Z",
          "updatedAt": "2023-01-24T17:46:54Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "\ud83c\udf89",
              "createdAt": "2023-01-24T17:46:54Z",
              "updatedAt": "2023-01-24T17:46:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Lk7n4",
          "commit": {
            "abbreviatedOid": "e15b57d"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T17:47:47Z",
          "updatedAt": "2023-01-24T17:47:47Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Should we check this and enforce a `NonZeroScalar`?",
              "createdAt": "2023-01-24T17:47:47Z",
              "updatedAt": "2023-01-24T17:47:47Z"
            }
          ]
        }
      ]
    },
    {
      "number": 400,
      "id": "PR_kwDOEpUZs85J5ICP",
      "title": "IANA considerations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/400",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-02-13T22:26:05Z",
      "updatedAt": "2023-02-13T22:27:25Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ac173676139ce520195a483b842490964b694b5e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "iana",
      "headRefOid": "b7b1b5aaee971de6f8f1929400465ee2e5efae10",
      "closedAt": "2023-02-13T22:27:25Z",
      "mergedAt": "2023-02-13T22:27:25Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "3f0be51ed2a2b94d0412489ccb3bf0d611e7a790"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85NR5oh",
          "commit": {
            "abbreviatedOid": "b7b1b5a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-13T22:27:17Z",
          "updatedAt": "2023-02-13T22:27:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 410,
      "id": "PR_kwDOEpUZs85LgFdO",
      "title": "reverse derive_interpolating_value arguments",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/410",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #409",
      "createdAt": "2023-03-07T17:47:08Z",
      "updatedAt": "2023-03-07T19:05:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3f0be51ed2a2b94d0412489ccb3bf0d611e7a790",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "clarify-lagrange",
      "headRefOid": "b01bdfcf56d2a20cabfdbcce9b6f1ba1995d0751",
      "closedAt": "2023-03-07T19:05:18Z",
      "mergedAt": "2023-03-07T19:05:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "cd0ec90a805b06d6dbc022018549a679e5c582ea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85PO_Zo",
          "commit": {
            "abbreviatedOid": "b01bdfc"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-07T19:05:13Z",
          "updatedAt": "2023-03-07T19:05:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 411,
      "id": "PR_kwDOEpUZs85LgJFC",
      "title": "define byte",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/411",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I went for the simplest thing, but we can define and use \"octet\" instead.\r\n\r\nCloses #407",
      "createdAt": "2023-03-07T17:58:17Z",
      "updatedAt": "2023-03-07T20:42:28Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3f0be51ed2a2b94d0412489ccb3bf0d611e7a790",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "define-byte",
      "headRefOid": "bbd3a0a38574fbd4835b862e7defb75cf0589cc9",
      "closedAt": "2023-03-07T20:42:25Z",
      "mergedAt": "2023-03-07T20:42:25Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "74227fcb5108fcf7a9cc90ccb56f16ac1b972187"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85PPA3K",
          "commit": {
            "abbreviatedOid": "b9345b4"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-07T19:09:24Z",
          "updatedAt": "2023-03-07T19:09:29Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n* byte: A sequence of eight bits.\r\n```",
              "createdAt": "2023-03-07T19:09:24Z",
              "updatedAt": "2023-03-07T19:09:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85PPntn",
          "commit": {
            "abbreviatedOid": "bbd3a0a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-07T20:42:17Z",
          "updatedAt": "2023-03-07T20:42:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 412,
      "id": "PR_kwDOEpUZs85LgS_N",
      "title": "Clarify how to identify cheating party",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/412",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #404",
      "createdAt": "2023-03-07T18:31:03Z",
      "updatedAt": "2023-03-07T20:43:30Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3f0be51ed2a2b94d0412489ccb3bf0d611e7a790",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "identify-misbehaving-party",
      "headRefOid": "1e52c31a6d02a29e8d15563e5d446de54ca64595",
      "closedAt": "2023-03-07T20:43:26Z",
      "mergedAt": "2023-03-07T20:43:26Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "a510c8f0fb5d50039d05d7b74ca8bb24a30751af"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85PPAYO",
          "commit": {
            "abbreviatedOid": "5342a74"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Approved pending the suggested text, which I think is more clear.",
          "createdAt": "2023-03-07T19:08:00Z",
          "updatedAt": "2023-03-07T19:08:11Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nIdentifying misbehaving participants that produce invalid shares can be done by checking\r\nsignature shares from each participant using `verify_signature_share` as described in {{frost-aggregation}}.\r\n```",
              "createdAt": "2023-03-07T19:08:00Z",
              "updatedAt": "2023-03-07T19:08:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85PPn_c",
          "commit": {
            "abbreviatedOid": "1e52c31"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-07T20:43:09Z",
          "updatedAt": "2023-03-07T20:43:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 413,
      "id": "PR_kwDOEpUZs85Lk-VU",
      "title": "make Ne and Ns values explicit",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/413",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/cfrg/draft-irtf-cfrg-frost/issues/408",
      "createdAt": "2023-03-08T14:43:52Z",
      "updatedAt": "2023-03-08T20:30:11Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "a510c8f0fb5d50039d05d7b74ca8bb24a30751af",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "explicit-ne-ns",
      "headRefOid": "9cc3bc7e34fa670f0302e6cb5de9432a732378db",
      "closedAt": "2023-03-08T14:48:09Z",
      "mergedAt": "2023-03-08T14:48:09Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "67c9c6d86c666176ebeea9983356da08c6948dc4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85PUr99",
          "commit": {
            "abbreviatedOid": "9cc3bc7"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-08T14:47:33Z",
          "updatedAt": "2023-03-08T14:47:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 414,
      "id": "PR_kwDOEpUZs85L8Nh0",
      "title": "make it explicit that vss_verify must be performed",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/414",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is not from the last review, but something that we noticed internally a while ago.\r\n\r\nThe \"otherwise\" in the current text seems to imply that, if you perform `vss_verify()`, then participants don't need to check if they have the same view of `vss_commitment`, which is not the case.",
      "createdAt": "2023-03-13T22:36:22Z",
      "updatedAt": "2023-03-14T10:20:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "67c9c6d86c666176ebeea9983356da08c6948dc4",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "vss-verify-requirement",
      "headRefOid": "79b851311c5c6959b67650b69f9c2a97e1ce5be4",
      "closedAt": "2023-03-14T10:20:18Z",
      "mergedAt": "2023-03-14T10:20:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c49273908b387e0aeba971dc7f3b1b3266f4ec84"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85PwZSL",
          "commit": {
            "abbreviatedOid": "79b8513"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T23:09:35Z",
          "updatedAt": "2023-03-13T23:09:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85PznAN",
          "commit": {
            "abbreviatedOid": "79b8513"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-14T10:20:13Z",
          "updatedAt": "2023-03-14T10:20:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 415,
      "id": "PR_kwDOEpUZs85MB1Os",
      "title": "Move reference of Shamir paper to appendix; reference appendix from main body",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/415",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #405",
      "createdAt": "2023-03-14T18:07:52Z",
      "updatedAt": "2023-03-14T19:35:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c49273908b387e0aeba971dc7f3b1b3266f4ec84",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "secret-sharing-ref",
      "headRefOid": "01174994d4f77d01e6b77d8a8898a8b1dc551316",
      "closedAt": "2023-03-14T19:35:29Z",
      "mergedAt": "2023-03-14T19:35:29Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "0e9755a68c2ea6e8d56666d8540a9848383d4f74"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "LGTM. @conradoplg or @dconnolly, please review and merge as you see fit.",
          "createdAt": "2023-03-14T19:16:50Z",
          "updatedAt": "2023-03-14T19:16:50Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85P30qM",
          "commit": {
            "abbreviatedOid": "b2134da"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-14T18:26:40Z",
          "updatedAt": "2023-03-14T18:26:40Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "The syntax is weird...\r\n\r\n```suggestion\r\nand used to produce signatures; see {{dep-shamir}} for more information about Shamir secret sharing.\r\n```",
              "createdAt": "2023-03-14T18:26:40Z",
              "updatedAt": "2023-03-14T19:15:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85P4Iti",
          "commit": {
            "abbreviatedOid": "b2134da"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-03-14T19:10:34Z",
          "updatedAt": "2023-03-14T19:10:37Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "But also, should this be {{dep-shamir}} instead of {{dep-dealer}}?",
              "createdAt": "2023-03-14T19:10:34Z",
              "updatedAt": "2023-03-14T19:10:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85P4KS0",
          "commit": {
            "abbreviatedOid": "b2134da"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-14T19:15:22Z",
          "updatedAt": "2023-03-14T19:15:23Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I agree, I updated my suggestion",
              "createdAt": "2023-03-14T19:15:23Z",
              "updatedAt": "2023-03-14T19:15:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85P4KqV",
          "commit": {
            "abbreviatedOid": "0117499"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-14T19:16:30Z",
          "updatedAt": "2023-03-14T19:16:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85P4Qxs",
          "commit": {
            "abbreviatedOid": "0117499"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-14T19:35:17Z",
          "updatedAt": "2023-03-14T19:35:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 416,
      "id": "PR_kwDOEpUZs85MCTM3",
      "title": "Explictly define serialization/deserialization assumptions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/416",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #402",
      "createdAt": "2023-03-14T19:45:02Z",
      "updatedAt": "2023-03-14T19:51:37Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "0e9755a68c2ea6e8d56666d8540a9848383d4f74",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-3",
      "headRefOid": "327da5398a8a7d1e58679f30f03bb15686c5ae64",
      "closedAt": "2023-03-14T19:51:33Z",
      "mergedAt": "2023-03-14T19:51:33Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "ddaf3b237f2b8aff5ccd255549d3330cd7eebb5d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85P4Vbr",
          "commit": {
            "abbreviatedOid": "327da53"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-14T19:49:07Z",
          "updatedAt": "2023-03-14T19:49:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 417,
      "id": "PR_kwDOEpUZs85MQBon",
      "title": "fix indentation of code blocks, keeping them at 69 columns",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/417",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "RFC must have at most 72 columns. Since code blocks are indented with 3 spaces, this means that they must have at most 69 columns.\r\n\r\nThe text parts (inputs, outputs) were indented manually. The Python parts were indented using `autopep8`. Some parts may look weird but that's how they are usually indented in Python. Let me know if anything is too strange, it's likely possible to change it by e.g. adding more parenthesis.\r\n\r\nTo see that everything have been fixed, just run `make` and see that there are no warnings are output.\r\n\r\nNote that it was also giving a warning `Warning: Expected a valid submissionType (stream) setting, one of IETF, IAB, IRTF, independent, but found None.  Will use 'IETF'`. Thus I explicitly set it to `IETF`.\r\n\r\nCloses #406 ",
      "createdAt": "2023-03-16T20:38:50Z",
      "updatedAt": "2023-04-15T08:24:35Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ddaf3b237f2b8aff5ccd255549d3330cd7eebb5d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "fix-indentation",
      "headRefOid": "132d9a8278ef64c4eb731727cec4f8761bf72e20",
      "closedAt": "2023-04-15T08:24:32Z",
      "mergedAt": "2023-04-15T08:24:32Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "1fc823369fcb910cb2691cfb2d6f5b3a58fa03a2"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@conradoplg I don't feel strongly about this being valid Python, but if that's the motivation, can we make the reference implementation match this exactly?",
          "createdAt": "2023-03-17T00:56:16Z",
          "updatedAt": "2023-03-17T00:56:16Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "> @conradoplg I don't feel strongly about this being valid Python, but if that's the motivation, can we make the reference implementation match this exactly?\r\n\r\nI can, but that wouldn't accomplish much, because they already differ, e.g. spec:\r\n\r\n```\r\ndef compute_binding_factors(commitment_list, msg):\r\n  msg_hash = H4(msg)\r\n  encoded_commitment_hash = H5(\r\n      encode_group_commitment_list(commitment_list))\r\n  rho_input_prefix = msg_hash || encoded_commitment_hash\r\n\r\n  binding_factor_list = []\r\n  for (identifier, hiding_nonce_commitment,\r\n       binding_nonce_commitment) in commitment_list:\r\n    rho_input = rho_input_prefix || G.SerializeScalar(identifier)\r\n    binding_factor = H1(rho_input)\r\n    binding_factor_list.append((identifier, binding_factor))\r\n  return binding_factor_list\r\n```\r\n\r\nWhile the reformatted reference implementation would look like this:\r\n\r\n```\r\ndef compute_binding_factors(G, H, commitment_list, msg):\r\n  msg_hash = H.H4(msg)\r\n  encoded_commitment_hash = H.H5(\r\n      encode_group_commitment_list(\r\n          G, commitment_list))\r\n  rho_input_prefix = msg_hash + encoded_commitment_hash\r\n\r\n  binding_factors = {}\r\n  rho_inputs = {}\r\n  for _, (i, D, E) in enumerate(commitment_list):\r\n    rho_input = rho_input_prefix + G.serialize_scalar(i)\r\n    binding_factor = H.H1(rho_input)\r\n    rho_inputs[i] = rho_input\r\n    binding_factors[i] = binding_factor\r\n  return binding_factors, rho_inputs\r\n```\r\n\r\nAlso it seems better to keep using 4-space identation in the reference code for readability.",
          "createdAt": "2023-03-17T13:52:17Z",
          "updatedAt": "2023-03-17T13:52:17Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, they differ now, but I thought it might be nice if they were identical. That way there's no question about inconsistencies. ",
          "createdAt": "2023-03-17T18:13:28Z",
          "updatedAt": "2023-03-17T18:13:36Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "body": "> Yeah, they differ now, but I thought it might be nice if they were identical. That way there's no question about inconsistencies.\r\n\r\nWhat I meant is that they are different in content, not only in formatting, e.g. `H.H5` vs `H5`, one uses dict and the other uses list, one receives `G` and `H` and the other not, etc. I'm not sure we can make then fully equal. We can try making them as similar as possible, but that seems it would work better in a separate PR",
          "createdAt": "2023-03-17T19:36:28Z",
          "updatedAt": "2023-03-17T19:36:28Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah, yes, right! I'm going to mull on this for a bit, if that's OK? There's no rush to merge it.",
          "createdAt": "2023-03-17T19:45:51Z",
          "updatedAt": "2023-03-17T19:45:51Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, after thinking about this, I'm totally comfortable trying to address parity in a separate PR, keeping this one focused on the original width issue. I can own the [followup issue on parity](https://github.com/cfrg/draft-irtf-cfrg-frost/issues/420).",
          "createdAt": "2023-03-21T22:52:25Z",
          "updatedAt": "2023-03-21T22:52:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85QJnM0",
          "commit": {
            "abbreviatedOid": "79d2ffc"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-16T20:53:36Z",
          "updatedAt": "2023-03-16T20:53:37Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85QJxfO",
          "commit": {
            "abbreviatedOid": "79d2ffc"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-03-16T21:29:46Z",
          "updatedAt": "2023-03-16T21:38:18Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nsubmissiontype: IRTF\r\n```",
              "createdAt": "2023-03-16T21:29:47Z",
              "updatedAt": "2023-03-16T21:38:18Z"
            },
            {
              "originalPosition": 142,
              "body": "This seems like it should be indented underneath the `for`.",
              "createdAt": "2023-03-16T21:30:42Z",
              "updatedAt": "2023-03-16T21:38:18Z"
            },
            {
              "originalPosition": 241,
              "body": "```suggestion\r\n  encoded_commitment_hash =\r\n      H5(encode_group_commitment_list(commitment_list))\r\n```",
              "createdAt": "2023-03-16T21:33:48Z",
              "updatedAt": "2023-03-16T21:38:18Z"
            },
            {
              "originalPosition": 304,
              "body": "```suggestion\r\n    binding_nonce = G.ScalarMult(\r\n            binding_nonce_commitment,\r\n            binding_factor)\r\n    group_commitment =\r\n        group_commitment +\r\n        hiding_nonce_commitment +\r\n        binding_nonce\r\n```",
              "createdAt": "2023-03-16T21:36:20Z",
              "updatedAt": "2023-03-16T21:38:19Z"
            },
            {
              "originalPosition": 469,
              "body": "```suggestion\r\n  sig_share = hiding_nonce + (binding_nonce * binding_factor) +\r\n      (lambda_i * sk_i * challenge)\r\n```",
              "createdAt": "2023-03-16T21:36:52Z",
              "updatedAt": "2023-03-16T21:38:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85QKfBO",
          "commit": {
            "abbreviatedOid": "b376ec0"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-16T23:13:47Z",
          "updatedAt": "2023-03-16T23:21:49Z",
          "comments": [
            {
              "originalPosition": 241,
              "body": "In Python this does not work because the syntax is ambiguous; it requires escaping the newline with `\\`.\r\n\r\nIt works in the committed version because the single `(` makes the parser understand that the statement continues in another line.\r\n\r\nOf course we don't need to be fully compliant with Python, so I leave the decision to you.",
              "createdAt": "2023-03-16T23:13:47Z",
              "updatedAt": "2023-03-16T23:21:49Z"
            },
            {
              "originalPosition": 469,
              "body": "Likewise, this is not valid Python, but feel free to commit this",
              "createdAt": "2023-03-16T23:16:23Z",
              "updatedAt": "2023-03-16T23:21:49Z"
            },
            {
              "originalPosition": 304,
              "body": "Good call, I went with a similar approach in b376ec0 but keeping the Python syntax",
              "createdAt": "2023-03-16T23:18:18Z",
              "updatedAt": "2023-03-16T23:21:49Z"
            },
            {
              "originalPosition": 142,
              "body": "Oops, thanks. Fixed in b376ec0",
              "createdAt": "2023-03-16T23:18:41Z",
              "updatedAt": "2023-03-16T23:21:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85QjjAL",
          "commit": {
            "abbreviatedOid": "b376ec0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-21T22:53:49Z",
          "updatedAt": "2023-03-21T22:53:49Z",
          "comments": [
            {
              "originalPosition": 241,
              "body": "It _feels_ better to not have orphan function calls like this, so I'd prefer we go with the suggestion, despite it not being valid Python.",
              "createdAt": "2023-03-21T22:53:49Z",
              "updatedAt": "2023-03-21T22:53:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85QjjHp",
          "commit": {
            "abbreviatedOid": "b376ec0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-21T22:54:28Z",
          "updatedAt": "2023-03-21T22:54:28Z",
          "comments": [
            {
              "originalPosition": 469,
              "body": "Unless there are objections, let's take this and I can try to address in [followup work](https://github.com/cfrg/draft-irtf-cfrg-frost/issues/420).",
              "createdAt": "2023-03-21T22:54:28Z",
              "updatedAt": "2023-03-21T22:54:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Sonts",
          "commit": {
            "abbreviatedOid": "132d9a8"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-15T08:24:00Z",
          "updatedAt": "2023-04-15T08:24:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 418,
      "id": "PR_kwDOEpUZs85MRfM7",
      "title": "Signature encoding",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/418",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #403\r\n\r\n@chris-wood it seems a bit redundant to say in every ciphersuite to encode the signature according to this new section, what do you think?",
      "createdAt": "2023-03-17T04:35:42Z",
      "updatedAt": "2023-05-08T20:18:28Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ddaf3b237f2b8aff5ccd255549d3330cd7eebb5d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-3",
      "headRefOid": "ce0f06c8aeb85abbb7ea9913f1d1d0ea011b3871",
      "closedAt": "2023-05-08T20:18:28Z",
      "mergedAt": "2023-05-08T20:18:27Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ddc2c3c6e2063e397c7ee9cfc56e7e8d1579536a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85QhxL_",
          "commit": {
            "abbreviatedOid": "0c3a903"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-03-21T17:14:44Z",
          "updatedAt": "2023-03-21T17:16:47Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "If we say this, can we also add something to the \"Ciphersuite Requirements\" section that says something along the lines of \"Every ciphersuite MUST specify how signatures are encoded\"?",
              "createdAt": "2023-03-21T17:14:44Z",
              "updatedAt": "2023-03-21T17:16:47Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n# Schnorr Signature Encoding {#sig-encoding}\r\n```",
              "createdAt": "2023-03-21T17:15:37Z",
              "updatedAt": "2023-03-21T17:16:47Z"
            },
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nThe output from the aggregation step is the output signature (R, z). For every FROST ciphersuite\r\nspecified in {{ciphersuites}}, this signature is encoded using the format in {{sig-encoding}}.\r\n```",
              "createdAt": "2023-03-21T17:15:48Z",
              "updatedAt": "2023-03-21T17:16:47Z"
            },
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nThis section describes one possible encoding of FROST signatures. Using notation\r\nfrom {{Section 3 of TLS}}, the encoding of a FROST signature (R, z) is as follows:\r\n```",
              "createdAt": "2023-03-21T17:16:35Z",
              "updatedAt": "2023-03-21T17:16:47Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n`G.SerializeScalar(z)` and `G` is determined by ciphersuite.\r\n```",
              "createdAt": "2023-03-21T17:16:44Z",
              "updatedAt": "2023-03-21T17:16:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85UQr95",
          "commit": {
            "abbreviatedOid": "bc0c4ce"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good, I think it just needs addressing Chris's comment",
          "createdAt": "2023-05-04T18:16:35Z",
          "updatedAt": "2023-05-04T18:16:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 419,
      "id": "PR_kwDOEpUZs85Mdbff",
      "title": "Add Go implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/419",
      "state": "MERGED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hi! I'd like to provide an implementation in Go :)",
      "createdAt": "2023-03-20T14:54:53Z",
      "updatedAt": "2023-03-21T16:19:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ddaf3b237f2b8aff5ccd255549d3330cd7eebb5d",
      "headRepository": "bytemare/draft-irtf-cfrg-frost",
      "headRefName": "patch-2",
      "headRefOid": "c3f15f3d4b401677eb4299ea088ef0830d9f4de7",
      "closedAt": "2023-03-21T16:09:31Z",
      "mergedAt": "2023-03-21T16:09:31Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "2c94dcfe54c51169c004fc996a4d8b5a015a0e56"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Great to see, thanks @bytemare! ",
          "createdAt": "2023-03-21T16:09:17Z",
          "updatedAt": "2023-03-21T16:09:17Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 424,
      "id": "PR_kwDOEpUZs85OgHP1",
      "title": "Add Secp256k1 and Edwards25519 to supported implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/424",
      "state": "MERGED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-04-17T17:20:22Z",
      "updatedAt": "2023-04-24T09:29:35Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "1fc823369fcb910cb2691cfb2d6f5b3a58fa03a2",
      "headRepository": "bytemare/draft-irtf-cfrg-frost",
      "headRefName": "patch-2",
      "headRefOid": "504bca9babdb370d55482395191f08b62b4ed808",
      "closedAt": "2023-04-24T09:29:34Z",
      "mergedAt": "2023-04-24T09:29:34Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "24bc5e86e2b69db7cac04699d5f13c23fff74c73"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85TTPUI",
          "commit": {
            "abbreviatedOid": "504bca9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-24T09:29:28Z",
          "updatedAt": "2023-04-24T09:29:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 426,
      "id": "PR_kwDOEpUZs85OtTB5",
      "title": "fix the order of secp256k1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/426",
      "state": "MERGED",
      "author": "conradoplg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I decided to double check the constants and indeed there was a mistake, it had the P-256 order.\r\n\r\nHere I checked all the orders (by copying and pasting the order from our spec in the left hand side, and from the normative spec in the right hand side):\r\n\r\n```\r\nsage: 2^252 + 27742317777372353535851937790883648493 == 2^252 + 0x14def9dea2f79cd65812631a5cf5d3ed\r\nTrue\r\nsage: 2^252 + 27742317777372353535851937790883648493 == 2^252 + 27742317777372353535851937790883648493\r\nTrue\r\nsage: 2^446 - 13818066809895115352007386748515426880336692474882178609894547503885 == 2^446 - 0x8335dc163bb124b65129c9\r\n....: 6fde933d8d723a70aadc873d6d54a7bb0d\r\nTrue\r\nsage: 0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551 == 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAAD\r\n....: A7179E84F3B9CAC2FC632551\r\nTrue\r\nsage: 0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551 == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6\r\n....: AF48A03BBFD25E8CD0364141\r\nFalse\r\n# (after fixing it...)\r\nsage: 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141 == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6\r\n....: AF48A03BBFD25E8CD0364141\r\nTrue\r\n```",
      "createdAt": "2023-04-19T20:22:43Z",
      "updatedAt": "2023-04-24T09:29:09Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "1fc823369fcb910cb2691cfb2d6f5b3a58fa03a2",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "fix-secp256k1-order",
      "headRefOid": "c3fb19bdd1362f79df9b0e34bdb09958e94b3efb",
      "closedAt": "2023-04-24T09:29:09Z",
      "mergedAt": "2023-04-24T09:29:09Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "54d322fa77a7ccfa7ad818733424b3c588ef17a1"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Nice catch \ud83d\udc4d ",
          "createdAt": "2023-04-24T09:29:05Z",
          "updatedAt": "2023-04-24T09:29:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85TTPEz",
          "commit": {
            "abbreviatedOid": "c3fb19b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-24T09:28:58Z",
          "updatedAt": "2023-04-24T09:28:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 428,
      "id": "PR_kwDOEpUZs85O2y0p",
      "title": "Bump actions/setup-python from 4.5.0 to 4.6.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/428",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4.5.0 to 4.6.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>Add allow-prereleases input</h2>\n<p>In scope of this release we added a new input (<code>allow-prereleases</code>) to allow <a href=\"https://redirect.github.com/actions/setup-python/pull/414\">falling back to pre-release versions of Python when a matching GA version of Python is not available</a></p>\n<pre lang=\"yaml\"><code>steps:\n  - uses: actions/checkout@v3\n  - uses: actions/setup-python@v4\n    with:\n      python-version: 3.12\n      allow-prereleases: true\n</code></pre>\n<p>Besides, we added such changes as:</p>\n<ul>\n<li>Fix bug to trim new line for PyPy version: <a href=\"https://redirect.github.com/actions/setup-python/pull/610\">actions/setup-python#610</a></li>\n<li>Added pip dependency file to generate hash from it: <a href=\"https://redirect.github.com/actions/setup-python/pull/604\">actions/setup-python#604</a></li>\n<li>Improved error handling for saving and restoring cache: <a href=\"https://redirect.github.com/actions/setup-python/pull/618\">actions/setup-python#618</a></li>\n<li>Add warning if cache paths are empty: <a href=\"https://redirect.github.com/actions/setup-python/pull/642\">actions/setup-python#642</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/57ded4d7d5e986d7296eab16560982c6dd7c923b\"><code>57ded4d</code></a> update <code>@\u200bazure/storage-blob</code> (<a href=\"https://redirect.github.com/actions/setup-python/issues/655\">#655</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/df6abcc733fa14327c82798d7708a84870433c17\"><code>df6abcc</code></a> update xml2js (<a href=\"https://redirect.github.com/actions/setup-python/issues/652\">#652</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7a4f344e33a712c3d16d01bdb95be5ef34e8ab59\"><code>7a4f344</code></a> Add warning for empty cache paths (<a href=\"https://redirect.github.com/actions/setup-python/issues/642\">#642</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/d1244c8404095bc119fe30f1b9296fc644569ac0\"><code>d1244c8</code></a> Remove ubuntu-18.04 from e2e (<a href=\"https://redirect.github.com/actions/setup-python/issues/641\">#641</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/3091b37310257c35e28f059cf05d8c8c74250b17\"><code>3091b37</code></a> Fix glob bug in package.json scripts section (<a href=\"https://redirect.github.com/actions/setup-python/issues/637\">#637</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/dfa76f8d0df0f92390ab2d42e57c6537748ecc71\"><code>dfa76f8</code></a> Update configuration files (<a href=\"https://redirect.github.com/actions/setup-python/issues/622\">#622</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/03eb867e3d1d557bdb958602013c4b401deef7a0\"><code>03eb867</code></a> Add error handling for saving and restoring cache (<a href=\"https://redirect.github.com/actions/setup-python/issues/618\">#618</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/b41aaf9f0c19cdc253ff8d58a4c13ae91e94ccd2\"><code>b41aaf9</code></a> Merge pull request <a href=\"https://redirect.github.com/actions/setup-python/issues/621\">#621</a> from akv-platform/reusable-workflow</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/0ffa49cfcadde3e5646e772b051f4b67766aaa96\"><code>0ffa49c</code></a> Add update-config-files.yml</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/ec365b4eba6e8fff05c772c50ea738054d9b52ef\"><code>ec365b4</code></a> Add and configure ESLint and update configuration for Prettier (<a href=\"https://redirect.github.com/actions/setup-python/issues/617\">#617</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v4.5.0...v4.6.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=4.5.0&new-version=4.6.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2023-04-21T11:59:50Z",
      "updatedAt": "2023-04-24T09:29:28Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "1fc823369fcb910cb2691cfb2d6f5b3a58fa03a2",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.6.0",
      "headRefOid": "5f565961c3a4b93121dbf83905f5e714ca834a82",
      "closedAt": "2023-04-24T09:29:18Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
          "createdAt": "2023-04-24T09:29:22Z",
          "updatedAt": "2023-04-24T09:29:22Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 429,
      "id": "PR_kwDOEpUZs85PatZh",
      "title": "Only H2 in Ed25519 lacks domain separation for compat w/ 8032",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/429",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #425",
      "createdAt": "2023-04-28T21:10:19Z",
      "updatedAt": "2023-05-02T09:54:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "24bc5e86e2b69db7cac04699d5f13c23fff74c73",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-4",
      "headRefOid": "65dbcdca75dff8a81e567311280460e9a1f266f8",
      "closedAt": "2023-05-02T09:54:17Z",
      "mergedAt": "2023-05-02T09:54:17Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "70876260d44676d552bce09ed4fc3eb80d7a199d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85T-EVC",
          "commit": {
            "abbreviatedOid": "98d7c51"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-02T09:52:38Z",
          "updatedAt": "2023-05-02T09:52:39Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  adhere to this requirement for H2 alone to maintain compatibility\r\n```",
              "createdAt": "2023-05-02T09:52:38Z",
              "updatedAt": "2023-05-02T09:52:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85T-EYe",
          "commit": {
            "abbreviatedOid": "65dbcdc"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-02T09:52:47Z",
          "updatedAt": "2023-05-02T09:52:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 430,
      "id": "PR_kwDOEpUZs85PatxS",
      "title": "commit(): rename nonce -> nonces, comm -> comms",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/430",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #422",
      "createdAt": "2023-04-28T21:12:27Z",
      "updatedAt": "2023-05-02T09:52:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "24bc5e86e2b69db7cac04699d5f13c23fff74c73",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-5",
      "headRefOid": "875af1494b6b220a31bdf928521e356fd6daffca",
      "closedAt": "2023-05-02T09:52:00Z",
      "mergedAt": "2023-05-02T09:52:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "bc24af01373b9625a94611818dc64925b2725809"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85T-EDU",
          "commit": {
            "abbreviatedOid": "875af14"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-02T09:51:55Z",
          "updatedAt": "2023-05-02T09:51:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 431,
      "id": "PR_kwDOEpUZs85Payky",
      "title": "Make function definition formatting consistent",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/431",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Inputs\r\nOutputs \r\nErrors\r\ndef function_signature(inputs): \r\n    code\r\n\r\nFor consistency and to avoid signature duplication\r\n\r\nResolves #421",
      "createdAt": "2023-04-28T21:43:00Z",
      "updatedAt": "2023-05-02T11:27:13Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "24bc5e86e2b69db7cac04699d5f13c23fff74c73",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-6",
      "headRefOid": "99abbde4ead68cf3763e7b380234ac81ad371ef9",
      "closedAt": "2023-05-02T09:54:58Z",
      "mergedAt": "2023-05-02T09:54:58Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ede8439d3a0a17838128a1b6917e560e43b17ea6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85T-FIy",
          "commit": {
            "abbreviatedOid": "99abbde"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-02T09:54:53Z",
          "updatedAt": "2023-05-02T09:54:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 432,
      "id": "PR_kwDOEpUZs85QCM-N",
      "title": "Reformat test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/432",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Builds on #389\r\n\r\n@conradoplg -- is this something you could test in your implementation? The rationale for this change is that the old JSON structure didn't allow for native parsing in languages like Go, where the name of a field in a JSON object cannot start with an integer. \r\n\r\n@bytemare this builds on your change, fixing some of the formatting, and actually applies the vectors to the main doc.",
      "createdAt": "2023-05-08T20:32:55Z",
      "updatedAt": "2023-05-23T11:25:44Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ddc2c3c6e2063e397c7ee9cfc56e7e8d1579536a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/reformat-vectors",
      "headRefOid": "c4aef1320132a0bb2b6d661eb9b8bd1879483e03",
      "closedAt": "2023-05-23T11:25:43Z",
      "mergedAt": "2023-05-23T11:25:43Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "8c730f224887b42770a30411faf7a82dd3f38d46"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85Ul-Hp",
          "commit": {
            "abbreviatedOid": "c4aef13"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I tested with our implementation and it works, it can be supported with some small changes in our test code",
          "createdAt": "2023-05-09T18:29:10Z",
          "updatedAt": "2023-05-09T18:29:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 435,
      "id": "PR_kwDOEpUZs85QIk-o",
      "title": "Update strings and test vectors to v13",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/435",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-09T21:41:40Z",
      "updatedAt": "2023-07-11T16:39:28Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ddc2c3c6e2063e397c7ee9cfc56e7e8d1579536a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "v13",
      "headRefOid": "001b81e4918149be9d1a21ecc87adb6c486ebd9f",
      "closedAt": "2023-07-11T16:39:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I propose we leave the spec as-is until it passes IRSG review, at which point we can ask for the RFC number and get a final version of the test vectors submitted. ",
          "createdAt": "2023-05-10T16:06:40Z",
          "updatedAt": "2023-05-10T16:06:40Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> I propose we leave the spec as-is until it passes IRSG review, at which point we can ask for the RFC number and get a final version of the test vectors submitted.\r\n\r\nWe've now passed IRSG review, shall we prep this to merge before the changes including the group public key in the binding factor computation?",
          "createdAt": "2023-06-26T21:25:41Z",
          "updatedAt": "2023-06-26T21:25:41Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 437,
      "id": "PR_kwDOEpUZs85QnZ_M",
      "title": "Identifiers are NonZeroScalars in test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/437",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-16T13:21:51Z",
      "updatedAt": "2023-05-23T11:25:22Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ddc2c3c6e2063e397c7ee9cfc56e7e8d1579536a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-6",
      "headRefOid": "1a440e87b2132f332629f217a509fa1466eefb30",
      "closedAt": "2023-05-23T11:25:22Z",
      "mergedAt": "2023-05-23T11:25:22Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "90e7aaf0d76adc359013d73d873b0cc90b0dfceb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85VzAd1",
          "commit": {
            "abbreviatedOid": "1a440e8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-23T11:25:17Z",
          "updatedAt": "2023-05-23T11:25:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 438,
      "id": "PR_kwDOEpUZs85RVmKd",
      "title": "Bump actions/setup-python from 4.5.0 to 4.6.1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/438",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4.5.0 to 4.6.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>v4.6.1</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix <code>allow-prereleases</code> sample configuration by <a href=\"https://github.com/mayeut\"><code>@\u200bmayeut</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/615\">actions/setup-python#615</a></li>\n<li>Fix a incorrect link advanced-usage.md by <a href=\"https://github.com/siyuan0322\"><code>@\u200bsiyuan0322</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/657\">actions/setup-python#657</a></li>\n<li>Remove implicit dependency by <a href=\"https://github.com/nikolai-laevskii\"><code>@\u200bnikolai-laevskii</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/668\">actions/setup-python#668</a></li>\n<li>Automatic update of configuration files from 05/23/2023 by <a href=\"https://github.com/github-actions\"><code>@\u200bgithub-actions</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/671\">actions/setup-python#671</a></li>\n<li>Add warning for python 2.7 on release/v4 by <a href=\"https://github.com/dmitry-shibanov\"><code>@\u200bdmitry-shibanov</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/673\">actions/setup-python#673</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/siyuan0322\"><code>@\u200bsiyuan0322</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/657\">actions/setup-python#657</a></li>\n<li><a href=\"https://github.com/nikolai-laevskii\"><code>@\u200bnikolai-laevskii</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/668\">actions/setup-python#668</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4...v4.6.1\">https://github.com/actions/setup-python/compare/v4...v4.6.1</a></p>\n<h2>Add allow-prereleases input</h2>\n<p>In scope of this release we added a new input (<code>allow-prereleases</code>) to allow <a href=\"https://redirect.github.com/actions/setup-python/pull/414\">falling back to pre-release versions of Python when a matching GA version of Python is not available</a></p>\n<pre lang=\"yaml\"><code>steps:\n  - uses: actions/checkout@v3\n  - uses: actions/setup-python@v4\n    with:\n      python-version: 3.12\n      allow-prereleases: true\n</code></pre>\n<p>Besides, we added such changes as:</p>\n<ul>\n<li>Fix bug to trim new line for PyPy version: <a href=\"https://redirect.github.com/actions/setup-python/pull/610\">actions/setup-python#610</a></li>\n<li>Added pip dependency file to generate hash from it: <a href=\"https://redirect.github.com/actions/setup-python/pull/604\">actions/setup-python#604</a></li>\n<li>Improved error handling for saving and restoring cache: <a href=\"https://redirect.github.com/actions/setup-python/pull/618\">actions/setup-python#618</a></li>\n<li>Add warning if cache paths are empty: <a href=\"https://redirect.github.com/actions/setup-python/pull/642\">actions/setup-python#642</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/bd6b4b6205c4dbad673328db7b31b7fab9e241c0\"><code>bd6b4b6</code></a> Add warning for python 2.7 (<a href=\"https://redirect.github.com/actions/setup-python/issues/673\">#673</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/0cbcb9a3d7c0b228a2c4fbde82b6e8855233cd92\"><code>0cbcb9a</code></a> Merge pull request <a href=\"https://redirect.github.com/actions/setup-python/issues/668\">#668</a> from akv-platform/disallow-implicit-dependencies</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/669664dac1a46a4bb872089e1a90e4ad5dc232a6\"><code>669664d</code></a> Merge branch 'tool-config-auto-update' into disallow-implicit-dependencies</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/9cbf792a3cbbd9c37749da21d3b171b927451bb0\"><code>9cbf792</code></a> Update configuration files</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/e732e40717e028f4f5ce334e2b15f37370cb0fbb\"><code>e732e40</code></a> Update licenses</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/a0d867bfa9dbae7b55265d535b886d13be1ce2c7\"><code>a0d867b</code></a> Change http-client dependency to one matching previous version</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/d99bed8b212a85a522f5daad7239544f6be60527\"><code>d99bed8</code></a> Update license</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/f71253fee3c03493b0d84195f0e25a0f228e8be9\"><code>f71253f</code></a> Change to <code>@\u200baction/http-client</code> version to the one that was used in the most re...</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/b51c97f6e3975dda61974a0d6a5f643ae759625f\"><code>b51c97f</code></a> Add eslint rule for disallowing implicit dependencies</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/db9987b4c1f10f0404fa60ee629f675fafbd6763\"><code>db9987b</code></a> Fix a incorrect link advanced-usage.md (<a href=\"https://redirect.github.com/actions/setup-python/issues/657\">#657</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v4.5.0...v4.6.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=4.5.0&new-version=4.6.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2023-05-25T11:59:12Z",
      "updatedAt": "2023-07-14T11:51:39Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "8c730f224887b42770a30411faf7a82dd3f38d46",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.6.1",
      "headRefOid": "5b6b4413e7fd70a8b113d08c182b002f7e8afa6f",
      "closedAt": "2023-07-14T11:51:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Superseded by #443.",
          "createdAt": "2023-07-14T11:51:36Z",
          "updatedAt": "2023-07-14T11:51:36Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 439,
      "id": "PR_kwDOEpUZs85SczA9",
      "title": "Hash public key; fix up aggregate to match spec",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/439",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR additionally hashes in the public key when deriving the binding factor. This brings the spec into line with the proofs of security. It is also needed to use FROST in other contexts; i.,e  when the keys are re-randomized, which is needed for Zcash.",
      "createdAt": "2023-06-07T19:54:17Z",
      "updatedAt": "2023-07-24T17:38:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "8c730f224887b42770a30411faf7a82dd3f38d46",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "hash-pk",
      "headRefOid": "50b10f62af5e06ed611d8f320395f64ee61f3c42",
      "closedAt": "2023-07-10T21:26:10Z",
      "mergedAt": "2023-07-10T21:26:10Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "abb629b18cccfb7a86c7a6fc870fd01473ca926a"
      },
      "comments": [
        {
          "author": "elichai",
          "authorAssociation": "NONE",
          "body": "> It is also needed to use FROST in other contexts; i.,e when the keys are re-randomized, which is needed for Zcash.\r\n\r\nCould you expand/link a bit more on that?",
          "createdAt": "2023-07-17T13:30:25Z",
          "updatedAt": "2023-07-17T13:30:25Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo @dconnolly, can you please elaborate on this from Zcash's perspective?",
          "createdAt": "2023-07-23T19:43:20Z",
          "updatedAt": "2023-07-23T19:43:20Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Sure. In the context of plain FROST, the public key is static and so hashing it into the blinding factor does not impact the advantage of the adversary. However, Zcash uses re-randomized keys to protect signer's privacy, where zero-knowledge proofs demonstrate that the re-randomized public key has a known relation to the corresponding (base) secret key. In this setting, we want to demonstrate that an adversary that gets to choose the randomizing value does not have any additional advantage in creating a forgery. To do so, we additionally need to hash in the (randomized) public key.",
          "createdAt": "2023-07-24T17:33:58Z",
          "updatedAt": "2023-07-24T17:38:00Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> Sure. In the context of plain FROST, the public key is static and so hashing it into the blinding factor does not impact the advantage of the adversary. However, Zcash uses re-randomized keys to protect signer's privacy, where zero-knowledge proofs demonstrate that the re-randomized public key has a known relation to the corresponding (base) secret key. In this setting, we want to demonstrate that an adversary that gets to choose the randomizing value does not have any additional advantage in creating an unforgeability. To do so, we additionally need to hash in the (randomized) public key.\n\nCreating a forgery, vs creating an unforgeability?",
          "createdAt": "2023-07-24T17:35:41Z",
          "updatedAt": "2023-07-24T17:35:41Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Updated, thanks! ",
          "createdAt": "2023-07-24T17:38:07Z",
          "updatedAt": "2023-07-24T17:38:07Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85XhvNW",
          "commit": {
            "abbreviatedOid": "83e0a55"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-07T19:57:46Z",
          "updatedAt": "2023-06-07T19:57:47Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "```suggestion\r\nIf all signature shares are valid, the Coordinator aggregates them to produce the final\r\n```",
              "createdAt": "2023-06-07T19:57:46Z",
              "updatedAt": "2023-06-07T19:57:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85XhvoM",
          "commit": {
            "abbreviatedOid": "83e0a55"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-07T19:59:02Z",
          "updatedAt": "2023-06-07T19:59:02Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\n  group_public_key_enc = G.SerializeElement(group_public_key)\r\n```",
              "createdAt": "2023-06-07T19:59:02Z",
              "updatedAt": "2023-06-07T19:59:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Xhvv_",
          "commit": {
            "abbreviatedOid": "83e0a55"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-07T19:59:21Z",
          "updatedAt": "2023-06-07T19:59:22Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\n  group_public_key_enc = G.SerializeElement(group_public_key)\r\n```",
              "createdAt": "2023-06-07T19:59:21Z",
              "updatedAt": "2023-06-07T19:59:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Xh2He",
          "commit": {
            "abbreviatedOid": "ed695ad"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-07T20:16:46Z",
          "updatedAt": "2023-06-07T20:16:46Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n    group_public_key_enc = G.serialize(group_public_key)\r\n```",
              "createdAt": "2023-06-07T20:16:46Z",
              "updatedAt": "2023-06-07T20:16:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Xh2Rs",
          "commit": {
            "abbreviatedOid": "ed695ad"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-07T20:17:02Z",
          "updatedAt": "2023-06-07T20:17:02Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n    rho_input_prefix = group_public_key_enc + msg_hash + encoded_commitment_hash\r\n```",
              "createdAt": "2023-06-07T20:17:02Z",
              "updatedAt": "2023-06-07T20:17:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Y9MEo",
          "commit": {
            "abbreviatedOid": "2876766"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-22T06:17:22Z",
          "updatedAt": "2023-06-22T06:17:23Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n  // Hashed to a fixed-length.\r\n  msg_hash = H4(msg)\r\n```",
              "createdAt": "2023-06-22T06:17:22Z",
              "updatedAt": "2023-06-22T06:17:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Y9MJ4",
          "commit": {
            "abbreviatedOid": "2876766"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-22T06:17:40Z",
          "updatedAt": "2023-06-22T06:17:40Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n  // Hashed to a fixed-length.\r\n  encoded_commitment_hash =\r\n      H5(encode_group_commitment_list(commitment_list))\r\n```",
              "createdAt": "2023-06-22T06:17:40Z",
              "updatedAt": "2023-06-22T06:17:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85Y9MVx",
          "commit": {
            "abbreviatedOid": "2876766"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-22T06:18:13Z",
          "updatedAt": "2023-06-22T06:18:13Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\n  // The encoding of the group public key is a fixed length within a ciphersuite.\r\n  rho_input_prefix = group_public_key_enc || msg_hash || encoded_commitment_hash\r\n```",
              "createdAt": "2023-06-22T06:18:13Z",
              "updatedAt": "2023-06-22T06:18:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85ayBpG",
          "commit": {
            "abbreviatedOid": "6d7e193"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Requesting changes until we sort out the assertion failure.",
          "createdAt": "2023-07-10T21:19:26Z",
          "updatedAt": "2023-07-10T21:19:39Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "@dconnolly I don't think we can merge this if this check fails =( Do we know what the issue is? If not, I'll investigate.",
              "createdAt": "2023-07-10T21:19:26Z",
              "updatedAt": "2023-07-10T21:19:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 441,
      "id": "PR_kwDOEpUZs85T9-6l",
      "title": "Update existing implementations table with ZF's crates",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/441",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-26T21:40:19Z",
      "updatedAt": "2023-06-27T19:13:31Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "8c730f224887b42770a30411faf7a82dd3f38d46",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-7",
      "headRefOid": "40b0d3a0958707998c0e170be82d9bacf1be9a6e",
      "closedAt": "2023-06-27T19:13:27Z",
      "mergedAt": "2023-06-27T19:13:27Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "1502707eb1d9c9ec2620ee67358dd0f5961db50a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85ZgbzZ",
          "commit": {
            "abbreviatedOid": "40b0d3a"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks @dconnolly ! ",
          "createdAt": "2023-06-27T19:13:05Z",
          "updatedAt": "2023-06-27T19:13:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 442,
      "id": "PR_kwDOEpUZs85VIam7",
      "title": "Finalize vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/442",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "To \"v1\", i.e., a 1.0 or whatever.",
      "createdAt": "2023-07-10T21:29:06Z",
      "updatedAt": "2023-07-10T23:50:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "abb629b18cccfb7a86c7a6fc870fd01473ca926a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/finalize-vectors",
      "headRefOid": "179b208cb265e976a6c670b1078c33f2e30223c4",
      "closedAt": "2023-07-10T23:50:56Z",
      "mergedAt": "2023-07-10T23:50:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "06e75a6a9938c611c93e79175613b7a075caaa39"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 443,
      "id": "PR_kwDOEpUZs85Vg0zk",
      "title": "Bump actions/setup-python from 4.5.0 to 4.7.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/443",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4.5.0 to 4.7.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>v4.7.0</h2>\n<p>In scope of this release, the support for reading python version from pyproject.toml was added (<a href=\"https://redirect.github.com/actions/setup-python/pull/669\">actions/setup-python#669</a>).</p>\n<pre lang=\"yaml\"><code>      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version-file: pyproject.toml\n</code></pre>\n<h3>Besides, it includes such changes as:</h3>\n<ul>\n<li>Bump tough-cookie and <code>@\u200bazure/ms-rest-js</code> by <a href=\"https://github.com/dependabot\"><code>@\u200bdependabot</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/697\">actions/setup-python#697</a></li>\n<li>Bump semver from 7.3.8 to 7.5.2 by <a href=\"https://github.com/dependabot\"><code>@\u200bdependabot</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/692\">actions/setup-python#692</a></li>\n<li>Fix typos found by codespell by <a href=\"https://github.com/DimitriPapadopoulos\"><code>@\u200bDimitriPapadopoulos</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/650\">actions/setup-python#650</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/dariocurr\"><code>@\u200bdariocurr</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/669\">actions/setup-python#669</a></li>\n<li><a href=\"https://github.com/DimitriPapadopoulos\"><code>@\u200bDimitriPapadopoulos</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/650\">actions/setup-python#650</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4...v4.7.0\">https://github.com/actions/setup-python/compare/v4...v4.7.0</a></p>\n<h2>v4.6.1</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix <code>allow-prereleases</code> sample configuration by <a href=\"https://github.com/mayeut\"><code>@\u200bmayeut</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/615\">actions/setup-python#615</a></li>\n<li>Fix a incorrect link advanced-usage.md by <a href=\"https://github.com/siyuan0322\"><code>@\u200bsiyuan0322</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/657\">actions/setup-python#657</a></li>\n<li>Remove implicit dependency by <a href=\"https://github.com/nikolai-laevskii\"><code>@\u200bnikolai-laevskii</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/668\">actions/setup-python#668</a></li>\n<li>Automatic update of configuration files from 05/23/2023 by <a href=\"https://github.com/github-actions\"><code>@\u200bgithub-actions</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/671\">actions/setup-python#671</a></li>\n<li>Add warning for python 2.7 on release/v4 by <a href=\"https://github.com/dmitry-shibanov\"><code>@\u200bdmitry-shibanov</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/673\">actions/setup-python#673</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/siyuan0322\"><code>@\u200bsiyuan0322</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/657\">actions/setup-python#657</a></li>\n<li><a href=\"https://github.com/nikolai-laevskii\"><code>@\u200bnikolai-laevskii</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/668\">actions/setup-python#668</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4...v4.6.1\">https://github.com/actions/setup-python/compare/v4...v4.6.1</a></p>\n<h2>Add allow-prereleases input</h2>\n<p>In scope of this release we added a new input (<code>allow-prereleases</code>) to allow <a href=\"https://redirect.github.com/actions/setup-python/pull/414\">falling back to pre-release versions of Python when a matching GA version of Python is not available</a></p>\n<pre lang=\"yaml\"><code>steps:\n  - uses: actions/checkout@v3\n  - uses: actions/setup-python@v4\n    with:\n      python-version: 3.12\n      allow-prereleases: true\n</code></pre>\n<p>Besides, we added such changes as:</p>\n<ul>\n<li>Fix bug to trim new line for PyPy version: <a href=\"https://redirect.github.com/actions/setup-python/pull/610\">actions/setup-python#610</a></li>\n<li>Added pip dependency file to generate hash from it: <a href=\"https://redirect.github.com/actions/setup-python/pull/604\">actions/setup-python#604</a></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/61a6322f88396a6271a6ee3565807d608ecaddd1\"><code>61a6322</code></a> Fix typos found by codespell (<a href=\"https://redirect.github.com/actions/setup-python/issues/650\">#650</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/ea5b57fccc93aea0d77e6225efa19adaec3fce0d\"><code>ea5b57f</code></a> Bump semver from 7.3.8 to 7.5.2 (<a href=\"https://redirect.github.com/actions/setup-python/issues/692\">#692</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/014d32a83013b439dd2a147051d855831576a3ef\"><code>014d32a</code></a> Bump tough-cookie and <code>@\u200bazure/ms-rest-js</code> (<a href=\"https://redirect.github.com/actions/setup-python/issues/697\">#697</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/c16c4b8d1828103eda022b2cade091238fe08311\"><code>c16c4b8</code></a> Fix pipenv jobs (<a href=\"https://redirect.github.com/actions/setup-python/issues/699\">#699</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/0d5da6a89a3aa5b4dbd48e38b0c9d678b0caa0e5\"><code>0d5da6a</code></a> Read python version from pyproject.toml (fix <a href=\"https://redirect.github.com/actions/setup-python/issues/542\">#542</a>) (<a href=\"https://redirect.github.com/actions/setup-python/issues/669\">#669</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/3f824b7ca6388f5e27e362d31352e6456c8e3bfb\"><code>3f824b7</code></a> remove python 2.7 from the tests (<a href=\"https://redirect.github.com/actions/setup-python/issues/687\">#687</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/bd6b4b6205c4dbad673328db7b31b7fab9e241c0\"><code>bd6b4b6</code></a> Add warning for python 2.7 (<a href=\"https://redirect.github.com/actions/setup-python/issues/673\">#673</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/0cbcb9a3d7c0b228a2c4fbde82b6e8855233cd92\"><code>0cbcb9a</code></a> Merge pull request <a href=\"https://redirect.github.com/actions/setup-python/issues/668\">#668</a> from akv-platform/disallow-implicit-dependencies</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/669664dac1a46a4bb872089e1a90e4ad5dc232a6\"><code>669664d</code></a> Merge branch 'tool-config-auto-update' into disallow-implicit-dependencies</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/9cbf792a3cbbd9c37749da21d3b171b927451bb0\"><code>9cbf792</code></a> Update configuration files</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v4.5.0...v4.7.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=4.5.0&new-version=4.7.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2023-07-14T11:51:32Z",
      "updatedAt": "2023-08-18T14:51:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "a174e7f6964e96446953c5a16634be9b43491387",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.7.0",
      "headRefOid": "25b819584606633f00d566123d9b5f6e36326a3b",
      "closedAt": "2023-08-18T14:50:59Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.\n\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.",
          "createdAt": "2023-08-18T14:51:01Z",
          "updatedAt": "2023-08-18T14:51:01Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 447,
      "id": "PR_kwDOEpUZs85V6Gta",
      "title": "fix typo",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/447",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-19T15:50:08Z",
      "updatedAt": "2023-07-19T15:56:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "a174e7f6964e96446953c5a16634be9b43491387",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-7",
      "headRefOid": "ff4f24af934433433563ea8a9f161df86c181de0",
      "closedAt": "2023-07-19T15:56:45Z",
      "mergedAt": "2023-07-19T15:56:45Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "377cce715939cf478cb65eb130dc07a16d476c35"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 448,
      "id": "PR_kwDOEpUZs85V7akJ",
      "title": "s/x_list/participant_list/",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/448",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #445 ",
      "createdAt": "2023-07-19T19:39:37Z",
      "updatedAt": "2023-07-19T19:40:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "377cce715939cf478cb65eb130dc07a16d476c35",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-8",
      "headRefOid": "8d0b8d2f95e1a5d7ed33a0d4d0d8f0703ad1b792",
      "closedAt": "2023-07-19T19:40:31Z",
      "mergedAt": "2023-07-19T19:40:31Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "d278bb3eae123d0dd0fe9df27514e52877beb1fc"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 449,
      "id": "PR_kwDOEpUZs85V7dRI",
      "title": "Track modular-frost as v14",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/449",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/serai-dex/serai/commit/c2f32e78824d36dbcec637f603664d62a9f4d06b for the commit updating to v14.",
      "createdAt": "2023-07-19T19:49:02Z",
      "updatedAt": "2023-07-26T17:50:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d278bb3eae123d0dd0fe9df27514e52877beb1fc",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "patch-2",
      "headRefOid": "0c5d6c99f7edf42718e2c89f76cb86e6f426cd9c",
      "closedAt": "2023-07-26T17:09:22Z",
      "mergedAt": "2023-07-26T17:09:22Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "47b46a831ed740508a04acaaaedd1ecde018ef1e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85cSAx9",
          "commit": {
            "abbreviatedOid": "0c5d6c9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-26T17:09:16Z",
          "updatedAt": "2023-07-26T17:09:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 450,
      "id": "PR_kwDOEpUZs85V8qa7",
      "title": "Make some implicit requirements explicit",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/450",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Except for the section on constant-time arithmetic",
      "createdAt": "2023-07-20T01:27:25Z",
      "updatedAt": "2023-07-26T18:03:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d278bb3eae123d0dd0fe9df27514e52877beb1fc",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-8",
      "headRefOid": "bfc3d213509e41d7c03fa8138b5d39325f34a380",
      "closedAt": "2023-07-26T17:08:12Z",
      "mergedAt": "2023-07-26T17:08:12Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "440df1bfbb069256c5a85fe32f493443cc40facd"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood thoughts on this?",
          "createdAt": "2023-07-26T17:06:16Z",
          "updatedAt": "2023-07-26T17:06:16Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry for the delay! This LGTM \ud83d\udc4d",
          "createdAt": "2023-07-26T17:08:05Z",
          "updatedAt": "2023-07-26T17:08:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85cSAM4",
          "commit": {
            "abbreviatedOid": "bfc3d21"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-26T17:07:54Z",
          "updatedAt": "2023-07-26T17:07:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 454,
      "id": "PR_kwDOEpUZs85XMxyp",
      "title": "Update implementation support for Thomas Pornin's implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/454",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-04T13:51:23Z",
      "updatedAt": "2023-08-17T15:26:10Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "47b46a831ed740508a04acaaaedd1ecde018ef1e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "update-impl",
      "headRefOid": "f21602a57fa24a02f7867f0da56caf268ea6d3f3",
      "closedAt": "2023-08-15T17:57:17Z",
      "mergedAt": "2023-08-15T17:57:17Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f01f3ffd896de0532b711eb8c7f08348f65c94ab"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 456,
      "id": "PR_kwDOEpUZs85YAd9Y",
      "title": "Update old reference",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/456",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Address #453",
      "createdAt": "2023-08-15T21:32:21Z",
      "updatedAt": "2023-08-17T15:26:41Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "f01f3ffd896de0532b711eb8c7f08348f65c94ab",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "old-participants",
      "headRefOid": "8cef4986775fdc73c9d9bdd2d609924a541deeba",
      "closedAt": "2023-08-17T15:26:38Z",
      "mergedAt": "2023-08-17T15:26:38Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "6566b1a84de04760633f58afe27f18e4cde187e7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85eWPBT",
          "commit": {
            "abbreviatedOid": "8cef498"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-17T15:26:28Z",
          "updatedAt": "2023-08-17T15:26:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 457,
      "id": "PR_kwDOEpUZs85YAhws",
      "title": "Gives pointer to improved performance",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/457",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #433",
      "createdAt": "2023-08-15T21:47:47Z",
      "updatedAt": "2023-08-17T15:28:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "f01f3ffd896de0532b711eb8c7f08348f65c94ab",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "pippenger",
      "headRefOid": "a49b86c2a5ce4ec9697734fc29d493f20c62c756",
      "closedAt": "2023-08-17T15:28:42Z",
      "mergedAt": "2023-08-17T15:28:42Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "8ff57f6ecfcf9b5f498f0688577bcc771181c49e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85eWQVq",
          "commit": {
            "abbreviatedOid": "a49b86c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-17T15:28:24Z",
          "updatedAt": "2023-08-17T15:28:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 458,
      "id": "PR_kwDOEpUZs85ZkPY4",
      "title": "Bump actions/checkout from 3 to 4",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/458",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/checkout](https://github.com/actions/checkout) from 3 to 4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/releases\">actions/checkout's releases</a>.</em></p>\n<blockquote>\n<h2>v4.0.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Update default runtime to node20 by <a href=\"https://github.com/takost\"><code>@\u200btakost</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1436\">actions/checkout#1436</a></li>\n<li>Support fetching without the --progress option by <a href=\"https://github.com/simonbaird\"><code>@\u200bsimonbaird</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1067\">actions/checkout#1067</a></li>\n<li>Release 4.0.0 by <a href=\"https://github.com/takost\"><code>@\u200btakost</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1447\">actions/checkout#1447</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/takost\"><code>@\u200btakost</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1436\">actions/checkout#1436</a></li>\n<li><a href=\"https://github.com/simonbaird\"><code>@\u200bsimonbaird</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1067\">actions/checkout#1067</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3...v4.0.0\">https://github.com/actions/checkout/compare/v3...v4.0.0</a></p>\n<h2>v3.6.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Mark test scripts with Bash'isms to be run via Bash by <a href=\"https://github.com/dscho\"><code>@\u200bdscho</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1377\">actions/checkout#1377</a></li>\n<li>Add option to fetch tags even if fetch-depth &gt; 0 by <a href=\"https://github.com/RobertWieczoreck\"><code>@\u200bRobertWieczoreck</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/579\">actions/checkout#579</a></li>\n<li>Release 3.6.0 by <a href=\"https://github.com/luketomlinson\"><code>@\u200bluketomlinson</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1437\">actions/checkout#1437</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/RobertWieczoreck\"><code>@\u200bRobertWieczoreck</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/579\">actions/checkout#579</a></li>\n<li><a href=\"https://github.com/luketomlinson\"><code>@\u200bluketomlinson</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1437\">actions/checkout#1437</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3.5.3...v3.6.0\">https://github.com/actions/checkout/compare/v3.5.3...v3.6.0</a></p>\n<h2>v3.5.3</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix: Checkout Issue in self hosted runner due to faulty submodule check-ins by <a href=\"https://github.com/megamanics\"><code>@\u200bmegamanics</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1196\">actions/checkout#1196</a></li>\n<li>Fix typos found by codespell by <a href=\"https://github.com/DimitriPapadopoulos\"><code>@\u200bDimitriPapadopoulos</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1287\">actions/checkout#1287</a></li>\n<li>Add support for sparse checkouts by <a href=\"https://github.com/dscho\"><code>@\u200bdscho</code></a> and <a href=\"https://github.com/dfdez\"><code>@\u200bdfdez</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1369\">actions/checkout#1369</a></li>\n<li>Release v3.5.3 by <a href=\"https://github.com/TingluoHuang\"><code>@\u200bTingluoHuang</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1376\">actions/checkout#1376</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/megamanics\"><code>@\u200bmegamanics</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1196\">actions/checkout#1196</a></li>\n<li><a href=\"https://github.com/DimitriPapadopoulos\"><code>@\u200bDimitriPapadopoulos</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1287\">actions/checkout#1287</a></li>\n<li><a href=\"https://github.com/dfdez\"><code>@\u200bdfdez</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1369\">actions/checkout#1369</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3...v3.5.3\">https://github.com/actions/checkout/compare/v3...v3.5.3</a></p>\n<h2>v3.5.2</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix: Use correct API url / endpoint in GHES by <a href=\"https://github.com/fhammerl\"><code>@\u200bfhammerl</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1289\">actions/checkout#1289</a> based on <a href=\"https://redirect.github.com/actions/checkout/issues/1286\">#1286</a> by <a href=\"https://github.com/1newsr\"><code>@\u200b1newsr</code></a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/checkout/compare/v3.5.1...v3.5.2\">https://github.com/actions/checkout/compare/v3.5.1...v3.5.2</a></p>\n<h2>v3.5.1</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Improve checkout performance on Windows runners by upgrading <code>@\u200bactions/github</code> dependency by <a href=\"https://github.com/BrettDong\"><code>@\u200bBrettDong</code></a> in <a href=\"https://redirect.github.com/actions/checkout/pull/1246\">actions/checkout#1246</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/BrettDong\"><code>@\u200bBrettDong</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/checkout/pull/1246\">actions/checkout#1246</a></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/blob/main/CHANGELOG.md\">actions/checkout's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>v4.0.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1067\">Support fetching without the --progress option</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1436\">Update to node20</a></li>\n</ul>\n<h2>v3.6.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1377\">Fix: Mark test scripts with Bash'isms to be run via Bash</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/579\">Add option to fetch tags even if fetch-depth &gt; 0</a></li>\n</ul>\n<h2>v3.5.3</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1196\">Fix: Checkout fail in self-hosted runners when faulty submodule are checked-in</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1287\">Fix typos found by codespell</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1369\">Add support for sparse checkouts</a></li>\n</ul>\n<h2>v3.5.2</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1289\">Fix api endpoint for GHES</a></li>\n</ul>\n<h2>v3.5.1</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1246\">Fix slow checkout on Windows</a></li>\n</ul>\n<h2>v3.5.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1237\">Add new public key for known_hosts</a></li>\n</ul>\n<h2>v3.4.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1209\">Upgrade codeql actions to v2</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1210\">Upgrade dependencies</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1225\">Upgrade <code>@\u200bactions/io</code></a></li>\n</ul>\n<h2>v3.3.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1045\">Implement branch list using callbacks from exec function</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1050\">Add in explicit reference to private checkout options</a></li>\n<li>[Fix comment typos (that got added in <a href=\"https://redirect.github.com/actions/checkout/issues/770\">#770</a>)](<a href=\"https://redirect.github.com/actions/checkout/pull/1057\">actions/checkout#1057</a>)</li>\n</ul>\n<h2>v3.2.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/942\">Add GitHub Action to perform release</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/967\">Fix status badge</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1002\">Replace datadog/squid with ubuntu/squid Docker image</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/964\">Wrap pipeline commands for submoduleForeach in quotes</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1029\">Update <code>@\u200bactions/io</code> to 1.1.2</a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/1039\">Upgrading version to 3.2.0</a></li>\n</ul>\n<h2>v3.1.0</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/939\">Use <code>@\u200bactions/core</code> <code>saveState</code> and <code>getState</code></a></li>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/922\">Add <code>github-server-url</code> input</a></li>\n</ul>\n<h2>v3.0.2</h2>\n<ul>\n<li><a href=\"https://redirect.github.com/actions/checkout/pull/770\">Add input <code>set-safe-directory</code></a></li>\n</ul>\n<h2>v3.0.1</h2>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/checkout/commit/3df4ab11eba7bda6032a0b82a6bb43b11571feac\"><code>3df4ab1</code></a> Release 4.0.0 (<a href=\"https://redirect.github.com/actions/checkout/issues/1447\">#1447</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/8b5e8b768746b50394015010d25e690bfab9dfbc\"><code>8b5e8b7</code></a> Support fetching without the --progress option (<a href=\"https://redirect.github.com/actions/checkout/issues/1067\">#1067</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/97a652b80035363df47baee5031ec8670b8878ac\"><code>97a652b</code></a> Update default runtime to node20 (<a href=\"https://redirect.github.com/actions/checkout/issues/1436\">#1436</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/checkout/compare/v3...v4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/checkout&package-manager=github_actions&previous-version=3&new-version=4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2023-09-05T11:51:47Z",
      "updatedAt": "2023-09-05T12:23:14Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "8ff57f6ecfcf9b5f498f0688577bcc771181c49e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/checkout-4",
      "headRefOid": "0937508ad9d01b843eca9fdb94a0902ee0d3bdad",
      "closedAt": "2023-09-05T12:23:06Z",
      "mergedAt": "2023-09-05T12:23:06Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "2211c5879c746b2182573892008b53a94766c4ee"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85gBM_I",
          "commit": {
            "abbreviatedOid": "0937508"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-05T12:22:56Z",
          "updatedAt": "2023-09-05T12:22:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 459,
      "id": "PR_kwDOEpUZs85aFByZ",
      "title": "Address ISRG edits",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/459",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-09-12T02:18:32Z",
      "updatedAt": "2023-09-12T14:29:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2211c5879c746b2182573892008b53a94766c4ee",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "isrg-review",
      "headRefOid": "5d0ed9fc7cd5afb28db6bc6fafb01878449190d3",
      "closedAt": "2023-09-12T14:29:18Z",
      "mergedAt": "2023-09-12T14:29:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d02d98cdcb7f951509d505194062fe4f7216e0b8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85goHj6",
          "commit": {
            "abbreviatedOid": "5d0ed9f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-12T02:20:57Z",
          "updatedAt": "2023-09-12T02:20:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85gs9yU",
          "commit": {
            "abbreviatedOid": "5d0ed9f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm going to propose some changes on top of this to avoid the MUST altogether, but let's merge this as-is.",
          "createdAt": "2023-09-12T14:29:14Z",
          "updatedAt": "2023-09-12T14:29:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 460,
      "id": "PR_kwDOEpUZs85aIyzr",
      "title": "Spell out keys",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/460",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This unifies terminology around `secret_key`, `public_key`, and `group_public_key`, rather than using `sk`, `PK`, etc interchangeably. ",
      "createdAt": "2023-09-12T14:34:15Z",
      "updatedAt": "2023-09-13T21:52:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d02d98cdcb7f951509d505194062fe4f7216e0b8",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/spell-out-keys",
      "headRefOid": "fe83d55a7833a55f8ecb281266c0897a9441b16e",
      "closedAt": "2023-09-13T20:24:52Z",
      "mergedAt": "2023-09-13T20:24:52Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "4133010e1bd5329888a819044463a3abadbc224a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85g4Yfz",
          "commit": {
            "abbreviatedOid": "fe83d55"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This is a nice change, thanks @chris-wood ! ",
          "createdAt": "2023-09-13T20:24:42Z",
          "updatedAt": "2023-09-13T20:24:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85g40x1",
          "commit": {
            "abbreviatedOid": "fe83d55"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83d\udc4d",
          "createdAt": "2023-09-13T21:52:49Z",
          "updatedAt": "2023-09-13T21:52:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 461,
      "id": "PR_kwDOEpUZs85awkZN",
      "title": "Update 'removing the coordinator role' section to align with existing 'signature share aggregation' section",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/461",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves https://github.com/cfrg/draft-irtf-cfrg-frost/issues/452\r\n\r\n@kevin-henry-ncc, thoughts?",
      "createdAt": "2023-09-20T08:52:49Z",
      "updatedAt": "2023-09-21T17:12:35Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4133010e1bd5329888a819044463a3abadbc224a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-8",
      "headRefOid": "72cb7b50dbe4406524b5b98ac1d63a9bc3657db2",
      "closedAt": "2023-09-21T17:12:31Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> Since this is guidance, I don't think the use of normative language here is appropriate. I put up an alternative in #462 that I think addresses the issue without being so rigid. Please have a look!\r\n\r\nLooks good! Closing this one in favor of that one ",
          "createdAt": "2023-09-21T17:12:28Z",
          "updatedAt": "2023-09-21T17:12:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85hmg2p",
          "commit": {
            "abbreviatedOid": "72cb7b5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Since this is guidance, I don't think the use of normative language here is appropriate. I put up an alternative in #462 that I think addresses the issue without being so rigid. Please have a look!",
          "createdAt": "2023-09-21T10:29:04Z",
          "updatedAt": "2023-09-21T10:29:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 462,
      "id": "PR_kwDOEpUZs85a3xY7",
      "title": "Rearrange no coordinator steps",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/462",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Alternative to #461, which avoids use of normative language.\r\n\r\nCloses #452 \r\n\r\ncc @dconnolly @kevin-henry-ncc",
      "createdAt": "2023-09-21T10:27:45Z",
      "updatedAt": "2023-09-21T20:50:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4133010e1bd5329888a819044463a3abadbc224a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "chris-wood-patch-5",
      "headRefOid": "9dd58f449d2a3d26e8cc0104a8fc87748ebbf3e2",
      "closedAt": "2023-09-21T20:50:47Z",
      "mergedAt": "2023-09-21T20:50:47Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c13c2d089be94c848cadc18eeada457cb6b0417a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85hpzxt",
          "commit": {
            "abbreviatedOid": "9dd58f4"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-21T17:12:16Z",
          "updatedAt": "2023-09-21T17:12:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85hp2am",
          "commit": {
            "abbreviatedOid": "9dd58f4"
          },
          "author": "kevin-henry-ncc",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Looks good to me. Thanks for considering the suggestion.",
          "createdAt": "2023-09-21T17:19:09Z",
          "updatedAt": "2023-09-21T17:19:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 463,
      "id": "PR_kwDOEpUZs85bdyhL",
      "title": "Remove confusion about why channels are authenticated; it is for identifying misbehaving parties",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/463",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @conradoplg ",
      "createdAt": "2023-09-28T16:45:29Z",
      "updatedAt": "2023-09-28T19:21:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c13c2d089be94c848cadc18eeada457cb6b0417a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "authenticated-channels",
      "headRefOid": "b980889bd0e3f81d3d6897fbbfff99afc179d5b2",
      "closedAt": "2023-09-28T19:21:52Z",
      "mergedAt": "2023-09-28T19:21:52Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "127452b93acb3094a6f659d059550df5618c2714"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85iUWoj",
          "commit": {
            "abbreviatedOid": "fe9b884"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-28T18:40:45Z",
          "updatedAt": "2023-09-28T18:40:45Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nsigners, the network channel should be additionally authenticated;\r\nsee {{abort}} for more discussion.\r\n```",
              "createdAt": "2023-09-28T18:40:45Z",
              "updatedAt": "2023-09-28T18:40:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs85iUWqA",
          "commit": {
            "abbreviatedOid": "fe9b884"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-28T18:40:49Z",
          "updatedAt": "2023-09-28T18:40:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85iUbjh",
          "commit": {
            "abbreviatedOid": "fe9b884"
          },
          "author": "conradoplg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-28T18:54:45Z",
          "updatedAt": "2023-09-28T18:54:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs85iUkv-",
          "commit": {
            "abbreviatedOid": "b980889"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-28T19:21:34Z",
          "updatedAt": "2023-09-28T19:21:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 464,
      "id": "PR_kwDOEpUZs85bqbGt",
      "title": "Bump actions/setup-python from 4.5.0 to 4.7.1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/464",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4.5.0 to 4.7.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>v4.7.1</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Bump word-wrap from 1.2.3 to 1.2.4 by <a href=\"https://github.com/dependabot\"><code>@\u200bdependabot</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/702\">actions/setup-python#702</a></li>\n<li>Add range validation for toml files by <a href=\"https://github.com/dmitry-shibanov\"><code>@\u200bdmitry-shibanov</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/726\">actions/setup-python#726</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4...v4.7.1\">https://github.com/actions/setup-python/compare/v4...v4.7.1</a></p>\n<h2>v4.7.0</h2>\n<p>In scope of this release, the support for reading python version from pyproject.toml was added (<a href=\"https://redirect.github.com/actions/setup-python/pull/669\">actions/setup-python#669</a>).</p>\n<pre lang=\"yaml\"><code>      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version-file: pyproject.toml\n</code></pre>\n<h3>Besides, it includes such changes as:</h3>\n<ul>\n<li>Bump tough-cookie and <code>@\u200bazure/ms-rest-js</code> by <a href=\"https://github.com/dependabot\"><code>@\u200bdependabot</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/697\">actions/setup-python#697</a></li>\n<li>Bump semver from 7.3.8 to 7.5.2 by <a href=\"https://github.com/dependabot\"><code>@\u200bdependabot</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/692\">actions/setup-python#692</a></li>\n<li>Fix typos found by codespell by <a href=\"https://github.com/DimitriPapadopoulos\"><code>@\u200bDimitriPapadopoulos</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/650\">actions/setup-python#650</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/dariocurr\"><code>@\u200bdariocurr</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/669\">actions/setup-python#669</a></li>\n<li><a href=\"https://github.com/DimitriPapadopoulos\"><code>@\u200bDimitriPapadopoulos</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/650\">actions/setup-python#650</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4...v4.7.0\">https://github.com/actions/setup-python/compare/v4...v4.7.0</a></p>\n<h2>v4.6.1</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Fix <code>allow-prereleases</code> sample configuration by <a href=\"https://github.com/mayeut\"><code>@\u200bmayeut</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/615\">actions/setup-python#615</a></li>\n<li>Fix a incorrect link advanced-usage.md by <a href=\"https://github.com/siyuan0322\"><code>@\u200bsiyuan0322</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/657\">actions/setup-python#657</a></li>\n<li>Remove implicit dependency by <a href=\"https://github.com/nikolai-laevskii\"><code>@\u200bnikolai-laevskii</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/668\">actions/setup-python#668</a></li>\n<li>Automatic update of configuration files from 05/23/2023 by <a href=\"https://github.com/github-actions\"><code>@\u200bgithub-actions</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/671\">actions/setup-python#671</a></li>\n<li>Add warning for python 2.7 on release/v4 by <a href=\"https://github.com/dmitry-shibanov\"><code>@\u200bdmitry-shibanov</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/673\">actions/setup-python#673</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/siyuan0322\"><code>@\u200bsiyuan0322</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/657\">actions/setup-python#657</a></li>\n<li><a href=\"https://github.com/nikolai-laevskii\"><code>@\u200bnikolai-laevskii</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/668\">actions/setup-python#668</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4...v4.6.1\">https://github.com/actions/setup-python/compare/v4...v4.6.1</a></p>\n<h2>Add allow-prereleases input</h2>\n<p>In scope of this release we added a new input (<code>allow-prereleases</code>) to allow <a href=\"https://redirect.github.com/actions/setup-python/pull/414\">falling back to pre-release versions of Python when a matching GA version of Python is not available</a></p>\n<pre lang=\"yaml\"><code>steps:\n  - uses: actions/checkout@v3\n  - uses: actions/setup-python@v4\n&lt;/tr&gt;&lt;/table&gt; \n</code></pre>\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236\"><code>65d7f2d</code></a> Add range validation for toml files (<a href=\"https://redirect.github.com/actions/setup-python/issues/726\">#726</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/f97b83114c6f41cfaa57698147ad3ce20543a127\"><code>f97b831</code></a> Bump word-wrap from 1.2.3 to 1.2.4 (<a href=\"https://redirect.github.com/actions/setup-python/issues/702\">#702</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/61a6322f88396a6271a6ee3565807d608ecaddd1\"><code>61a6322</code></a> Fix typos found by codespell (<a href=\"https://redirect.github.com/actions/setup-python/issues/650\">#650</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/ea5b57fccc93aea0d77e6225efa19adaec3fce0d\"><code>ea5b57f</code></a> Bump semver from 7.3.8 to 7.5.2 (<a href=\"https://redirect.github.com/actions/setup-python/issues/692\">#692</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/014d32a83013b439dd2a147051d855831576a3ef\"><code>014d32a</code></a> Bump tough-cookie and <code>@\u200bazure/ms-rest-js</code> (<a href=\"https://redirect.github.com/actions/setup-python/issues/697\">#697</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/c16c4b8d1828103eda022b2cade091238fe08311\"><code>c16c4b8</code></a> Fix pipenv jobs (<a href=\"https://redirect.github.com/actions/setup-python/issues/699\">#699</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/0d5da6a89a3aa5b4dbd48e38b0c9d678b0caa0e5\"><code>0d5da6a</code></a> Read python version from pyproject.toml (fix <a href=\"https://redirect.github.com/actions/setup-python/issues/542\">#542</a>) (<a href=\"https://redirect.github.com/actions/setup-python/issues/669\">#669</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/3f824b7ca6388f5e27e362d31352e6456c8e3bfb\"><code>3f824b7</code></a> remove python 2.7 from the tests (<a href=\"https://redirect.github.com/actions/setup-python/issues/687\">#687</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/bd6b4b6205c4dbad673328db7b31b7fab9e241c0\"><code>bd6b4b6</code></a> Add warning for python 2.7 (<a href=\"https://redirect.github.com/actions/setup-python/issues/673\">#673</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/0cbcb9a3d7c0b228a2c4fbde82b6e8855233cd92\"><code>0cbcb9a</code></a> Merge pull request <a href=\"https://redirect.github.com/actions/setup-python/issues/668\">#668</a> from akv-platform/disallow-implicit-dependencies</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v4.5.0...v4.7.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=4.5.0&new-version=4.7.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2023-10-02T11:22:17Z",
      "updatedAt": "2023-12-05T12:15:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "127452b93acb3094a6f659d059550df5618c2714",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.7.1",
      "headRefOid": "e44e16c96f68c3b6c8958cf370787122cd7798ad",
      "closedAt": "2023-12-05T12:15:50Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Superseded by #465.",
          "createdAt": "2023-12-05T12:15:49Z",
          "updatedAt": "2023-12-05T12:15:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs85jPCj-",
          "commit": {
            "abbreviatedOid": "e44e16c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-09T16:13:20Z",
          "updatedAt": "2023-10-09T16:13:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 465,
      "id": "PR_kwDOEpUZs85hK7sd",
      "title": "Bump actions/setup-python from 4.5.0 to 4.8.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/465",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4.5.0 to 4.8.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>v4.8.0</h2>\n<h2>What's Changed</h2>\n<p>In scope of this release we added support for GraalPy (<a href=\"https://redirect.github.com/actions/setup-python/pull/694\">actions/setup-python#694</a>). You can use this snippet to set up GraalPy:</p>\n<pre lang=\"yaml\"><code>steps:\n- uses: actions/checkout@v4\n- uses: actions/setup-python@v4 \n  with:\n    python-version: 'graalpy-22.3' \n- run: python my_script.py\n</code></pre>\n<p>Besides, the release contains such changes as:</p>\n<ul>\n<li>Trim python version when reading from file by <a href=\"https://github.com/FerranPares\"><code>@\u200bFerranPares</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/628\">actions/setup-python#628</a></li>\n<li>Use non-deprecated versions in examples by <a href=\"https://github.com/jeffwidman\"><code>@\u200bjeffwidman</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/724\">actions/setup-python#724</a></li>\n<li>Change deprecation comment to past tense by <a href=\"https://github.com/jeffwidman\"><code>@\u200bjeffwidman</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/723\">actions/setup-python#723</a></li>\n<li>Bump <code>@\u200bbabel/traverse</code> from 7.9.0 to 7.23.2 by <a href=\"https://github.com/dependabot\"><code>@\u200bdependabot</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/743\">actions/setup-python#743</a></li>\n<li>advanced-usage.md: Encourage the use actions/checkout@v4 by <a href=\"https://github.com/cclauss\"><code>@\u200bcclauss</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/729\">actions/setup-python#729</a></li>\n<li>Examples now use checkout@v4 by <a href=\"https://github.com/simonw\"><code>@\u200bsimonw</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/738\">actions/setup-python#738</a></li>\n<li>Update actions/checkout to v4 by <a href=\"https://github.com/dmitry-shibanov\"><code>@\u200bdmitry-shibanov</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/761\">actions/setup-python#761</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/FerranPares\"><code>@\u200bFerranPares</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/628\">actions/setup-python#628</a></li>\n<li><a href=\"https://github.com/timfel\"><code>@\u200btimfel</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/694\">actions/setup-python#694</a></li>\n<li><a href=\"https://github.com/jeffwidman\"><code>@\u200bjeffwidman</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/724\">actions/setup-python#724</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4...v4.8.0\">https://github.com/actions/setup-python/compare/v4...v4.8.0</a></p>\n<h2>v4.7.1</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Bump word-wrap from 1.2.3 to 1.2.4 by <a href=\"https://github.com/dependabot\"><code>@\u200bdependabot</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/702\">actions/setup-python#702</a></li>\n<li>Add range validation for toml files by <a href=\"https://github.com/dmitry-shibanov\"><code>@\u200bdmitry-shibanov</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/726\">actions/setup-python#726</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4...v4.7.1\">https://github.com/actions/setup-python/compare/v4...v4.7.1</a></p>\n<h2>v4.7.0</h2>\n<p>In scope of this release, the support for reading python version from pyproject.toml was added (<a href=\"https://redirect.github.com/actions/setup-python/pull/669\">actions/setup-python#669</a>).</p>\n<pre lang=\"yaml\"><code>      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version-file: pyproject.toml\n</code></pre>\n<h3>Besides, it includes such changes as:</h3>\n<ul>\n<li>Bump tough-cookie and <code>@\u200bazure/ms-rest-js</code> by <a href=\"https://github.com/dependabot\"><code>@\u200bdependabot</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/697\">actions/setup-python#697</a></li>\n<li>Bump semver from 7.3.8 to 7.5.2 by <a href=\"https://github.com/dependabot\"><code>@\u200bdependabot</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/692\">actions/setup-python#692</a></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/b64ffcaf5b410884ad320a9cfac8866006a109aa\"><code>b64ffca</code></a> update actions/checkout to v4 (<a href=\"https://redirect.github.com/actions/setup-python/issues/761\">#761</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/8d2896179abf658742de432b3f203d2c2d86a587\"><code>8d28961</code></a> Examples now use checkout@v4 (<a href=\"https://redirect.github.com/actions/setup-python/issues/738\">#738</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7bc6abb01e0555719edc2dbca70a2fde309e5e56\"><code>7bc6abb</code></a> advanced-usage.md: Encourage the use actions/checkout@v4 (<a href=\"https://redirect.github.com/actions/setup-python/issues/729\">#729</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/e8111cec9d3dc15220d8a3b638f08419f57b906a\"><code>e8111ce</code></a> Bump <code>@\u200bbabel/traverse</code> from 7.9.0 to 7.23.2 (<a href=\"https://redirect.github.com/actions/setup-python/issues/743\">#743</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/a00ea43da65e7c04d2bdae58b3afecd77057eb9e\"><code>a00ea43</code></a> add fix for graalpy ci (<a href=\"https://redirect.github.com/actions/setup-python/issues/741\">#741</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/8635b1ccc5934e73ed3510980fd2e7790b85839b\"><code>8635b1c</code></a> Change deprecation comment to past tense (<a href=\"https://redirect.github.com/actions/setup-python/issues/723\">#723</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/f6cc428f535856f9c23558d01765a42a4d6cf758\"><code>f6cc428</code></a> Use non-deprecated versions in examples (<a href=\"https://redirect.github.com/actions/setup-python/issues/724\">#724</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/5f2af211d616f86005883b44826180b21abb4060\"><code>5f2af21</code></a> Add GraalPy support (<a href=\"https://redirect.github.com/actions/setup-python/issues/694\">#694</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/3467d92d48812f2876be76290f77c3d8a728212a\"><code>3467d92</code></a> Trim python version to get rid of '\\n' (<a href=\"https://redirect.github.com/actions/setup-python/issues/628\">#628</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236\"><code>65d7f2d</code></a> Add range validation for toml files (<a href=\"https://redirect.github.com/actions/setup-python/issues/726\">#726</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v4.5.0...v4.8.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=4.5.0&new-version=4.8.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2023-12-05T12:15:45Z",
      "updatedAt": "2023-12-06T12:41:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "127452b93acb3094a6f659d059550df5618c2714",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.8.0",
      "headRefOid": "0d2113e44ba790d3e272a9e17cdb1e6099de4601",
      "closedAt": "2023-12-06T12:41:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Superseded by #466.",
          "createdAt": "2023-12-06T12:41:48Z",
          "updatedAt": "2023-12-06T12:41:48Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 466,
      "id": "PR_kwDOEpUZs85hTKks",
      "title": "Bump actions/setup-python from 4.5.0 to 5.0.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/466",
      "state": "OPEN",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4.5.0 to 5.0.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>v5.0.0</h2>\n<h2>What's Changed</h2>\n<p>In scope of this release, we update node version runtime from node16 to node20 (<a href=\"https://redirect.github.com/actions/setup-python/pull/772\">actions/setup-python#772</a>). Besides, we update dependencies to the latest versions.</p>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4.8.0...v5.0.0\">https://github.com/actions/setup-python/compare/v4.8.0...v5.0.0</a></p>\n<h2>v4.8.0</h2>\n<h2>What's Changed</h2>\n<p>In scope of this release we added support for GraalPy (<a href=\"https://redirect.github.com/actions/setup-python/pull/694\">actions/setup-python#694</a>). You can use this snippet to set up GraalPy:</p>\n<pre lang=\"yaml\"><code>steps:\n- uses: actions/checkout@v4\n- uses: actions/setup-python@v4 \n  with:\n    python-version: 'graalpy-22.3' \n- run: python my_script.py\n</code></pre>\n<p>Besides, the release contains such changes as:</p>\n<ul>\n<li>Trim python version when reading from file by <a href=\"https://github.com/FerranPares\"><code>@\u200bFerranPares</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/628\">actions/setup-python#628</a></li>\n<li>Use non-deprecated versions in examples by <a href=\"https://github.com/jeffwidman\"><code>@\u200bjeffwidman</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/724\">actions/setup-python#724</a></li>\n<li>Change deprecation comment to past tense by <a href=\"https://github.com/jeffwidman\"><code>@\u200bjeffwidman</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/723\">actions/setup-python#723</a></li>\n<li>Bump <code>@\u200bbabel/traverse</code> from 7.9.0 to 7.23.2 by <a href=\"https://github.com/dependabot\"><code>@\u200bdependabot</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/743\">actions/setup-python#743</a></li>\n<li>advanced-usage.md: Encourage the use actions/checkout@v4 by <a href=\"https://github.com/cclauss\"><code>@\u200bcclauss</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/729\">actions/setup-python#729</a></li>\n<li>Examples now use checkout@v4 by <a href=\"https://github.com/simonw\"><code>@\u200bsimonw</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/738\">actions/setup-python#738</a></li>\n<li>Update actions/checkout to v4 by <a href=\"https://github.com/dmitry-shibanov\"><code>@\u200bdmitry-shibanov</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/761\">actions/setup-python#761</a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/FerranPares\"><code>@\u200bFerranPares</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/628\">actions/setup-python#628</a></li>\n<li><a href=\"https://github.com/timfel\"><code>@\u200btimfel</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/694\">actions/setup-python#694</a></li>\n<li><a href=\"https://github.com/jeffwidman\"><code>@\u200bjeffwidman</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/setup-python/pull/724\">actions/setup-python#724</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4...v4.8.0\">https://github.com/actions/setup-python/compare/v4...v4.8.0</a></p>\n<h2>v4.7.1</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Bump word-wrap from 1.2.3 to 1.2.4 by <a href=\"https://github.com/dependabot\"><code>@\u200bdependabot</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/702\">actions/setup-python#702</a></li>\n<li>Add range validation for toml files by <a href=\"https://github.com/dmitry-shibanov\"><code>@\u200bdmitry-shibanov</code></a> in <a href=\"https://redirect.github.com/actions/setup-python/pull/726\">actions/setup-python#726</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/setup-python/compare/v4...v4.7.1\">https://github.com/actions/setup-python/compare/v4...v4.7.1</a></p>\n<h2>v4.7.0</h2>\n<p>In scope of this release, the support for reading python version from pyproject.toml was added (<a href=\"https://redirect.github.com/actions/setup-python/pull/669\">actions/setup-python#669</a>).</p>\n<pre lang=\"yaml\"><code>      - name: Setup Python\n        uses: actions/setup-python@v4\n&lt;/tr&gt;&lt;/table&gt; \n</code></pre>\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/0a5c61591373683505ea898e09a3ea4f39ef2b9c\"><code>0a5c615</code></a> Update action to node20 (<a href=\"https://redirect.github.com/actions/setup-python/issues/772\">#772</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/0ae58361cdfd39e2950bed97a1e26aa20c3d8955\"><code>0ae5836</code></a> Add example of GraalPy to docs (<a href=\"https://redirect.github.com/actions/setup-python/issues/773\">#773</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/b64ffcaf5b410884ad320a9cfac8866006a109aa\"><code>b64ffca</code></a> update actions/checkout to v4 (<a href=\"https://redirect.github.com/actions/setup-python/issues/761\">#761</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/8d2896179abf658742de432b3f203d2c2d86a587\"><code>8d28961</code></a> Examples now use checkout@v4 (<a href=\"https://redirect.github.com/actions/setup-python/issues/738\">#738</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7bc6abb01e0555719edc2dbca70a2fde309e5e56\"><code>7bc6abb</code></a> advanced-usage.md: Encourage the use actions/checkout@v4 (<a href=\"https://redirect.github.com/actions/setup-python/issues/729\">#729</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/e8111cec9d3dc15220d8a3b638f08419f57b906a\"><code>e8111ce</code></a> Bump <code>@\u200bbabel/traverse</code> from 7.9.0 to 7.23.2 (<a href=\"https://redirect.github.com/actions/setup-python/issues/743\">#743</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/a00ea43da65e7c04d2bdae58b3afecd77057eb9e\"><code>a00ea43</code></a> add fix for graalpy ci (<a href=\"https://redirect.github.com/actions/setup-python/issues/741\">#741</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/8635b1ccc5934e73ed3510980fd2e7790b85839b\"><code>8635b1c</code></a> Change deprecation comment to past tense (<a href=\"https://redirect.github.com/actions/setup-python/issues/723\">#723</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/f6cc428f535856f9c23558d01765a42a4d6cf758\"><code>f6cc428</code></a> Use non-deprecated versions in examples (<a href=\"https://redirect.github.com/actions/setup-python/issues/724\">#724</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/5f2af211d616f86005883b44826180b21abb4060\"><code>5f2af21</code></a> Add GraalPy support (<a href=\"https://redirect.github.com/actions/setup-python/issues/694\">#694</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v4.5.0...v5.0.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=4.5.0&new-version=5.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2023-12-06T12:41:44Z",
      "updatedAt": "2023-12-06T12:41:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "127452b93acb3094a6f659d059550df5618c2714",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-5.0.0",
      "headRefOid": "fbcc7e2cd34ac7cffdf1e007206ca749e9cb2df0",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 467,
      "id": "PR_kwDOEpUZs85iG0Px",
      "title": "Bump actions/upload-artifact from 3 to 4",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/467",
      "state": "OPEN",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/upload-artifact](https://github.com/actions/upload-artifact) from 3 to 4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/upload-artifact/releases\">actions/upload-artifact's releases</a>.</em></p>\n<blockquote>\n<h2>v4.0.0</h2>\n<h2>What's Changed</h2>\n<p>The release of upload-artifact@v4 and download-artifact@v4 are major changes to the backend architecture of Artifacts. They have numerous performance and behavioral improvements.</p>\n<p>For more information, see the <a href=\"https://github.com/actions/toolkit/tree/main/packages/artifact\"><code>@\u200bactions/artifact</code></a> documentation.</p>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/vmjoseph\"><code>@\u200bvmjoseph</code></a> made their first contribution in <a href=\"https://redirect.github.com/actions/upload-artifact/pull/464\">actions/upload-artifact#464</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/upload-artifact/compare/v3...v4.0.0\">https://github.com/actions/upload-artifact/compare/v3...v4.0.0</a></p>\n<h2>v3.1.3</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>chore(github): remove trailing whitespaces by <a href=\"https://github.com/ljmf00\"><code>@\u200bljmf00</code></a> in <a href=\"https://redirect.github.com/actions/upload-artifact/pull/313\">actions/upload-artifact#313</a></li>\n<li>Bump <code>@\u200bactions/artifact</code> version to v1.1.2 by <a href=\"https://github.com/bethanyj28\"><code>@\u200bbethanyj28</code></a> in <a href=\"https://redirect.github.com/actions/upload-artifact/pull/436\">actions/upload-artifact#436</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/actions/upload-artifact/compare/v3...v3.1.3\">https://github.com/actions/upload-artifact/compare/v3...v3.1.3</a></p>\n<h2>v3.1.2</h2>\n<ul>\n<li>Update all <code>@actions/*</code> NPM packages to their latest versions- <a href=\"https://redirect.github.com/actions/upload-artifact/issues/374\">#374</a></li>\n<li>Update all dev dependencies to their most recent versions - <a href=\"https://redirect.github.com/actions/upload-artifact/issues/375\">#375</a></li>\n</ul>\n<h2>v3.1.1</h2>\n<ul>\n<li>Update actions/core package to latest version to remove <code>set-output</code> deprecation warning <a href=\"https://redirect.github.com/actions/upload-artifact/issues/351\">#351</a></li>\n</ul>\n<h2>v3.1.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Bump <code>@\u200bactions/artifact</code> to v1.1.0 (<a href=\"https://redirect.github.com/actions/upload-artifact/pull/327\">actions/upload-artifact#327</a>)\n<ul>\n<li>Adds checksum headers on artifact upload (<a href=\"https://redirect.github.com/actions/toolkit/pull/1095\">actions/toolkit#1095</a>) (<a href=\"https://redirect.github.com/actions/toolkit/pull/1063\">actions/toolkit#1063</a>)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/c7d193f32edcb7bfad88892161225aeda64e9392\"><code>c7d193f</code></a> Merge pull request <a href=\"https://redirect.github.com/actions/upload-artifact/issues/466\">#466</a> from actions/v4-beta</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/13131bb095770b4070a7477c3cd2d96e1c16d9f4\"><code>13131bb</code></a> licensed cache</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/4a6c273b9834f66a1d05c170dc3f80f9cdb9def1\"><code>4a6c273</code></a> Merge branch 'main' into v4-beta</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/f391bb91a3d3118aeca171c365bb319ece276b37\"><code>f391bb9</code></a> Merge pull request <a href=\"https://redirect.github.com/actions/upload-artifact/issues/465\">#465</a> from actions/robherley/v4-documentation</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/9653d03c4b74c32144e02dae644fea70e079d4b3\"><code>9653d03</code></a> Apply suggestions from code review</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/875b63076402f25ef9d52c294c86ba4f97810575\"><code>875b630</code></a> add limitations section</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/ecb21463e93740a6be75c3116242169bfdbcb15a\"><code>ecb2146</code></a> add compression example</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/5e7604f84a055838f64ed68bb9904751523081ae\"><code>5e7604f</code></a> trim some repeated info</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/d6437d07581fe318a364512e6cf6b1dca6b4f92c\"><code>d6437d0</code></a> naming</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/1b561557037b4957d7d184e9aac02bec86c771eb\"><code>1b56155</code></a> s/v4-beta/v4/g</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/upload-artifact/compare/v3...v4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/upload-artifact&package-manager=github_actions&previous-version=3&new-version=4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2023-12-15T12:29:59Z",
      "updatedAt": "2023-12-15T12:30:02Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "127452b93acb3094a6f659d059550df5618c2714",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/upload-artifact-4",
      "headRefOid": "96cb6414cd19274c5d7e4b976f4a7bbcb4bd9ef6",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 468,
      "id": "PR_kwDOEpUZs85iKZhv",
      "title": "Consistent nonces and comms naming",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/468",
      "state": "OPEN",
      "author": "sander",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Fixing a minor inconsistency introduced with the rename in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/430",
      "createdAt": "2023-12-16T10:58:41Z",
      "updatedAt": "2023-12-16T10:58:41Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "127452b93acb3094a6f659d059550df5618c2714",
      "headRepository": "sander/draft-irtf-cfrg-frost",
      "headRefName": "patch-1",
      "headRefOid": "d9a7061563de7e7ed455cfa9b310e87affd96bda",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 469,
      "id": "PR_kwDOEpUZs85iKaOJ",
      "title": "Option to receive message to be signed later without a Coordinator",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/469",
      "state": "OPEN",
      "author": "sander",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This change proposes an alternative Coordinator-less scenario:\r\n\r\n1. Participants commit()\r\n2. Participants receive message to be signed\r\n3. Participants sign() and aggregate()\r\n\r\nI don\u2019t yet see a security disadvantage to this.",
      "createdAt": "2023-12-16T11:11:54Z",
      "updatedAt": "2023-12-22T18:40:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "127452b93acb3094a6f659d059550df5618c2714",
      "headRepository": "sander/draft-irtf-cfrg-frost",
      "headRefName": "patch-2",
      "headRefOid": "5102c95ccf05f9c70f4695abe213bd0545092735",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    }
  ]
}